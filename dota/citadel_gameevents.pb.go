// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: citadel_gameevents.proto

package dota

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ECitadelGameEvents int32

const (
	ECitadelGameEvents_GE_FireBullets            ECitadelGameEvents = 450
	ECitadelGameEvents_GE_PlayerAnimEvent        ECitadelGameEvents = 451
	ECitadelGameEvents_GE_ParticleSystemManager  ECitadelGameEvents = 458
	ECitadelGameEvents_GE_ScreenTextPretty       ECitadelGameEvents = 459
	ECitadelGameEvents_GE_ServerRequestedTracer  ECitadelGameEvents = 460
	ECitadelGameEvents_GE_BulletImpact           ECitadelGameEvents = 461
	ECitadelGameEvents_GE_EnableSatVolumesEvent  ECitadelGameEvents = 462
	ECitadelGameEvents_GE_PlaceSatVolumeEvent    ECitadelGameEvents = 463
	ECitadelGameEvents_GE_DisableSatVolumesEvent ECitadelGameEvents = 464
	ECitadelGameEvents_GE_RemoveSatVolumeEvent   ECitadelGameEvents = 465
)

// Enum value maps for ECitadelGameEvents.
var (
	ECitadelGameEvents_name = map[int32]string{
		450: "GE_FireBullets",
		451: "GE_PlayerAnimEvent",
		458: "GE_ParticleSystemManager",
		459: "GE_ScreenTextPretty",
		460: "GE_ServerRequestedTracer",
		461: "GE_BulletImpact",
		462: "GE_EnableSatVolumesEvent",
		463: "GE_PlaceSatVolumeEvent",
		464: "GE_DisableSatVolumesEvent",
		465: "GE_RemoveSatVolumeEvent",
	}
	ECitadelGameEvents_value = map[string]int32{
		"GE_FireBullets":            450,
		"GE_PlayerAnimEvent":        451,
		"GE_ParticleSystemManager":  458,
		"GE_ScreenTextPretty":       459,
		"GE_ServerRequestedTracer":  460,
		"GE_BulletImpact":           461,
		"GE_EnableSatVolumesEvent":  462,
		"GE_PlaceSatVolumeEvent":    463,
		"GE_DisableSatVolumesEvent": 464,
		"GE_RemoveSatVolumeEvent":   465,
	}
)

func (x ECitadelGameEvents) Enum() *ECitadelGameEvents {
	p := new(ECitadelGameEvents)
	*p = x
	return p
}

func (x ECitadelGameEvents) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECitadelGameEvents) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gameevents_proto_enumTypes[0].Descriptor()
}

func (ECitadelGameEvents) Type() protoreflect.EnumType {
	return &file_citadel_gameevents_proto_enumTypes[0]
}

func (x ECitadelGameEvents) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECitadelGameEvents) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECitadelGameEvents(num)
	return nil
}

// Deprecated: Use ECitadelGameEvents.Descriptor instead.
func (ECitadelGameEvents) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{0}
}

type PARTICLE_SYSTEM_MANAGER_MESSAGE int32

const (
	PARTICLE_SYSTEM_MANAGER_MESSAGE_PARTICLE_SYSTEM_MANAGER_EVENT_CREATE             PARTICLE_SYSTEM_MANAGER_MESSAGE = 0
	PARTICLE_SYSTEM_MANAGER_MESSAGE_PARTICLE_SYSTEM_MANAGER_EVENT_DESTROY            PARTICLE_SYSTEM_MANAGER_MESSAGE = 1
	PARTICLE_SYSTEM_MANAGER_MESSAGE_PARTICLE_SYSTEM_MANAGER_EVENT_DESTROY_INVOLVING  PARTICLE_SYSTEM_MANAGER_MESSAGE = 2
	PARTICLE_SYSTEM_MANAGER_MESSAGE_PARTICLE_SYSTEM_MANAGER_EVENT_RELEASE            PARTICLE_SYSTEM_MANAGER_MESSAGE = 3
	PARTICLE_SYSTEM_MANAGER_MESSAGE_PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE             PARTICLE_SYSTEM_MANAGER_MESSAGE = 4
	PARTICLE_SYSTEM_MANAGER_MESSAGE_PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_FORWARD     PARTICLE_SYSTEM_MANAGER_MESSAGE = 5
	PARTICLE_SYSTEM_MANAGER_MESSAGE_PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_ORIENTATION PARTICLE_SYSTEM_MANAGER_MESSAGE = 6
	PARTICLE_SYSTEM_MANAGER_MESSAGE_PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_FALLBACK    PARTICLE_SYSTEM_MANAGER_MESSAGE = 7
	PARTICLE_SYSTEM_MANAGER_MESSAGE_PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_ENT         PARTICLE_SYSTEM_MANAGER_MESSAGE = 8
	PARTICLE_SYSTEM_MANAGER_MESSAGE_PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_OFFSET      PARTICLE_SYSTEM_MANAGER_MESSAGE = 9
	PARTICLE_SYSTEM_MANAGER_MESSAGE_PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_FROZEN      PARTICLE_SYSTEM_MANAGER_MESSAGE = 10
	PARTICLE_SYSTEM_MANAGER_MESSAGE_PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_SHOULD_DRAW PARTICLE_SYSTEM_MANAGER_MESSAGE = 11
)

// Enum value maps for PARTICLE_SYSTEM_MANAGER_MESSAGE.
var (
	PARTICLE_SYSTEM_MANAGER_MESSAGE_name = map[int32]string{
		0:  "PARTICLE_SYSTEM_MANAGER_EVENT_CREATE",
		1:  "PARTICLE_SYSTEM_MANAGER_EVENT_DESTROY",
		2:  "PARTICLE_SYSTEM_MANAGER_EVENT_DESTROY_INVOLVING",
		3:  "PARTICLE_SYSTEM_MANAGER_EVENT_RELEASE",
		4:  "PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE",
		5:  "PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_FORWARD",
		6:  "PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_ORIENTATION",
		7:  "PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_FALLBACK",
		8:  "PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_ENT",
		9:  "PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_OFFSET",
		10: "PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_FROZEN",
		11: "PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_SHOULD_DRAW",
	}
	PARTICLE_SYSTEM_MANAGER_MESSAGE_value = map[string]int32{
		"PARTICLE_SYSTEM_MANAGER_EVENT_CREATE":             0,
		"PARTICLE_SYSTEM_MANAGER_EVENT_DESTROY":            1,
		"PARTICLE_SYSTEM_MANAGER_EVENT_DESTROY_INVOLVING":  2,
		"PARTICLE_SYSTEM_MANAGER_EVENT_RELEASE":            3,
		"PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE":             4,
		"PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_FORWARD":     5,
		"PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_ORIENTATION": 6,
		"PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_FALLBACK":    7,
		"PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_ENT":         8,
		"PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_OFFSET":      9,
		"PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_FROZEN":      10,
		"PARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_SHOULD_DRAW": 11,
	}
)

func (x PARTICLE_SYSTEM_MANAGER_MESSAGE) Enum() *PARTICLE_SYSTEM_MANAGER_MESSAGE {
	p := new(PARTICLE_SYSTEM_MANAGER_MESSAGE)
	*p = x
	return p
}

func (x PARTICLE_SYSTEM_MANAGER_MESSAGE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PARTICLE_SYSTEM_MANAGER_MESSAGE) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gameevents_proto_enumTypes[1].Descriptor()
}

func (PARTICLE_SYSTEM_MANAGER_MESSAGE) Type() protoreflect.EnumType {
	return &file_citadel_gameevents_proto_enumTypes[1]
}

func (x PARTICLE_SYSTEM_MANAGER_MESSAGE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PARTICLE_SYSTEM_MANAGER_MESSAGE) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PARTICLE_SYSTEM_MANAGER_MESSAGE(num)
	return nil
}

// Deprecated: Use PARTICLE_SYSTEM_MANAGER_MESSAGE.Descriptor instead.
func (PARTICLE_SYSTEM_MANAGER_MESSAGE) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{1}
}

type CMsgFireBullets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin             *CMsgVector                         `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Angles             *CMsgQAngle                         `protobuf:"bytes,2,opt,name=angles" json:"angles,omitempty"`
	Seed               *uint32                             `protobuf:"varint,4,opt,name=seed" json:"seed,omitempty"`
	ShooterEntity      *int32                              `protobuf:"varint,5,opt,name=shooter_entity,json=shooterEntity" json:"shooter_entity,omitempty"`
	Ability            *int32                              `protobuf:"varint,7,opt,name=ability" json:"ability,omitempty"`
	PenetrationPercent *float32                            `protobuf:"fixed32,8,opt,name=penetration_percent,json=penetrationPercent" json:"penetration_percent,omitempty"`
	Spread             *float32                            `protobuf:"fixed32,9,opt,name=spread" json:"spread,omitempty"`
	FiredFromGun       *bool                               `protobuf:"varint,10,opt,name=fired_from_gun,json=firedFromGun" json:"fired_from_gun,omitempty"`
	BulletsOverride    *uint32                             `protobuf:"varint,11,opt,name=bullets_override,json=bulletsOverride" json:"bullets_override,omitempty"`
	TracerReplacement  *CMsgFireBullets_TracerAssignment   `protobuf:"bytes,12,opt,name=tracer_replacement,json=tracerReplacement" json:"tracer_replacement,omitempty"`
	TracerAdditional   []*CMsgFireBullets_TracerAssignment `protobuf:"bytes,13,rep,name=tracer_additional,json=tracerAdditional" json:"tracer_additional,omitempty"`
	AnglesOriginal     *CMsgQAngle                         `protobuf:"bytes,14,opt,name=angles_original,json=anglesOriginal" json:"angles_original,omitempty"`
	WeaponSubclassId   *uint32                             `protobuf:"varint,15,opt,name=weapon_subclass_id,json=weaponSubclassId" json:"weapon_subclass_id,omitempty"`
	ShotNumber         *uint32                             `protobuf:"varint,16,opt,name=shot_number,json=shotNumber" json:"shot_number,omitempty"`
	IgnoreEntity       *int32                              `protobuf:"varint,17,opt,name=ignore_entity,json=ignoreEntity" json:"ignore_entity,omitempty"`
	MaxRange           *float32                            `protobuf:"fixed32,18,opt,name=max_range,json=maxRange" json:"max_range,omitempty"`
}

func (x *CMsgFireBullets) Reset() {
	*x = CMsgFireBullets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgFireBullets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgFireBullets) ProtoMessage() {}

func (x *CMsgFireBullets) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgFireBullets.ProtoReflect.Descriptor instead.
func (*CMsgFireBullets) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgFireBullets) GetOrigin() *CMsgVector {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CMsgFireBullets) GetAngles() *CMsgQAngle {
	if x != nil {
		return x.Angles
	}
	return nil
}

func (x *CMsgFireBullets) GetSeed() uint32 {
	if x != nil && x.Seed != nil {
		return *x.Seed
	}
	return 0
}

func (x *CMsgFireBullets) GetShooterEntity() int32 {
	if x != nil && x.ShooterEntity != nil {
		return *x.ShooterEntity
	}
	return 0
}

func (x *CMsgFireBullets) GetAbility() int32 {
	if x != nil && x.Ability != nil {
		return *x.Ability
	}
	return 0
}

func (x *CMsgFireBullets) GetPenetrationPercent() float32 {
	if x != nil && x.PenetrationPercent != nil {
		return *x.PenetrationPercent
	}
	return 0
}

func (x *CMsgFireBullets) GetSpread() float32 {
	if x != nil && x.Spread != nil {
		return *x.Spread
	}
	return 0
}

func (x *CMsgFireBullets) GetFiredFromGun() bool {
	if x != nil && x.FiredFromGun != nil {
		return *x.FiredFromGun
	}
	return false
}

func (x *CMsgFireBullets) GetBulletsOverride() uint32 {
	if x != nil && x.BulletsOverride != nil {
		return *x.BulletsOverride
	}
	return 0
}

func (x *CMsgFireBullets) GetTracerReplacement() *CMsgFireBullets_TracerAssignment {
	if x != nil {
		return x.TracerReplacement
	}
	return nil
}

func (x *CMsgFireBullets) GetTracerAdditional() []*CMsgFireBullets_TracerAssignment {
	if x != nil {
		return x.TracerAdditional
	}
	return nil
}

func (x *CMsgFireBullets) GetAnglesOriginal() *CMsgQAngle {
	if x != nil {
		return x.AnglesOriginal
	}
	return nil
}

func (x *CMsgFireBullets) GetWeaponSubclassId() uint32 {
	if x != nil && x.WeaponSubclassId != nil {
		return *x.WeaponSubclassId
	}
	return 0
}

func (x *CMsgFireBullets) GetShotNumber() uint32 {
	if x != nil && x.ShotNumber != nil {
		return *x.ShotNumber
	}
	return 0
}

func (x *CMsgFireBullets) GetIgnoreEntity() int32 {
	if x != nil && x.IgnoreEntity != nil {
		return *x.IgnoreEntity
	}
	return 0
}

func (x *CMsgFireBullets) GetMaxRange() float32 {
	if x != nil && x.MaxRange != nil {
		return *x.MaxRange
	}
	return 0
}

type CMsgBulletImpact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceStart       *CMsgVector `protobuf:"bytes,1,opt,name=trace_start,json=traceStart" json:"trace_start,omitempty"`
	ImpactOrigin     *CMsgVector `protobuf:"bytes,2,opt,name=impact_origin,json=impactOrigin" json:"impact_origin,omitempty"`
	SurfaceNormal    *CMsgVector `protobuf:"bytes,3,opt,name=surface_normal,json=surfaceNormal" json:"surface_normal,omitempty"`
	Damage           *uint32     `protobuf:"varint,4,opt,name=damage" json:"damage,omitempty"`
	SurfaceType      *uint32     `protobuf:"varint,5,opt,name=surface_type,json=surfaceType" json:"surface_type,omitempty"`
	AbilityEntindex  *int32      `protobuf:"varint,7,opt,name=ability_entindex,json=abilityEntindex" json:"ability_entindex,omitempty"`
	ImpactedEntindex *int32      `protobuf:"varint,8,opt,name=impacted_entindex,json=impactedEntindex" json:"impacted_entindex,omitempty"`
	ImpactedHitbox   *uint32     `protobuf:"varint,9,opt,name=impacted_hitbox,json=impactedHitbox" json:"impacted_hitbox,omitempty"`
	WeaponSubclassId *uint32     `protobuf:"varint,10,opt,name=weapon_subclass_id,json=weaponSubclassId" json:"weapon_subclass_id,omitempty"`
	ShooterEntindex  *int32      `protobuf:"varint,11,opt,name=shooter_entindex,json=shooterEntindex" json:"shooter_entindex,omitempty"`
}

func (x *CMsgBulletImpact) Reset() {
	*x = CMsgBulletImpact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBulletImpact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBulletImpact) ProtoMessage() {}

func (x *CMsgBulletImpact) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBulletImpact.ProtoReflect.Descriptor instead.
func (*CMsgBulletImpact) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgBulletImpact) GetTraceStart() *CMsgVector {
	if x != nil {
		return x.TraceStart
	}
	return nil
}

func (x *CMsgBulletImpact) GetImpactOrigin() *CMsgVector {
	if x != nil {
		return x.ImpactOrigin
	}
	return nil
}

func (x *CMsgBulletImpact) GetSurfaceNormal() *CMsgVector {
	if x != nil {
		return x.SurfaceNormal
	}
	return nil
}

func (x *CMsgBulletImpact) GetDamage() uint32 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

func (x *CMsgBulletImpact) GetSurfaceType() uint32 {
	if x != nil && x.SurfaceType != nil {
		return *x.SurfaceType
	}
	return 0
}

func (x *CMsgBulletImpact) GetAbilityEntindex() int32 {
	if x != nil && x.AbilityEntindex != nil {
		return *x.AbilityEntindex
	}
	return 0
}

func (x *CMsgBulletImpact) GetImpactedEntindex() int32 {
	if x != nil && x.ImpactedEntindex != nil {
		return *x.ImpactedEntindex
	}
	return 0
}

func (x *CMsgBulletImpact) GetImpactedHitbox() uint32 {
	if x != nil && x.ImpactedHitbox != nil {
		return *x.ImpactedHitbox
	}
	return 0
}

func (x *CMsgBulletImpact) GetWeaponSubclassId() uint32 {
	if x != nil && x.WeaponSubclassId != nil {
		return *x.WeaponSubclassId
	}
	return 0
}

func (x *CMsgBulletImpact) GetShooterEntindex() int32 {
	if x != nil && x.ShooterEntindex != nil {
		return *x.ShooterEntindex
	}
	return 0
}

type CMsgPlayerAnimEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player *uint32 `protobuf:"fixed32,1,opt,name=player" json:"player,omitempty"`
	Event  *uint32 `protobuf:"varint,2,opt,name=event" json:"event,omitempty"`
	Data   *int32  `protobuf:"varint,3,opt,name=data" json:"data,omitempty"`
}

func (x *CMsgPlayerAnimEvent) Reset() {
	*x = CMsgPlayerAnimEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerAnimEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerAnimEvent) ProtoMessage() {}

func (x *CMsgPlayerAnimEvent) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerAnimEvent.ProtoReflect.Descriptor instead.
func (*CMsgPlayerAnimEvent) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgPlayerAnimEvent) GetPlayer() uint32 {
	if x != nil && x.Player != nil {
		return *x.Player
	}
	return 0
}

func (x *CMsgPlayerAnimEvent) GetEvent() uint32 {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return 0
}

func (x *CMsgPlayerAnimEvent) GetData() int32 {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return 0
}

type CMsgParticleSystemManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                     *PARTICLE_SYSTEM_MANAGER_MESSAGE                    `protobuf:"varint,1,req,name=type,enum=dota.PARTICLE_SYSTEM_MANAGER_MESSAGE" json:"type,omitempty"`
	Index                    *uint32                                             `protobuf:"varint,2,req,name=index" json:"index,omitempty"`
	CreateParticle           *CMsgParticleSystemManager_CreateParticle           `protobuf:"bytes,3,opt,name=create_particle,json=createParticle" json:"create_particle,omitempty"`
	DestroyParticle          *CMsgParticleSystemManager_DestroyParticle          `protobuf:"bytes,4,opt,name=destroy_particle,json=destroyParticle" json:"destroy_particle,omitempty"`
	DestroyParticleInvolving *CMsgParticleSystemManager_DestroyParticleInvolving `protobuf:"bytes,5,opt,name=destroy_particle_involving,json=destroyParticleInvolving" json:"destroy_particle_involving,omitempty"`
	ReleaseParticleIndex     *CMsgParticleSystemManager_ReleaseParticleIndex     `protobuf:"bytes,6,opt,name=release_particle_index,json=releaseParticleIndex" json:"release_particle_index,omitempty"`
	UpdateParticle           *CMsgParticleSystemManager_UpdateParticle           `protobuf:"bytes,7,opt,name=update_particle,json=updateParticle" json:"update_particle,omitempty"`
	UpdateParticleFwd        *CMsgParticleSystemManager_UpdateParticleFwd        `protobuf:"bytes,8,opt,name=update_particle_fwd,json=updateParticleFwd" json:"update_particle_fwd,omitempty"`
	UpdateParticleOrient     *CMsgParticleSystemManager_UpdateParticleOrient     `protobuf:"bytes,9,opt,name=update_particle_orient,json=updateParticleOrient" json:"update_particle_orient,omitempty"`
	UpdateParticleFallback   *CMsgParticleSystemManager_UpdateParticleFallback   `protobuf:"bytes,10,opt,name=update_particle_fallback,json=updateParticleFallback" json:"update_particle_fallback,omitempty"`
	UpdateParticleOffset     *CMsgParticleSystemManager_UpdateParticleOffset     `protobuf:"bytes,11,opt,name=update_particle_offset,json=updateParticleOffset" json:"update_particle_offset,omitempty"`
	UpdateParticleEnt        *CMsgParticleSystemManager_UpdateParticleEnt        `protobuf:"bytes,12,opt,name=update_particle_ent,json=updateParticleEnt" json:"update_particle_ent,omitempty"`
	UpdateParticleFrozen     *CMsgParticleSystemManager_UpdateParticleFrozen     `protobuf:"bytes,13,opt,name=update_particle_frozen,json=updateParticleFrozen" json:"update_particle_frozen,omitempty"`
	UpdateParticleShouldDraw *CMsgParticleSystemManager_UpdateParticleShouldDraw `protobuf:"bytes,14,opt,name=update_particle_should_draw,json=updateParticleShouldDraw" json:"update_particle_should_draw,omitempty"`
}

func (x *CMsgParticleSystemManager) Reset() {
	*x = CMsgParticleSystemManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgParticleSystemManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgParticleSystemManager) ProtoMessage() {}

func (x *CMsgParticleSystemManager) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgParticleSystemManager.ProtoReflect.Descriptor instead.
func (*CMsgParticleSystemManager) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgParticleSystemManager) GetType() PARTICLE_SYSTEM_MANAGER_MESSAGE {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PARTICLE_SYSTEM_MANAGER_MESSAGE_PARTICLE_SYSTEM_MANAGER_EVENT_CREATE
}

func (x *CMsgParticleSystemManager) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CMsgParticleSystemManager) GetCreateParticle() *CMsgParticleSystemManager_CreateParticle {
	if x != nil {
		return x.CreateParticle
	}
	return nil
}

func (x *CMsgParticleSystemManager) GetDestroyParticle() *CMsgParticleSystemManager_DestroyParticle {
	if x != nil {
		return x.DestroyParticle
	}
	return nil
}

func (x *CMsgParticleSystemManager) GetDestroyParticleInvolving() *CMsgParticleSystemManager_DestroyParticleInvolving {
	if x != nil {
		return x.DestroyParticleInvolving
	}
	return nil
}

func (x *CMsgParticleSystemManager) GetReleaseParticleIndex() *CMsgParticleSystemManager_ReleaseParticleIndex {
	if x != nil {
		return x.ReleaseParticleIndex
	}
	return nil
}

func (x *CMsgParticleSystemManager) GetUpdateParticle() *CMsgParticleSystemManager_UpdateParticle {
	if x != nil {
		return x.UpdateParticle
	}
	return nil
}

func (x *CMsgParticleSystemManager) GetUpdateParticleFwd() *CMsgParticleSystemManager_UpdateParticleFwd {
	if x != nil {
		return x.UpdateParticleFwd
	}
	return nil
}

func (x *CMsgParticleSystemManager) GetUpdateParticleOrient() *CMsgParticleSystemManager_UpdateParticleOrient {
	if x != nil {
		return x.UpdateParticleOrient
	}
	return nil
}

func (x *CMsgParticleSystemManager) GetUpdateParticleFallback() *CMsgParticleSystemManager_UpdateParticleFallback {
	if x != nil {
		return x.UpdateParticleFallback
	}
	return nil
}

func (x *CMsgParticleSystemManager) GetUpdateParticleOffset() *CMsgParticleSystemManager_UpdateParticleOffset {
	if x != nil {
		return x.UpdateParticleOffset
	}
	return nil
}

func (x *CMsgParticleSystemManager) GetUpdateParticleEnt() *CMsgParticleSystemManager_UpdateParticleEnt {
	if x != nil {
		return x.UpdateParticleEnt
	}
	return nil
}

func (x *CMsgParticleSystemManager) GetUpdateParticleFrozen() *CMsgParticleSystemManager_UpdateParticleFrozen {
	if x != nil {
		return x.UpdateParticleFrozen
	}
	return nil
}

func (x *CMsgParticleSystemManager) GetUpdateParticleShouldDraw() *CMsgParticleSystemManager_UpdateParticleShouldDraw {
	if x != nil {
		return x.UpdateParticleShouldDraw
	}
	return nil
}

type CMsgScreenTextPretty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPos     *float32 `protobuf:"fixed32,1,opt,name=x_pos,json=xPos" json:"x_pos,omitempty"`
	YPos     *float32 `protobuf:"fixed32,2,opt,name=y_pos,json=yPos" json:"y_pos,omitempty"`
	Line     *int32   `protobuf:"varint,3,opt,name=line" json:"line,omitempty"`
	Text     *string  `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
	R        *int32   `protobuf:"varint,5,opt,name=r" json:"r,omitempty"`
	G        *int32   `protobuf:"varint,6,opt,name=g" json:"g,omitempty"`
	B        *int32   `protobuf:"varint,7,opt,name=b" json:"b,omitempty"`
	A        *int32   `protobuf:"varint,8,opt,name=a" json:"a,omitempty"`
	Duration *float32 `protobuf:"fixed32,9,opt,name=duration" json:"duration,omitempty"`
	FontName *string  `protobuf:"bytes,10,opt,name=font_name,json=fontName" json:"font_name,omitempty"`
	FontSize *int32   `protobuf:"varint,11,opt,name=font_size,json=fontSize" json:"font_size,omitempty"`
	BoldFont *bool    `protobuf:"varint,12,opt,name=bold_font,json=boldFont" json:"bold_font,omitempty"`
}

func (x *CMsgScreenTextPretty) Reset() {
	*x = CMsgScreenTextPretty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgScreenTextPretty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgScreenTextPretty) ProtoMessage() {}

func (x *CMsgScreenTextPretty) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgScreenTextPretty.ProtoReflect.Descriptor instead.
func (*CMsgScreenTextPretty) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgScreenTextPretty) GetXPos() float32 {
	if x != nil && x.XPos != nil {
		return *x.XPos
	}
	return 0
}

func (x *CMsgScreenTextPretty) GetYPos() float32 {
	if x != nil && x.YPos != nil {
		return *x.YPos
	}
	return 0
}

func (x *CMsgScreenTextPretty) GetLine() int32 {
	if x != nil && x.Line != nil {
		return *x.Line
	}
	return 0
}

func (x *CMsgScreenTextPretty) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *CMsgScreenTextPretty) GetR() int32 {
	if x != nil && x.R != nil {
		return *x.R
	}
	return 0
}

func (x *CMsgScreenTextPretty) GetG() int32 {
	if x != nil && x.G != nil {
		return *x.G
	}
	return 0
}

func (x *CMsgScreenTextPretty) GetB() int32 {
	if x != nil && x.B != nil {
		return *x.B
	}
	return 0
}

func (x *CMsgScreenTextPretty) GetA() int32 {
	if x != nil && x.A != nil {
		return *x.A
	}
	return 0
}

func (x *CMsgScreenTextPretty) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgScreenTextPretty) GetFontName() string {
	if x != nil && x.FontName != nil {
		return *x.FontName
	}
	return ""
}

func (x *CMsgScreenTextPretty) GetFontSize() int32 {
	if x != nil && x.FontSize != nil {
		return *x.FontSize
	}
	return 0
}

func (x *CMsgScreenTextPretty) GetBoldFont() bool {
	if x != nil && x.BoldFont != nil {
		return *x.BoldFont
	}
	return false
}

type CMsgServerRequestedTracer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin       *CMsgVector `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	End          *CMsgVector `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
	Weaponid     *int32      `protobuf:"varint,3,opt,name=weaponid" json:"weaponid,omitempty"`
	EntityHandle *uint32     `protobuf:"varint,4,opt,name=entity_handle,json=entityHandle" json:"entity_handle,omitempty"`
	Dps          *float32    `protobuf:"fixed32,5,opt,name=dps" json:"dps,omitempty"`
}

func (x *CMsgServerRequestedTracer) Reset() {
	*x = CMsgServerRequestedTracer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerRequestedTracer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerRequestedTracer) ProtoMessage() {}

func (x *CMsgServerRequestedTracer) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerRequestedTracer.ProtoReflect.Descriptor instead.
func (*CMsgServerRequestedTracer) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgServerRequestedTracer) GetOrigin() *CMsgVector {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CMsgServerRequestedTracer) GetEnd() *CMsgVector {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *CMsgServerRequestedTracer) GetWeaponid() int32 {
	if x != nil && x.Weaponid != nil {
		return *x.Weaponid
	}
	return 0
}

func (x *CMsgServerRequestedTracer) GetEntityHandle() uint32 {
	if x != nil && x.EntityHandle != nil {
		return *x.EntityHandle
	}
	return 0
}

func (x *CMsgServerRequestedTracer) GetDps() float32 {
	if x != nil && x.Dps != nil {
		return *x.Dps
	}
	return 0
}

type CMsgEnableSatVolumesEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode         *uint32  `protobuf:"varint,1,opt,name=mode" json:"mode,omitempty"`
	DesatAmount  *float32 `protobuf:"fixed32,2,opt,name=desat_amount,json=desatAmount" json:"desat_amount,omitempty"`
	SatTint      *uint32  `protobuf:"fixed32,3,opt,name=sat_tint,json=satTint" json:"sat_tint,omitempty"`
	DesatTint    *uint32  `protobuf:"fixed32,4,opt,name=desat_tint,json=desatTint" json:"desat_tint,omitempty"`
	OutlineColor *uint32  `protobuf:"fixed32,5,opt,name=outline_color,json=outlineColor" json:"outline_color,omitempty"`
}

func (x *CMsgEnableSatVolumesEvent) Reset() {
	*x = CMsgEnableSatVolumesEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgEnableSatVolumesEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgEnableSatVolumesEvent) ProtoMessage() {}

func (x *CMsgEnableSatVolumesEvent) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgEnableSatVolumesEvent.ProtoReflect.Descriptor instead.
func (*CMsgEnableSatVolumesEvent) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgEnableSatVolumesEvent) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *CMsgEnableSatVolumesEvent) GetDesatAmount() float32 {
	if x != nil && x.DesatAmount != nil {
		return *x.DesatAmount
	}
	return 0
}

func (x *CMsgEnableSatVolumesEvent) GetSatTint() uint32 {
	if x != nil && x.SatTint != nil {
		return *x.SatTint
	}
	return 0
}

func (x *CMsgEnableSatVolumesEvent) GetDesatTint() uint32 {
	if x != nil && x.DesatTint != nil {
		return *x.DesatTint
	}
	return 0
}

func (x *CMsgEnableSatVolumesEvent) GetOutlineColor() uint32 {
	if x != nil && x.OutlineColor != nil {
		return *x.OutlineColor
	}
	return 0
}

type CMsgPlaceSatVolumeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position         *CMsgVector `protobuf:"bytes,1,opt,name=position" json:"position,omitempty"`
	Direction        *CMsgVector `protobuf:"bytes,2,opt,name=direction" json:"direction,omitempty"`
	Radius           *float32    `protobuf:"fixed32,3,opt,name=radius" json:"radius,omitempty"`
	FalloffDistance  *float32    `protobuf:"fixed32,4,opt,name=falloff_distance,json=falloffDistance" json:"falloff_distance,omitempty"`
	ThetaDot         *float32    `protobuf:"fixed32,5,opt,name=theta_dot,json=thetaDot" json:"theta_dot,omitempty"`
	PhiDot           *float32    `protobuf:"fixed32,6,opt,name=phi_dot,json=phiDot" json:"phi_dot,omitempty"`
	EntityHandle     *uint32     `protobuf:"varint,7,opt,name=entity_handle,json=entityHandle" json:"entity_handle,omitempty"`
	AttachmentHandle *uint32     `protobuf:"varint,8,opt,name=attachment_handle,json=attachmentHandle" json:"attachment_handle,omitempty"`
	Type             *uint32     `protobuf:"varint,9,opt,name=type" json:"type,omitempty"`
	VolumeId         *int32      `protobuf:"varint,10,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
}

func (x *CMsgPlaceSatVolumeEvent) Reset() {
	*x = CMsgPlaceSatVolumeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlaceSatVolumeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlaceSatVolumeEvent) ProtoMessage() {}

func (x *CMsgPlaceSatVolumeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlaceSatVolumeEvent.ProtoReflect.Descriptor instead.
func (*CMsgPlaceSatVolumeEvent) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgPlaceSatVolumeEvent) GetPosition() *CMsgVector {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CMsgPlaceSatVolumeEvent) GetDirection() *CMsgVector {
	if x != nil {
		return x.Direction
	}
	return nil
}

func (x *CMsgPlaceSatVolumeEvent) GetRadius() float32 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return 0
}

func (x *CMsgPlaceSatVolumeEvent) GetFalloffDistance() float32 {
	if x != nil && x.FalloffDistance != nil {
		return *x.FalloffDistance
	}
	return 0
}

func (x *CMsgPlaceSatVolumeEvent) GetThetaDot() float32 {
	if x != nil && x.ThetaDot != nil {
		return *x.ThetaDot
	}
	return 0
}

func (x *CMsgPlaceSatVolumeEvent) GetPhiDot() float32 {
	if x != nil && x.PhiDot != nil {
		return *x.PhiDot
	}
	return 0
}

func (x *CMsgPlaceSatVolumeEvent) GetEntityHandle() uint32 {
	if x != nil && x.EntityHandle != nil {
		return *x.EntityHandle
	}
	return 0
}

func (x *CMsgPlaceSatVolumeEvent) GetAttachmentHandle() uint32 {
	if x != nil && x.AttachmentHandle != nil {
		return *x.AttachmentHandle
	}
	return 0
}

func (x *CMsgPlaceSatVolumeEvent) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CMsgPlaceSatVolumeEvent) GetVolumeId() int32 {
	if x != nil && x.VolumeId != nil {
		return *x.VolumeId
	}
	return 0
}

type CMsgRemoveSatVolumeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeId *int32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
}

func (x *CMsgRemoveSatVolumeEvent) Reset() {
	*x = CMsgRemoveSatVolumeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoveSatVolumeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoveSatVolumeEvent) ProtoMessage() {}

func (x *CMsgRemoveSatVolumeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoveSatVolumeEvent.ProtoReflect.Descriptor instead.
func (*CMsgRemoveSatVolumeEvent) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgRemoveSatVolumeEvent) GetVolumeId() int32 {
	if x != nil && x.VolumeId != nil {
		return *x.VolumeId
	}
	return 0
}

type CMsgDisableSatVolumesEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgDisableSatVolumesEvent) Reset() {
	*x = CMsgDisableSatVolumesEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDisableSatVolumesEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDisableSatVolumesEvent) ProtoMessage() {}

func (x *CMsgDisableSatVolumesEvent) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDisableSatVolumesEvent.ProtoReflect.Descriptor instead.
func (*CMsgDisableSatVolumesEvent) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{9}
}

type CMsgFireBullets_TracerAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TracerResourceId *uint64 `protobuf:"varint,1,opt,name=tracer_resource_id,json=tracerResourceId" json:"tracer_resource_id,omitempty"`
	BulletIndicies   *uint32 `protobuf:"varint,2,opt,name=bullet_indicies,json=bulletIndicies" json:"bullet_indicies,omitempty"`
}

func (x *CMsgFireBullets_TracerAssignment) Reset() {
	*x = CMsgFireBullets_TracerAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgFireBullets_TracerAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgFireBullets_TracerAssignment) ProtoMessage() {}

func (x *CMsgFireBullets_TracerAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgFireBullets_TracerAssignment.ProtoReflect.Descriptor instead.
func (*CMsgFireBullets_TracerAssignment) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CMsgFireBullets_TracerAssignment) GetTracerResourceId() uint64 {
	if x != nil && x.TracerResourceId != nil {
		return *x.TracerResourceId
	}
	return 0
}

func (x *CMsgFireBullets_TracerAssignment) GetBulletIndicies() uint32 {
	if x != nil && x.BulletIndicies != nil {
		return *x.BulletIndicies
	}
	return 0
}

type CMsgParticleSystemManager_CreateParticle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticleNameIndex *uint64     `protobuf:"fixed64,1,opt,name=particle_name_index,json=particleNameIndex" json:"particle_name_index,omitempty"`
	AttachType        *int32      `protobuf:"varint,2,opt,name=attach_type,json=attachType" json:"attach_type,omitempty"`
	EntityHandle      *uint32     `protobuf:"varint,3,opt,name=entity_handle,json=entityHandle" json:"entity_handle,omitempty"`
	Position          *CMsgVector `protobuf:"bytes,4,opt,name=position" json:"position,omitempty"`
	Angles            *CMsgQAngle `protobuf:"bytes,5,opt,name=angles" json:"angles,omitempty"`
}

func (x *CMsgParticleSystemManager_CreateParticle) Reset() {
	*x = CMsgParticleSystemManager_CreateParticle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgParticleSystemManager_CreateParticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgParticleSystemManager_CreateParticle) ProtoMessage() {}

func (x *CMsgParticleSystemManager_CreateParticle) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgParticleSystemManager_CreateParticle.ProtoReflect.Descriptor instead.
func (*CMsgParticleSystemManager_CreateParticle) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CMsgParticleSystemManager_CreateParticle) GetParticleNameIndex() uint64 {
	if x != nil && x.ParticleNameIndex != nil {
		return *x.ParticleNameIndex
	}
	return 0
}

func (x *CMsgParticleSystemManager_CreateParticle) GetAttachType() int32 {
	if x != nil && x.AttachType != nil {
		return *x.AttachType
	}
	return 0
}

func (x *CMsgParticleSystemManager_CreateParticle) GetEntityHandle() uint32 {
	if x != nil && x.EntityHandle != nil {
		return *x.EntityHandle
	}
	return 0
}

func (x *CMsgParticleSystemManager_CreateParticle) GetPosition() *CMsgVector {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CMsgParticleSystemManager_CreateParticle) GetAngles() *CMsgQAngle {
	if x != nil {
		return x.Angles
	}
	return nil
}

type CMsgParticleSystemManager_DestroyParticle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestroyImmediately *bool `protobuf:"varint,1,opt,name=destroy_immediately,json=destroyImmediately" json:"destroy_immediately,omitempty"`
}

func (x *CMsgParticleSystemManager_DestroyParticle) Reset() {
	*x = CMsgParticleSystemManager_DestroyParticle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgParticleSystemManager_DestroyParticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgParticleSystemManager_DestroyParticle) ProtoMessage() {}

func (x *CMsgParticleSystemManager_DestroyParticle) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgParticleSystemManager_DestroyParticle.ProtoReflect.Descriptor instead.
func (*CMsgParticleSystemManager_DestroyParticle) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{3, 1}
}

func (x *CMsgParticleSystemManager_DestroyParticle) GetDestroyImmediately() bool {
	if x != nil && x.DestroyImmediately != nil {
		return *x.DestroyImmediately
	}
	return false
}

type CMsgParticleSystemManager_DestroyParticleInvolving struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestroyImmediately *bool   `protobuf:"varint,1,opt,name=destroy_immediately,json=destroyImmediately" json:"destroy_immediately,omitempty"`
	EntityHandle       *uint32 `protobuf:"varint,3,opt,name=entity_handle,json=entityHandle" json:"entity_handle,omitempty"`
}

func (x *CMsgParticleSystemManager_DestroyParticleInvolving) Reset() {
	*x = CMsgParticleSystemManager_DestroyParticleInvolving{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgParticleSystemManager_DestroyParticleInvolving) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgParticleSystemManager_DestroyParticleInvolving) ProtoMessage() {}

func (x *CMsgParticleSystemManager_DestroyParticleInvolving) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgParticleSystemManager_DestroyParticleInvolving.ProtoReflect.Descriptor instead.
func (*CMsgParticleSystemManager_DestroyParticleInvolving) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{3, 2}
}

func (x *CMsgParticleSystemManager_DestroyParticleInvolving) GetDestroyImmediately() bool {
	if x != nil && x.DestroyImmediately != nil {
		return *x.DestroyImmediately
	}
	return false
}

func (x *CMsgParticleSystemManager_DestroyParticleInvolving) GetEntityHandle() uint32 {
	if x != nil && x.EntityHandle != nil {
		return *x.EntityHandle
	}
	return 0
}

type CMsgParticleSystemManager_ReleaseParticleIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgParticleSystemManager_ReleaseParticleIndex) Reset() {
	*x = CMsgParticleSystemManager_ReleaseParticleIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgParticleSystemManager_ReleaseParticleIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgParticleSystemManager_ReleaseParticleIndex) ProtoMessage() {}

func (x *CMsgParticleSystemManager_ReleaseParticleIndex) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgParticleSystemManager_ReleaseParticleIndex.ProtoReflect.Descriptor instead.
func (*CMsgParticleSystemManager_ReleaseParticleIndex) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{3, 3}
}

type CMsgParticleSystemManager_UpdateParticle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPoint *int32      `protobuf:"varint,1,opt,name=control_point,json=controlPoint" json:"control_point,omitempty"`
	Position     *CMsgVector `protobuf:"bytes,2,opt,name=position" json:"position,omitempty"`
}

func (x *CMsgParticleSystemManager_UpdateParticle) Reset() {
	*x = CMsgParticleSystemManager_UpdateParticle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgParticleSystemManager_UpdateParticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgParticleSystemManager_UpdateParticle) ProtoMessage() {}

func (x *CMsgParticleSystemManager_UpdateParticle) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgParticleSystemManager_UpdateParticle.ProtoReflect.Descriptor instead.
func (*CMsgParticleSystemManager_UpdateParticle) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{3, 4}
}

func (x *CMsgParticleSystemManager_UpdateParticle) GetControlPoint() int32 {
	if x != nil && x.ControlPoint != nil {
		return *x.ControlPoint
	}
	return 0
}

func (x *CMsgParticleSystemManager_UpdateParticle) GetPosition() *CMsgVector {
	if x != nil {
		return x.Position
	}
	return nil
}

type CMsgParticleSystemManager_UpdateParticleFwd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPoint *int32      `protobuf:"varint,1,opt,name=control_point,json=controlPoint" json:"control_point,omitempty"`
	Forward      *CMsgVector `protobuf:"bytes,2,opt,name=forward" json:"forward,omitempty"`
}

func (x *CMsgParticleSystemManager_UpdateParticleFwd) Reset() {
	*x = CMsgParticleSystemManager_UpdateParticleFwd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgParticleSystemManager_UpdateParticleFwd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgParticleSystemManager_UpdateParticleFwd) ProtoMessage() {}

func (x *CMsgParticleSystemManager_UpdateParticleFwd) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgParticleSystemManager_UpdateParticleFwd.ProtoReflect.Descriptor instead.
func (*CMsgParticleSystemManager_UpdateParticleFwd) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{3, 5}
}

func (x *CMsgParticleSystemManager_UpdateParticleFwd) GetControlPoint() int32 {
	if x != nil && x.ControlPoint != nil {
		return *x.ControlPoint
	}
	return 0
}

func (x *CMsgParticleSystemManager_UpdateParticleFwd) GetForward() *CMsgVector {
	if x != nil {
		return x.Forward
	}
	return nil
}

type CMsgParticleSystemManager_UpdateParticleOrient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPoint *int32      `protobuf:"varint,1,opt,name=control_point,json=controlPoint" json:"control_point,omitempty"`
	Forward      *CMsgVector `protobuf:"bytes,2,opt,name=forward" json:"forward,omitempty"`
	Left         *CMsgVector `protobuf:"bytes,3,opt,name=left" json:"left,omitempty"`
	Up           *CMsgVector `protobuf:"bytes,4,opt,name=up" json:"up,omitempty"`
}

func (x *CMsgParticleSystemManager_UpdateParticleOrient) Reset() {
	*x = CMsgParticleSystemManager_UpdateParticleOrient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgParticleSystemManager_UpdateParticleOrient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgParticleSystemManager_UpdateParticleOrient) ProtoMessage() {}

func (x *CMsgParticleSystemManager_UpdateParticleOrient) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgParticleSystemManager_UpdateParticleOrient.ProtoReflect.Descriptor instead.
func (*CMsgParticleSystemManager_UpdateParticleOrient) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{3, 6}
}

func (x *CMsgParticleSystemManager_UpdateParticleOrient) GetControlPoint() int32 {
	if x != nil && x.ControlPoint != nil {
		return *x.ControlPoint
	}
	return 0
}

func (x *CMsgParticleSystemManager_UpdateParticleOrient) GetForward() *CMsgVector {
	if x != nil {
		return x.Forward
	}
	return nil
}

func (x *CMsgParticleSystemManager_UpdateParticleOrient) GetLeft() *CMsgVector {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *CMsgParticleSystemManager_UpdateParticleOrient) GetUp() *CMsgVector {
	if x != nil {
		return x.Up
	}
	return nil
}

type CMsgParticleSystemManager_UpdateParticleFallback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPoint *int32      `protobuf:"varint,1,opt,name=control_point,json=controlPoint" json:"control_point,omitempty"`
	Position     *CMsgVector `protobuf:"bytes,2,opt,name=position" json:"position,omitempty"`
}

func (x *CMsgParticleSystemManager_UpdateParticleFallback) Reset() {
	*x = CMsgParticleSystemManager_UpdateParticleFallback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgParticleSystemManager_UpdateParticleFallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgParticleSystemManager_UpdateParticleFallback) ProtoMessage() {}

func (x *CMsgParticleSystemManager_UpdateParticleFallback) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgParticleSystemManager_UpdateParticleFallback.ProtoReflect.Descriptor instead.
func (*CMsgParticleSystemManager_UpdateParticleFallback) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{3, 7}
}

func (x *CMsgParticleSystemManager_UpdateParticleFallback) GetControlPoint() int32 {
	if x != nil && x.ControlPoint != nil {
		return *x.ControlPoint
	}
	return 0
}

func (x *CMsgParticleSystemManager_UpdateParticleFallback) GetPosition() *CMsgVector {
	if x != nil {
		return x.Position
	}
	return nil
}

type CMsgParticleSystemManager_UpdateParticleEnt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPoint     *int32      `protobuf:"varint,1,opt,name=control_point,json=controlPoint" json:"control_point,omitempty"`
	EntityHandle     *uint32     `protobuf:"varint,2,opt,name=entity_handle,json=entityHandle" json:"entity_handle,omitempty"`
	AttachType       *int32      `protobuf:"varint,3,opt,name=attach_type,json=attachType" json:"attach_type,omitempty"`
	Attachment       *int32      `protobuf:"varint,4,opt,name=attachment" json:"attachment,omitempty"`
	FallbackPosition *CMsgVector `protobuf:"bytes,5,opt,name=fallback_position,json=fallbackPosition" json:"fallback_position,omitempty"`
}

func (x *CMsgParticleSystemManager_UpdateParticleEnt) Reset() {
	*x = CMsgParticleSystemManager_UpdateParticleEnt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgParticleSystemManager_UpdateParticleEnt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgParticleSystemManager_UpdateParticleEnt) ProtoMessage() {}

func (x *CMsgParticleSystemManager_UpdateParticleEnt) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgParticleSystemManager_UpdateParticleEnt.ProtoReflect.Descriptor instead.
func (*CMsgParticleSystemManager_UpdateParticleEnt) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{3, 8}
}

func (x *CMsgParticleSystemManager_UpdateParticleEnt) GetControlPoint() int32 {
	if x != nil && x.ControlPoint != nil {
		return *x.ControlPoint
	}
	return 0
}

func (x *CMsgParticleSystemManager_UpdateParticleEnt) GetEntityHandle() uint32 {
	if x != nil && x.EntityHandle != nil {
		return *x.EntityHandle
	}
	return 0
}

func (x *CMsgParticleSystemManager_UpdateParticleEnt) GetAttachType() int32 {
	if x != nil && x.AttachType != nil {
		return *x.AttachType
	}
	return 0
}

func (x *CMsgParticleSystemManager_UpdateParticleEnt) GetAttachment() int32 {
	if x != nil && x.Attachment != nil {
		return *x.Attachment
	}
	return 0
}

func (x *CMsgParticleSystemManager_UpdateParticleEnt) GetFallbackPosition() *CMsgVector {
	if x != nil {
		return x.FallbackPosition
	}
	return nil
}

type CMsgParticleSystemManager_UpdateParticleOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPoint *int32      `protobuf:"varint,1,opt,name=control_point,json=controlPoint" json:"control_point,omitempty"`
	OriginOffset *CMsgVector `protobuf:"bytes,2,opt,name=origin_offset,json=originOffset" json:"origin_offset,omitempty"`
}

func (x *CMsgParticleSystemManager_UpdateParticleOffset) Reset() {
	*x = CMsgParticleSystemManager_UpdateParticleOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgParticleSystemManager_UpdateParticleOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgParticleSystemManager_UpdateParticleOffset) ProtoMessage() {}

func (x *CMsgParticleSystemManager_UpdateParticleOffset) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgParticleSystemManager_UpdateParticleOffset.ProtoReflect.Descriptor instead.
func (*CMsgParticleSystemManager_UpdateParticleOffset) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{3, 9}
}

func (x *CMsgParticleSystemManager_UpdateParticleOffset) GetControlPoint() int32 {
	if x != nil && x.ControlPoint != nil {
		return *x.ControlPoint
	}
	return 0
}

func (x *CMsgParticleSystemManager_UpdateParticleOffset) GetOriginOffset() *CMsgVector {
	if x != nil {
		return x.OriginOffset
	}
	return nil
}

type CMsgParticleSystemManager_UpdateParticleFrozen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetFrozen *bool `protobuf:"varint,1,opt,name=set_frozen,json=setFrozen" json:"set_frozen,omitempty"`
}

func (x *CMsgParticleSystemManager_UpdateParticleFrozen) Reset() {
	*x = CMsgParticleSystemManager_UpdateParticleFrozen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgParticleSystemManager_UpdateParticleFrozen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgParticleSystemManager_UpdateParticleFrozen) ProtoMessage() {}

func (x *CMsgParticleSystemManager_UpdateParticleFrozen) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgParticleSystemManager_UpdateParticleFrozen.ProtoReflect.Descriptor instead.
func (*CMsgParticleSystemManager_UpdateParticleFrozen) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{3, 10}
}

func (x *CMsgParticleSystemManager_UpdateParticleFrozen) GetSetFrozen() bool {
	if x != nil && x.SetFrozen != nil {
		return *x.SetFrozen
	}
	return false
}

type CMsgParticleSystemManager_UpdateParticleShouldDraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShouldDraw *bool `protobuf:"varint,1,opt,name=should_draw,json=shouldDraw" json:"should_draw,omitempty"`
}

func (x *CMsgParticleSystemManager_UpdateParticleShouldDraw) Reset() {
	*x = CMsgParticleSystemManager_UpdateParticleShouldDraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gameevents_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgParticleSystemManager_UpdateParticleShouldDraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgParticleSystemManager_UpdateParticleShouldDraw) ProtoMessage() {}

func (x *CMsgParticleSystemManager_UpdateParticleShouldDraw) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gameevents_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgParticleSystemManager_UpdateParticleShouldDraw.ProtoReflect.Descriptor instead.
func (*CMsgParticleSystemManager_UpdateParticleShouldDraw) Descriptor() ([]byte, []int) {
	return file_citadel_gameevents_proto_rawDescGZIP(), []int{3, 11}
}

func (x *CMsgParticleSystemManager_UpdateParticleShouldDraw) GetShouldDraw() bool {
	if x != nil && x.ShouldDraw != nil {
		return *x.ShouldDraw
	}
	return false
}

var File_citadel_gameevents_proto protoreflect.FileDescriptor

var file_citadel_gameevents_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x6f, 0x74, 0x61,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x06, 0x0a, 0x0f, 0x43,
	0x4d, 0x73, 0x67, 0x46, 0x69, 0x72, 0x65, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x28,
	0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x51, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x06, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x65,
	0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x73, 0x68, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x65, 0x6e, 0x65, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x70, 0x65, 0x6e, 0x65, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x72, 0x65,
	0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x67,
	0x75, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x65, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x47, 0x75, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x55, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x72, 0x65, 0x42, 0x75, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x46,
	0x69, 0x72, 0x65, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x39, 0x0a,
	0x0f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x51, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x0e, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x6f,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x69, 0x0a, 0x10, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x62,
	0x75, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x22, 0xca, 0x03, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x75, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x0d,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x0e, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x73,
	0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x75, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x27, 0x0a, 0x0f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x74, 0x62,
	0x6f, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x65, 0x64, 0x48, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x65,
	0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x57, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x6e, 0x69, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb4, 0x15, 0x0a, 0x19, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x57, 0x0a, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x12, 0x5a, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x0f, 0x64,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x76,
	0x0a, 0x1a, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x18, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x76,
	0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x6a, 0x0a, 0x16, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x14, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x57, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x0e, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x66,
	0x77, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x77, 0x64, 0x52, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x77, 0x64, 0x12, 0x6a,
	0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x70, 0x0a, 0x18, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x66, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x6a, 0x0a, 0x16,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x61, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x16, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x77, 0x0a, 0x1b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x44, 0x72, 0x61, 0x77, 0x52, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x44, 0x72, 0x61, 0x77,
	0x1a, 0xde, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x51, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65,
	0x73, 0x1a, 0x42, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f,
	0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x6c, 0x79, 0x1a, 0x70, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e,
	0x67, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x69, 0x6d, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a,
	0x63, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x64, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x77, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x1a, 0xaf, 0x01, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x20, 0x0a, 0x02, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x75, 0x70, 0x1a, 0x6b, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xdd, 0x01, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x11, 0x66, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x72, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x35, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x74, 0x46, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x1a, 0x3b, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x44, 0x72, 0x61, 0x77,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x44, 0x72, 0x61,
	0x77, 0x22, 0x93, 0x02, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x78, 0x5f,
	0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x78, 0x50, 0x6f, 0x73, 0x12,
	0x13, 0x0a, 0x05, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x79, 0x50, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0c, 0x0a, 0x01,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f,
	0x6c, 0x64, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62,
	0x6f, 0x6c, 0x64, 0x46, 0x6f, 0x6e, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x22, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x64, 0x70, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x61,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x61, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x61, 0x74, 0x5f, 0x74, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x73,
	0x61, 0x74, 0x54, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x61, 0x74, 0x5f,
	0x74, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x64, 0x65, 0x73, 0x61,
	0x74, 0x54, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x6f, 0x75,
	0x74, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xf3, 0x02, 0x0a, 0x17, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x66, 0x61, 0x6c, 0x6c, 0x6f, 0x66, 0x66, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x66, 0x61, 0x6c, 0x6c, 0x6f, 0x66, 0x66, 0x44,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x65, 0x74, 0x61,
	0x5f, 0x64, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x68, 0x65, 0x74,
	0x61, 0x44, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x68, 0x69, 0x5f, 0x64, 0x6f, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x68, 0x69, 0x44, 0x6f, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64,
	0x22, 0x37, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x61,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2a, 0xaa, 0x02, 0x0a, 0x12, 0x45, 0x43, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x13,
	0x0a, 0x0e, 0x47, 0x45, 0x5f, 0x46, 0x69, 0x72, 0x65, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x10, 0xc2, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x47, 0x45, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x41, 0x6e, 0x69, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0xc3, 0x03, 0x12, 0x1d, 0x0a, 0x18,
	0x47, 0x45, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x10, 0xca, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x47,
	0x45, 0x5f, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x50, 0x72, 0x65, 0x74,
	0x74, 0x79, 0x10, 0xcb, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x47, 0x45, 0x5f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x72, 0x10, 0xcc, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x47, 0x45, 0x5f, 0x42, 0x75, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x10, 0xcd, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x47, 0x45,
	0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0xce, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x47, 0x45, 0x5f,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x10, 0xcf, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x47, 0x45, 0x5f, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x10, 0xd0, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x47, 0x45, 0x5f, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x10, 0xd1, 0x03, 0x2a, 0xe1, 0x04, 0x0a, 0x1f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c,
	0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x10, 0x01, 0x12, 0x33, 0x0a,
	0x2f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44,
	0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x4c, 0x56, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x03, 0x12, 0x28, 0x0a,
	0x24, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x43, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x05, 0x12, 0x34, 0x0a, 0x30, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12,
	0x31, 0x0a, 0x2d, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b,
	0x10, 0x07, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x10, 0x08,
	0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10,
	0x09, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e,
	0x10, 0x0a, 0x12, 0x34, 0x0a, 0x30, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x55, 0x4c,
	0x44, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x10, 0x0b, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x62, 0x75, 0x66, 0x66, 0x2f,
	0x6d, 0x61, 0x6e, 0x74, 0x61, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x3b, 0x64, 0x6f, 0x74, 0x61,
}

var (
	file_citadel_gameevents_proto_rawDescOnce sync.Once
	file_citadel_gameevents_proto_rawDescData = file_citadel_gameevents_proto_rawDesc
)

func file_citadel_gameevents_proto_rawDescGZIP() []byte {
	file_citadel_gameevents_proto_rawDescOnce.Do(func() {
		file_citadel_gameevents_proto_rawDescData = protoimpl.X.CompressGZIP(file_citadel_gameevents_proto_rawDescData)
	})
	return file_citadel_gameevents_proto_rawDescData
}

var file_citadel_gameevents_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_citadel_gameevents_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_citadel_gameevents_proto_goTypes = []any{
	(ECitadelGameEvents)(0),                                    // 0: dota.ECitadelGameEvents
	(PARTICLE_SYSTEM_MANAGER_MESSAGE)(0),                       // 1: dota.PARTICLE_SYSTEM_MANAGER_MESSAGE
	(*CMsgFireBullets)(nil),                                    // 2: dota.CMsgFireBullets
	(*CMsgBulletImpact)(nil),                                   // 3: dota.CMsgBulletImpact
	(*CMsgPlayerAnimEvent)(nil),                                // 4: dota.CMsgPlayerAnimEvent
	(*CMsgParticleSystemManager)(nil),                          // 5: dota.CMsgParticleSystemManager
	(*CMsgScreenTextPretty)(nil),                               // 6: dota.CMsgScreenTextPretty
	(*CMsgServerRequestedTracer)(nil),                          // 7: dota.CMsgServerRequestedTracer
	(*CMsgEnableSatVolumesEvent)(nil),                          // 8: dota.CMsgEnableSatVolumesEvent
	(*CMsgPlaceSatVolumeEvent)(nil),                            // 9: dota.CMsgPlaceSatVolumeEvent
	(*CMsgRemoveSatVolumeEvent)(nil),                           // 10: dota.CMsgRemoveSatVolumeEvent
	(*CMsgDisableSatVolumesEvent)(nil),                         // 11: dota.CMsgDisableSatVolumesEvent
	(*CMsgFireBullets_TracerAssignment)(nil),                   // 12: dota.CMsgFireBullets.TracerAssignment
	(*CMsgParticleSystemManager_CreateParticle)(nil),           // 13: dota.CMsgParticleSystemManager.CreateParticle
	(*CMsgParticleSystemManager_DestroyParticle)(nil),          // 14: dota.CMsgParticleSystemManager.DestroyParticle
	(*CMsgParticleSystemManager_DestroyParticleInvolving)(nil), // 15: dota.CMsgParticleSystemManager.DestroyParticleInvolving
	(*CMsgParticleSystemManager_ReleaseParticleIndex)(nil),     // 16: dota.CMsgParticleSystemManager.ReleaseParticleIndex
	(*CMsgParticleSystemManager_UpdateParticle)(nil),           // 17: dota.CMsgParticleSystemManager.UpdateParticle
	(*CMsgParticleSystemManager_UpdateParticleFwd)(nil),        // 18: dota.CMsgParticleSystemManager.UpdateParticleFwd
	(*CMsgParticleSystemManager_UpdateParticleOrient)(nil),     // 19: dota.CMsgParticleSystemManager.UpdateParticleOrient
	(*CMsgParticleSystemManager_UpdateParticleFallback)(nil),   // 20: dota.CMsgParticleSystemManager.UpdateParticleFallback
	(*CMsgParticleSystemManager_UpdateParticleEnt)(nil),        // 21: dota.CMsgParticleSystemManager.UpdateParticleEnt
	(*CMsgParticleSystemManager_UpdateParticleOffset)(nil),     // 22: dota.CMsgParticleSystemManager.UpdateParticleOffset
	(*CMsgParticleSystemManager_UpdateParticleFrozen)(nil),     // 23: dota.CMsgParticleSystemManager.UpdateParticleFrozen
	(*CMsgParticleSystemManager_UpdateParticleShouldDraw)(nil), // 24: dota.CMsgParticleSystemManager.UpdateParticleShouldDraw
	(*CMsgVector)(nil),                                         // 25: dota.CMsgVector
	(*CMsgQAngle)(nil),                                         // 26: dota.CMsgQAngle
}
var file_citadel_gameevents_proto_depIdxs = []int32{
	25, // 0: dota.CMsgFireBullets.origin:type_name -> dota.CMsgVector
	26, // 1: dota.CMsgFireBullets.angles:type_name -> dota.CMsgQAngle
	12, // 2: dota.CMsgFireBullets.tracer_replacement:type_name -> dota.CMsgFireBullets.TracerAssignment
	12, // 3: dota.CMsgFireBullets.tracer_additional:type_name -> dota.CMsgFireBullets.TracerAssignment
	26, // 4: dota.CMsgFireBullets.angles_original:type_name -> dota.CMsgQAngle
	25, // 5: dota.CMsgBulletImpact.trace_start:type_name -> dota.CMsgVector
	25, // 6: dota.CMsgBulletImpact.impact_origin:type_name -> dota.CMsgVector
	25, // 7: dota.CMsgBulletImpact.surface_normal:type_name -> dota.CMsgVector
	1,  // 8: dota.CMsgParticleSystemManager.type:type_name -> dota.PARTICLE_SYSTEM_MANAGER_MESSAGE
	13, // 9: dota.CMsgParticleSystemManager.create_particle:type_name -> dota.CMsgParticleSystemManager.CreateParticle
	14, // 10: dota.CMsgParticleSystemManager.destroy_particle:type_name -> dota.CMsgParticleSystemManager.DestroyParticle
	15, // 11: dota.CMsgParticleSystemManager.destroy_particle_involving:type_name -> dota.CMsgParticleSystemManager.DestroyParticleInvolving
	16, // 12: dota.CMsgParticleSystemManager.release_particle_index:type_name -> dota.CMsgParticleSystemManager.ReleaseParticleIndex
	17, // 13: dota.CMsgParticleSystemManager.update_particle:type_name -> dota.CMsgParticleSystemManager.UpdateParticle
	18, // 14: dota.CMsgParticleSystemManager.update_particle_fwd:type_name -> dota.CMsgParticleSystemManager.UpdateParticleFwd
	19, // 15: dota.CMsgParticleSystemManager.update_particle_orient:type_name -> dota.CMsgParticleSystemManager.UpdateParticleOrient
	20, // 16: dota.CMsgParticleSystemManager.update_particle_fallback:type_name -> dota.CMsgParticleSystemManager.UpdateParticleFallback
	22, // 17: dota.CMsgParticleSystemManager.update_particle_offset:type_name -> dota.CMsgParticleSystemManager.UpdateParticleOffset
	21, // 18: dota.CMsgParticleSystemManager.update_particle_ent:type_name -> dota.CMsgParticleSystemManager.UpdateParticleEnt
	23, // 19: dota.CMsgParticleSystemManager.update_particle_frozen:type_name -> dota.CMsgParticleSystemManager.UpdateParticleFrozen
	24, // 20: dota.CMsgParticleSystemManager.update_particle_should_draw:type_name -> dota.CMsgParticleSystemManager.UpdateParticleShouldDraw
	25, // 21: dota.CMsgServerRequestedTracer.origin:type_name -> dota.CMsgVector
	25, // 22: dota.CMsgServerRequestedTracer.end:type_name -> dota.CMsgVector
	25, // 23: dota.CMsgPlaceSatVolumeEvent.position:type_name -> dota.CMsgVector
	25, // 24: dota.CMsgPlaceSatVolumeEvent.direction:type_name -> dota.CMsgVector
	25, // 25: dota.CMsgParticleSystemManager.CreateParticle.position:type_name -> dota.CMsgVector
	26, // 26: dota.CMsgParticleSystemManager.CreateParticle.angles:type_name -> dota.CMsgQAngle
	25, // 27: dota.CMsgParticleSystemManager.UpdateParticle.position:type_name -> dota.CMsgVector
	25, // 28: dota.CMsgParticleSystemManager.UpdateParticleFwd.forward:type_name -> dota.CMsgVector
	25, // 29: dota.CMsgParticleSystemManager.UpdateParticleOrient.forward:type_name -> dota.CMsgVector
	25, // 30: dota.CMsgParticleSystemManager.UpdateParticleOrient.left:type_name -> dota.CMsgVector
	25, // 31: dota.CMsgParticleSystemManager.UpdateParticleOrient.up:type_name -> dota.CMsgVector
	25, // 32: dota.CMsgParticleSystemManager.UpdateParticleFallback.position:type_name -> dota.CMsgVector
	25, // 33: dota.CMsgParticleSystemManager.UpdateParticleEnt.fallback_position:type_name -> dota.CMsgVector
	25, // 34: dota.CMsgParticleSystemManager.UpdateParticleOffset.origin_offset:type_name -> dota.CMsgVector
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_citadel_gameevents_proto_init() }
func file_citadel_gameevents_proto_init() {
	if File_citadel_gameevents_proto != nil {
		return
	}
	file_networkbasetypes_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_citadel_gameevents_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgFireBullets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgBulletImpact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgPlayerAnimEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgParticleSystemManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgScreenTextPretty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerRequestedTracer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgEnableSatVolumesEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgPlaceSatVolumeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgRemoveSatVolumeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgDisableSatVolumesEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgFireBullets_TracerAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgParticleSystemManager_CreateParticle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgParticleSystemManager_DestroyParticle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgParticleSystemManager_DestroyParticleInvolving); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgParticleSystemManager_ReleaseParticleIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgParticleSystemManager_UpdateParticle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgParticleSystemManager_UpdateParticleFwd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgParticleSystemManager_UpdateParticleOrient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgParticleSystemManager_UpdateParticleFallback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgParticleSystemManager_UpdateParticleEnt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgParticleSystemManager_UpdateParticleOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgParticleSystemManager_UpdateParticleFrozen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gameevents_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgParticleSystemManager_UpdateParticleShouldDraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_citadel_gameevents_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_citadel_gameevents_proto_goTypes,
		DependencyIndexes: file_citadel_gameevents_proto_depIdxs,
		EnumInfos:         file_citadel_gameevents_proto_enumTypes,
		MessageInfos:      file_citadel_gameevents_proto_msgTypes,
	}.Build()
	File_citadel_gameevents_proto = out.File
	file_citadel_gameevents_proto_rawDesc = nil
	file_citadel_gameevents_proto_goTypes = nil
	file_citadel_gameevents_proto_depIdxs = nil
}
