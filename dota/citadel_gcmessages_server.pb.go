// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: citadel_gcmessages_server.proto

package dota

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EGCCitadelServerMessages int32

const (
	EGCCitadelServerMessages_k_EMsgServerToGCMatchSignoutPermission         EGCCitadelServerMessages = 10012
	EGCCitadelServerMessages_k_EMsgServerToGCMatchSignoutPermissionResponse EGCCitadelServerMessages = 10013
	EGCCitadelServerMessages_k_EMsgServerToGCMatchSignout                   EGCCitadelServerMessages = 10014
	EGCCitadelServerMessages_k_EMsgServerToGCMatchSignoutResponse           EGCCitadelServerMessages = 10015
	EGCCitadelServerMessages_k_EMsgGCToServerAddSpectator                   EGCCitadelServerMessages = 10016
	EGCCitadelServerMessages_k_EMsgGCToServerAddSpectatorResponse           EGCCitadelServerMessages = 10017
	EGCCitadelServerMessages_k_EMsgServerToGCIdlePing                       EGCCitadelServerMessages = 10018
	EGCCitadelServerMessages_k_EMsgGCToServerRequestPing                    EGCCitadelServerMessages = 10019
	EGCCitadelServerMessages_k_EMsgGCToServerAllocateForMatch               EGCCitadelServerMessages = 10021
	EGCCitadelServerMessages_k_EMsgGCToServerAllocateForMatchResponse       EGCCitadelServerMessages = 10022
	EGCCitadelServerMessages_k_EMsgServerToGCEnterMatchmaking               EGCCitadelServerMessages = 10023
	EGCCitadelServerMessages_k_EMsgGCToServerCancelAllocateForMatch         EGCCitadelServerMessages = 10024
	EGCCitadelServerMessages_k_EMsgServerToGCUpdateLobbyServerState         EGCCitadelServerMessages = 10025
	EGCCitadelServerMessages_k_EMsgServerToGCAbandonMatch                   EGCCitadelServerMessages = 10026
	EGCCitadelServerMessages_k_EMsgServerToGCAbandonMatchResponse           EGCCitadelServerMessages = 10027
	EGCCitadelServerMessages_k_EMsgServerToGCTestConnection                 EGCCitadelServerMessages = 10028
	EGCCitadelServerMessages_k_EMsgServerToGCTestConnectionResponse         EGCCitadelServerMessages = 10029
	EGCCitadelServerMessages_k_EMsgGCToServerSetServerConVar                EGCCitadelServerMessages = 10039
	EGCCitadelServerMessages_k_EMsgGCToServerSetServerConVarResponse        EGCCitadelServerMessages = 10040
	EGCCitadelServerMessages_k_EMsgServerToGCUpdateMatchInfo                EGCCitadelServerMessages = 10041
)

// Enum value maps for EGCCitadelServerMessages.
var (
	EGCCitadelServerMessages_name = map[int32]string{
		10012: "k_EMsgServerToGCMatchSignoutPermission",
		10013: "k_EMsgServerToGCMatchSignoutPermissionResponse",
		10014: "k_EMsgServerToGCMatchSignout",
		10015: "k_EMsgServerToGCMatchSignoutResponse",
		10016: "k_EMsgGCToServerAddSpectator",
		10017: "k_EMsgGCToServerAddSpectatorResponse",
		10018: "k_EMsgServerToGCIdlePing",
		10019: "k_EMsgGCToServerRequestPing",
		10021: "k_EMsgGCToServerAllocateForMatch",
		10022: "k_EMsgGCToServerAllocateForMatchResponse",
		10023: "k_EMsgServerToGCEnterMatchmaking",
		10024: "k_EMsgGCToServerCancelAllocateForMatch",
		10025: "k_EMsgServerToGCUpdateLobbyServerState",
		10026: "k_EMsgServerToGCAbandonMatch",
		10027: "k_EMsgServerToGCAbandonMatchResponse",
		10028: "k_EMsgServerToGCTestConnection",
		10029: "k_EMsgServerToGCTestConnectionResponse",
		10039: "k_EMsgGCToServerSetServerConVar",
		10040: "k_EMsgGCToServerSetServerConVarResponse",
		10041: "k_EMsgServerToGCUpdateMatchInfo",
	}
	EGCCitadelServerMessages_value = map[string]int32{
		"k_EMsgServerToGCMatchSignoutPermission":         10012,
		"k_EMsgServerToGCMatchSignoutPermissionResponse": 10013,
		"k_EMsgServerToGCMatchSignout":                   10014,
		"k_EMsgServerToGCMatchSignoutResponse":           10015,
		"k_EMsgGCToServerAddSpectator":                   10016,
		"k_EMsgGCToServerAddSpectatorResponse":           10017,
		"k_EMsgServerToGCIdlePing":                       10018,
		"k_EMsgGCToServerRequestPing":                    10019,
		"k_EMsgGCToServerAllocateForMatch":               10021,
		"k_EMsgGCToServerAllocateForMatchResponse":       10022,
		"k_EMsgServerToGCEnterMatchmaking":               10023,
		"k_EMsgGCToServerCancelAllocateForMatch":         10024,
		"k_EMsgServerToGCUpdateLobbyServerState":         10025,
		"k_EMsgServerToGCAbandonMatch":                   10026,
		"k_EMsgServerToGCAbandonMatchResponse":           10027,
		"k_EMsgServerToGCTestConnection":                 10028,
		"k_EMsgServerToGCTestConnectionResponse":         10029,
		"k_EMsgGCToServerSetServerConVar":                10039,
		"k_EMsgGCToServerSetServerConVarResponse":        10040,
		"k_EMsgServerToGCUpdateMatchInfo":                10041,
	}
)

func (x EGCCitadelServerMessages) Enum() *EGCCitadelServerMessages {
	p := new(EGCCitadelServerMessages)
	*p = x
	return p
}

func (x EGCCitadelServerMessages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCCitadelServerMessages) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_server_proto_enumTypes[0].Descriptor()
}

func (EGCCitadelServerMessages) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_server_proto_enumTypes[0]
}

func (x EGCCitadelServerMessages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCCitadelServerMessages) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCCitadelServerMessages(num)
	return nil
}

// Deprecated: Use EGCCitadelServerMessages.Descriptor instead.
func (EGCCitadelServerMessages) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{0}
}

type EGCServerLobbyData int32

const (
	EGCServerLobbyData_k_EServerLobbyData_PlayerMMR       EGCServerLobbyData = 1
	EGCServerLobbyData_k_EServerLobbyData_PlayerInfo      EGCServerLobbyData = 2
	EGCServerLobbyData_k_EServerLobbyData_PostMatchSurvey EGCServerLobbyData = 3
	EGCServerLobbyData_k_EServerLobbyData_AutoTest        EGCServerLobbyData = 4
)

// Enum value maps for EGCServerLobbyData.
var (
	EGCServerLobbyData_name = map[int32]string{
		1: "k_EServerLobbyData_PlayerMMR",
		2: "k_EServerLobbyData_PlayerInfo",
		3: "k_EServerLobbyData_PostMatchSurvey",
		4: "k_EServerLobbyData_AutoTest",
	}
	EGCServerLobbyData_value = map[string]int32{
		"k_EServerLobbyData_PlayerMMR":       1,
		"k_EServerLobbyData_PlayerInfo":      2,
		"k_EServerLobbyData_PostMatchSurvey": 3,
		"k_EServerLobbyData_AutoTest":        4,
	}
)

func (x EGCServerLobbyData) Enum() *EGCServerLobbyData {
	p := new(EGCServerLobbyData)
	*p = x
	return p
}

func (x EGCServerLobbyData) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCServerLobbyData) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_server_proto_enumTypes[1].Descriptor()
}

func (EGCServerLobbyData) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_server_proto_enumTypes[1]
}

func (x EGCServerLobbyData) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCServerLobbyData) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCServerLobbyData(num)
	return nil
}

// Deprecated: Use EGCServerLobbyData.Descriptor instead.
func (EGCServerLobbyData) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{1}
}

type EGCServerSignoutData int32

const (
	EGCServerSignoutData_k_EServerSignoutData_Disconnections     EGCServerSignoutData = 2
	EGCServerSignoutData_k_EServerSignoutData_AccountStatChanges EGCServerSignoutData = 3
	EGCServerSignoutData_k_EServerSignoutData_DetailedStats      EGCServerSignoutData = 4
	EGCServerSignoutData_k_EServerSignoutData_ServerPerfStats    EGCServerSignoutData = 5
	EGCServerSignoutData_k_EServerSignoutData_PerfData           EGCServerSignoutData = 6
	EGCServerSignoutData_k_EServerSignoutData_PlayerChat         EGCServerSignoutData = 7
	EGCServerSignoutData_k_EServerSignoutData_BookRewards        EGCServerSignoutData = 8
	EGCServerSignoutData_k_EServerSignoutData_PenalizedPlayers   EGCServerSignoutData = 9
)

// Enum value maps for EGCServerSignoutData.
var (
	EGCServerSignoutData_name = map[int32]string{
		2: "k_EServerSignoutData_Disconnections",
		3: "k_EServerSignoutData_AccountStatChanges",
		4: "k_EServerSignoutData_DetailedStats",
		5: "k_EServerSignoutData_ServerPerfStats",
		6: "k_EServerSignoutData_PerfData",
		7: "k_EServerSignoutData_PlayerChat",
		8: "k_EServerSignoutData_BookRewards",
		9: "k_EServerSignoutData_PenalizedPlayers",
	}
	EGCServerSignoutData_value = map[string]int32{
		"k_EServerSignoutData_Disconnections":     2,
		"k_EServerSignoutData_AccountStatChanges": 3,
		"k_EServerSignoutData_DetailedStats":      4,
		"k_EServerSignoutData_ServerPerfStats":    5,
		"k_EServerSignoutData_PerfData":           6,
		"k_EServerSignoutData_PlayerChat":         7,
		"k_EServerSignoutData_BookRewards":        8,
		"k_EServerSignoutData_PenalizedPlayers":   9,
	}
)

func (x EGCServerSignoutData) Enum() *EGCServerSignoutData {
	p := new(EGCServerSignoutData)
	*p = x
	return p
}

func (x EGCServerSignoutData) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCServerSignoutData) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_server_proto_enumTypes[2].Descriptor()
}

func (EGCServerSignoutData) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_server_proto_enumTypes[2]
}

func (x EGCServerSignoutData) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCServerSignoutData) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCServerSignoutData(num)
	return nil
}

// Deprecated: Use EGCServerSignoutData.Descriptor instead.
func (EGCServerSignoutData) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{2}
}

type CSOCitadelServerStaticLobby_EAwardIDs int32

const (
	CSOCitadelServerStaticLobby_k_eAward_KingPanda CSOCitadelServerStaticLobby_EAwardIDs = 1
)

// Enum value maps for CSOCitadelServerStaticLobby_EAwardIDs.
var (
	CSOCitadelServerStaticLobby_EAwardIDs_name = map[int32]string{
		1: "k_eAward_KingPanda",
	}
	CSOCitadelServerStaticLobby_EAwardIDs_value = map[string]int32{
		"k_eAward_KingPanda": 1,
	}
)

func (x CSOCitadelServerStaticLobby_EAwardIDs) Enum() *CSOCitadelServerStaticLobby_EAwardIDs {
	p := new(CSOCitadelServerStaticLobby_EAwardIDs)
	*p = x
	return p
}

func (x CSOCitadelServerStaticLobby_EAwardIDs) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSOCitadelServerStaticLobby_EAwardIDs) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_server_proto_enumTypes[3].Descriptor()
}

func (CSOCitadelServerStaticLobby_EAwardIDs) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_server_proto_enumTypes[3]
}

func (x CSOCitadelServerStaticLobby_EAwardIDs) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSOCitadelServerStaticLobby_EAwardIDs) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSOCitadelServerStaticLobby_EAwardIDs(num)
	return nil
}

// Deprecated: Use CSOCitadelServerStaticLobby_EAwardIDs.Descriptor instead.
func (CSOCitadelServerStaticLobby_EAwardIDs) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{6, 0}
}

type CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason int32

const (
	CMsgServerSignoutData_PenalizedPlayers_k_EPenaltyReason_Abandon             CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason = 0
	CMsgServerSignoutData_PenalizedPlayers_k_EPenaltyReason_DisconnectedTooLong CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason = 1
)

// Enum value maps for CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason.
var (
	CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason_name = map[int32]string{
		0: "k_EPenaltyReason_Abandon",
		1: "k_EPenaltyReason_DisconnectedTooLong",
	}
	CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason_value = map[string]int32{
		"k_EPenaltyReason_Abandon":             0,
		"k_EPenaltyReason_DisconnectedTooLong": 1,
	}
)

func (x CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason) Enum() *CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason {
	p := new(CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason)
	*p = x
	return p
}

func (x CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_server_proto_enumTypes[4].Descriptor()
}

func (CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_server_proto_enumTypes[4]
}

func (x CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason(num)
	return nil
}

// Deprecated: Use CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason.Descriptor instead.
func (CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{17, 0}
}

type CMsgMatchData_EEndReason int32

const (
	CMsgMatchData_k_EEndReason_TeamWin              CMsgMatchData_EEndReason = 0
	CMsgMatchData_k_EEndReason_AllAbandoned         CMsgMatchData_EEndReason = 2
	CMsgMatchData_k_EEndReason_NetworkIssues        CMsgMatchData_EEndReason = 3
	CMsgMatchData_k_EEndReason_MatchLength          CMsgMatchData_EEndReason = 4
	CMsgMatchData_k_EEndReason_PlayerNeverConnected CMsgMatchData_EEndReason = 5
)

// Enum value maps for CMsgMatchData_EEndReason.
var (
	CMsgMatchData_EEndReason_name = map[int32]string{
		0: "k_EEndReason_TeamWin",
		2: "k_EEndReason_AllAbandoned",
		3: "k_EEndReason_NetworkIssues",
		4: "k_EEndReason_MatchLength",
		5: "k_EEndReason_PlayerNeverConnected",
	}
	CMsgMatchData_EEndReason_value = map[string]int32{
		"k_EEndReason_TeamWin":              0,
		"k_EEndReason_AllAbandoned":         2,
		"k_EEndReason_NetworkIssues":        3,
		"k_EEndReason_MatchLength":          4,
		"k_EEndReason_PlayerNeverConnected": 5,
	}
)

func (x CMsgMatchData_EEndReason) Enum() *CMsgMatchData_EEndReason {
	p := new(CMsgMatchData_EEndReason)
	*p = x
	return p
}

func (x CMsgMatchData_EEndReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgMatchData_EEndReason) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_server_proto_enumTypes[5].Descriptor()
}

func (CMsgMatchData_EEndReason) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_server_proto_enumTypes[5]
}

func (x CMsgMatchData_EEndReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgMatchData_EEndReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgMatchData_EEndReason(num)
	return nil
}

// Deprecated: Use CMsgMatchData_EEndReason.Descriptor instead.
func (CMsgMatchData_EEndReason) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{18, 0}
}

type CMsgServerToGCMatchSignoutResponse_ESignoutResult int32

const (
	CMsgServerToGCMatchSignoutResponse_k_ESignout_Failed_Retry             CMsgServerToGCMatchSignoutResponse_ESignoutResult = 1
	CMsgServerToGCMatchSignoutResponse_k_ESignout_Failed_NoRetry           CMsgServerToGCMatchSignoutResponse_ESignoutResult = 2
	CMsgServerToGCMatchSignoutResponse_k_ESignout_Failed_InFlight          CMsgServerToGCMatchSignoutResponse_ESignoutResult = 3
	CMsgServerToGCMatchSignoutResponse_k_ESignout_Success                  CMsgServerToGCMatchSignoutResponse_ESignoutResult = 4
	CMsgServerToGCMatchSignoutResponse_k_ESignout_Success_AlreadySignedOut CMsgServerToGCMatchSignoutResponse_ESignoutResult = 5
)

// Enum value maps for CMsgServerToGCMatchSignoutResponse_ESignoutResult.
var (
	CMsgServerToGCMatchSignoutResponse_ESignoutResult_name = map[int32]string{
		1: "k_ESignout_Failed_Retry",
		2: "k_ESignout_Failed_NoRetry",
		3: "k_ESignout_Failed_InFlight",
		4: "k_ESignout_Success",
		5: "k_ESignout_Success_AlreadySignedOut",
	}
	CMsgServerToGCMatchSignoutResponse_ESignoutResult_value = map[string]int32{
		"k_ESignout_Failed_Retry":             1,
		"k_ESignout_Failed_NoRetry":           2,
		"k_ESignout_Failed_InFlight":          3,
		"k_ESignout_Success":                  4,
		"k_ESignout_Success_AlreadySignedOut": 5,
	}
)

func (x CMsgServerToGCMatchSignoutResponse_ESignoutResult) Enum() *CMsgServerToGCMatchSignoutResponse_ESignoutResult {
	p := new(CMsgServerToGCMatchSignoutResponse_ESignoutResult)
	*p = x
	return p
}

func (x CMsgServerToGCMatchSignoutResponse_ESignoutResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgServerToGCMatchSignoutResponse_ESignoutResult) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_server_proto_enumTypes[6].Descriptor()
}

func (CMsgServerToGCMatchSignoutResponse_ESignoutResult) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_server_proto_enumTypes[6]
}

func (x CMsgServerToGCMatchSignoutResponse_ESignoutResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgServerToGCMatchSignoutResponse_ESignoutResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgServerToGCMatchSignoutResponse_ESignoutResult(num)
	return nil
}

// Deprecated: Use CMsgServerToGCMatchSignoutResponse_ESignoutResult.Descriptor instead.
func (CMsgServerToGCMatchSignoutResponse_ESignoutResult) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{20, 0}
}

type CMsgServerToGCAbandonMatch_EReason int32

const (
	CMsgServerToGCAbandonMatch_eReason_ServerCrash            CMsgServerToGCAbandonMatch_EReason = 1
	CMsgServerToGCAbandonMatch_eReason_ClientsFailedToConnect CMsgServerToGCAbandonMatch_EReason = 2
)

// Enum value maps for CMsgServerToGCAbandonMatch_EReason.
var (
	CMsgServerToGCAbandonMatch_EReason_name = map[int32]string{
		1: "eReason_ServerCrash",
		2: "eReason_ClientsFailedToConnect",
	}
	CMsgServerToGCAbandonMatch_EReason_value = map[string]int32{
		"eReason_ServerCrash":            1,
		"eReason_ClientsFailedToConnect": 2,
	}
)

func (x CMsgServerToGCAbandonMatch_EReason) Enum() *CMsgServerToGCAbandonMatch_EReason {
	p := new(CMsgServerToGCAbandonMatch_EReason)
	*p = x
	return p
}

func (x CMsgServerToGCAbandonMatch_EReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgServerToGCAbandonMatch_EReason) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_server_proto_enumTypes[7].Descriptor()
}

func (CMsgServerToGCAbandonMatch_EReason) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_server_proto_enumTypes[7]
}

func (x CMsgServerToGCAbandonMatch_EReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgServerToGCAbandonMatch_EReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgServerToGCAbandonMatch_EReason(num)
	return nil
}

// Deprecated: Use CMsgServerToGCAbandonMatch_EReason.Descriptor instead.
func (CMsgServerToGCAbandonMatch_EReason) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{29, 0}
}

type CMsgGCToServerAddSpectatorResponse_EResponse int32

const (
	CMsgGCToServerAddSpectatorResponse_k_eInternalError CMsgGCToServerAddSpectatorResponse_EResponse = 0
	CMsgGCToServerAddSpectatorResponse_k_eSuccess       CMsgGCToServerAddSpectatorResponse_EResponse = 1
	CMsgGCToServerAddSpectatorResponse_k_eServerFull    CMsgGCToServerAddSpectatorResponse_EResponse = 2
)

// Enum value maps for CMsgGCToServerAddSpectatorResponse_EResponse.
var (
	CMsgGCToServerAddSpectatorResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eServerFull",
	}
	CMsgGCToServerAddSpectatorResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eServerFull":    2,
	}
)

func (x CMsgGCToServerAddSpectatorResponse_EResponse) Enum() *CMsgGCToServerAddSpectatorResponse_EResponse {
	p := new(CMsgGCToServerAddSpectatorResponse_EResponse)
	*p = x
	return p
}

func (x CMsgGCToServerAddSpectatorResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToServerAddSpectatorResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_server_proto_enumTypes[8].Descriptor()
}

func (CMsgGCToServerAddSpectatorResponse_EResponse) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_server_proto_enumTypes[8]
}

func (x CMsgGCToServerAddSpectatorResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToServerAddSpectatorResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToServerAddSpectatorResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgGCToServerAddSpectatorResponse_EResponse.Descriptor instead.
func (CMsgGCToServerAddSpectatorResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{36, 0}
}

type CMsgServerCrashSentinelFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version             *uint32                               `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ServerSteamId       *uint64                               `protobuf:"fixed64,2,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	ServerPublicIpAddr  *uint32                               `protobuf:"fixed32,3,opt,name=server_public_ip_addr,json=serverPublicIpAddr" json:"server_public_ip_addr,omitempty"`
	ServerPort          *uint32                               `protobuf:"varint,4,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	ServerCluster       *uint32                               `protobuf:"varint,5,opt,name=server_cluster,json=serverCluster" json:"server_cluster,omitempty"`
	Pid                 *uint32                               `protobuf:"varint,6,opt,name=pid" json:"pid,omitempty"`
	SavedTime           *uint32                               `protobuf:"varint,7,opt,name=saved_time,json=savedTime" json:"saved_time,omitempty"`
	ServerVersion       *uint32                               `protobuf:"varint,8,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	GameInfo            *CMsgServerCrashSentinelFile_GameInfo `protobuf:"bytes,9,opt,name=game_info,json=gameInfo" json:"game_info,omitempty"`
	ServerPrivateIpAddr *uint32                               `protobuf:"varint,10,opt,name=server_private_ip_addr,json=serverPrivateIpAddr" json:"server_private_ip_addr,omitempty"`
	InstanceId          *uint32                               `protobuf:"varint,11,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
}

func (x *CMsgServerCrashSentinelFile) Reset() {
	*x = CMsgServerCrashSentinelFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerCrashSentinelFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerCrashSentinelFile) ProtoMessage() {}

func (x *CMsgServerCrashSentinelFile) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerCrashSentinelFile.ProtoReflect.Descriptor instead.
func (*CMsgServerCrashSentinelFile) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgServerCrashSentinelFile) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetServerPublicIpAddr() uint32 {
	if x != nil && x.ServerPublicIpAddr != nil {
		return *x.ServerPublicIpAddr
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetServerCluster() uint32 {
	if x != nil && x.ServerCluster != nil {
		return *x.ServerCluster
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetSavedTime() uint32 {
	if x != nil && x.SavedTime != nil {
		return *x.SavedTime
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetGameInfo() *CMsgServerCrashSentinelFile_GameInfo {
	if x != nil {
		return x.GameInfo
	}
	return nil
}

func (x *CMsgServerCrashSentinelFile) GetServerPrivateIpAddr() uint32 {
	if x != nil && x.ServerPrivateIpAddr != nil {
		return *x.ServerPrivateIpAddr
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetInstanceId() uint32 {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return 0
}

type CServerLobbyData_PlayerMMR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*CServerLobbyData_PlayerMMR_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
}

func (x *CServerLobbyData_PlayerMMR) Reset() {
	*x = CServerLobbyData_PlayerMMR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_PlayerMMR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_PlayerMMR) ProtoMessage() {}

func (x *CServerLobbyData_PlayerMMR) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_PlayerMMR.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_PlayerMMR) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{1}
}

func (x *CServerLobbyData_PlayerMMR) GetPlayers() []*CServerLobbyData_PlayerMMR_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type CServerLobbyData_PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    *uint32                 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AccountStats []*CMsgAccountHeroStats `protobuf:"bytes,2,rep,name=account_stats,json=accountStats" json:"account_stats,omitempty"`
	MmrLevel     *uint32                 `protobuf:"varint,4,opt,name=mmr_level,json=mmrLevel" json:"mmr_level,omitempty"`
	BookInfo     []*CMsgAccountBookStats `protobuf:"bytes,5,rep,name=book_info,json=bookInfo" json:"book_info,omitempty"`
}

func (x *CServerLobbyData_PlayerInfo) Reset() {
	*x = CServerLobbyData_PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_PlayerInfo) ProtoMessage() {}

func (x *CServerLobbyData_PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_PlayerInfo.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_PlayerInfo) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{2}
}

func (x *CServerLobbyData_PlayerInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo) GetAccountStats() []*CMsgAccountHeroStats {
	if x != nil {
		return x.AccountStats
	}
	return nil
}

func (x *CServerLobbyData_PlayerInfo) GetMmrLevel() uint32 {
	if x != nil && x.MmrLevel != nil {
		return *x.MmrLevel
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo) GetBookInfo() []*CMsgAccountBookStats {
	if x != nil {
		return x.BookInfo
	}
	return nil
}

type CServerLobbyData_PostMatchSurvey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Surveys []*CServerLobbyData_PostMatchSurvey_PlayerSurvey `protobuf:"bytes,1,rep,name=surveys" json:"surveys,omitempty"`
}

func (x *CServerLobbyData_PostMatchSurvey) Reset() {
	*x = CServerLobbyData_PostMatchSurvey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_PostMatchSurvey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_PostMatchSurvey) ProtoMessage() {}

func (x *CServerLobbyData_PostMatchSurvey) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_PostMatchSurvey.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_PostMatchSurvey) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{3}
}

func (x *CServerLobbyData_PostMatchSurvey) GetSurveys() []*CServerLobbyData_PostMatchSurvey_PlayerSurvey {
	if x != nil {
		return x.Surveys
	}
	return nil
}

type CServerLobbyData_AutoTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxDurationS *uint32 `protobuf:"varint,2,opt,name=max_duration_s,json=maxDurationS" json:"max_duration_s,omitempty"`
}

func (x *CServerLobbyData_AutoTest) Reset() {
	*x = CServerLobbyData_AutoTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_AutoTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_AutoTest) ProtoMessage() {}

func (x *CServerLobbyData_AutoTest) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_AutoTest.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_AutoTest) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{4}
}

func (x *CServerLobbyData_AutoTest) GetMaxDurationS() uint32 {
	if x != nil && x.MaxDurationS != nil {
		return *x.MaxDurationS
	}
	return 0
}

type CSOCitadelServerDynamicLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId         *uint64  `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	LeftAccountIds  []uint32 `protobuf:"varint,2,rep,name=left_account_ids,json=leftAccountIds" json:"left_account_ids,omitempty"`
	BroadcastActive *bool    `protobuf:"varint,3,opt,name=broadcast_active,json=broadcastActive" json:"broadcast_active,omitempty"`
	SpectatorCount  *uint32  `protobuf:"varint,4,opt,name=spectator_count,json=spectatorCount" json:"spectator_count,omitempty"`
}

func (x *CSOCitadelServerDynamicLobby) Reset() {
	*x = CSOCitadelServerDynamicLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOCitadelServerDynamicLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOCitadelServerDynamicLobby) ProtoMessage() {}

func (x *CSOCitadelServerDynamicLobby) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOCitadelServerDynamicLobby.ProtoReflect.Descriptor instead.
func (*CSOCitadelServerDynamicLobby) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{5}
}

func (x *CSOCitadelServerDynamicLobby) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CSOCitadelServerDynamicLobby) GetLeftAccountIds() []uint32 {
	if x != nil {
		return x.LeftAccountIds
	}
	return nil
}

func (x *CSOCitadelServerDynamicLobby) GetBroadcastActive() bool {
	if x != nil && x.BroadcastActive != nil {
		return *x.BroadcastActive
	}
	return false
}

func (x *CSOCitadelServerDynamicLobby) GetSpectatorCount() uint32 {
	if x != nil && x.SpectatorCount != nil {
		return *x.SpectatorCount
	}
	return 0
}

type CSOCitadelServerStaticLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtraMessages             []*CExtraMsgBlock                        `protobuf:"bytes,1,rep,name=extra_messages,json=extraMessages" json:"extra_messages,omitempty"`
	ServerSteamId             *uint64                                  `protobuf:"fixed64,2,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	LobbyId                   *uint64                                  `protobuf:"varint,3,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	ReplaySalt                *uint32                                  `protobuf:"fixed32,4,opt,name=replay_salt,json=replaySalt" json:"replay_salt,omitempty"`
	LevelName                 *string                                  `protobuf:"bytes,5,opt,name=level_name,json=levelName" json:"level_name,omitempty"`
	Members                   []*CSOCitadelServerStaticLobby_Member    `protobuf:"bytes,6,rep,name=members" json:"members,omitempty"`
	DevSettings               *CSOCitadelServerStaticLobby_DevSettings `protobuf:"bytes,7,opt,name=dev_settings,json=devSettings" json:"dev_settings,omitempty"`
	GcProvidedHeroes          *bool                                    `protobuf:"varint,8,opt,name=gc_provided_heroes,json=gcProvidedHeroes" json:"gc_provided_heroes,omitempty"`
	BotDifficulty             *ECitadelBotDifficulty                   `protobuf:"varint,9,opt,name=bot_difficulty,json=botDifficulty,enum=dota.ECitadelBotDifficulty" json:"bot_difficulty,omitempty"`
	MetadataSalt              *uint32                                  `protobuf:"fixed32,10,opt,name=metadata_salt,json=metadataSalt" json:"metadata_salt,omitempty"`
	MatchStartTime            *uint32                                  `protobuf:"varint,11,opt,name=match_start_time,json=matchStartTime" json:"match_start_time,omitempty"`
	ExperimentalGameplayState *uint32                                  `protobuf:"varint,15,opt,name=experimental_gameplay_state,json=experimentalGameplayState" json:"experimental_gameplay_state,omitempty"`
	RegionMode                *ECitadelRegionMode                      `protobuf:"varint,16,opt,name=region_mode,json=regionMode,enum=dota.ECitadelRegionMode" json:"region_mode,omitempty"`
	BroadcastUrl              *string                                  `protobuf:"bytes,17,opt,name=broadcast_url,json=broadcastUrl" json:"broadcast_url,omitempty"`
}

func (x *CSOCitadelServerStaticLobby) Reset() {
	*x = CSOCitadelServerStaticLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOCitadelServerStaticLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOCitadelServerStaticLobby) ProtoMessage() {}

func (x *CSOCitadelServerStaticLobby) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOCitadelServerStaticLobby.ProtoReflect.Descriptor instead.
func (*CSOCitadelServerStaticLobby) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{6}
}

func (x *CSOCitadelServerStaticLobby) GetExtraMessages() []*CExtraMsgBlock {
	if x != nil {
		return x.ExtraMessages
	}
	return nil
}

func (x *CSOCitadelServerStaticLobby) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CSOCitadelServerStaticLobby) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CSOCitadelServerStaticLobby) GetReplaySalt() uint32 {
	if x != nil && x.ReplaySalt != nil {
		return *x.ReplaySalt
	}
	return 0
}

func (x *CSOCitadelServerStaticLobby) GetLevelName() string {
	if x != nil && x.LevelName != nil {
		return *x.LevelName
	}
	return ""
}

func (x *CSOCitadelServerStaticLobby) GetMembers() []*CSOCitadelServerStaticLobby_Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CSOCitadelServerStaticLobby) GetDevSettings() *CSOCitadelServerStaticLobby_DevSettings {
	if x != nil {
		return x.DevSettings
	}
	return nil
}

func (x *CSOCitadelServerStaticLobby) GetGcProvidedHeroes() bool {
	if x != nil && x.GcProvidedHeroes != nil {
		return *x.GcProvidedHeroes
	}
	return false
}

func (x *CSOCitadelServerStaticLobby) GetBotDifficulty() ECitadelBotDifficulty {
	if x != nil && x.BotDifficulty != nil {
		return *x.BotDifficulty
	}
	return ECitadelBotDifficulty_k_ECitadelBotDifficulty_None
}

func (x *CSOCitadelServerStaticLobby) GetMetadataSalt() uint32 {
	if x != nil && x.MetadataSalt != nil {
		return *x.MetadataSalt
	}
	return 0
}

func (x *CSOCitadelServerStaticLobby) GetMatchStartTime() uint32 {
	if x != nil && x.MatchStartTime != nil {
		return *x.MatchStartTime
	}
	return 0
}

func (x *CSOCitadelServerStaticLobby) GetExperimentalGameplayState() uint32 {
	if x != nil && x.ExperimentalGameplayState != nil {
		return *x.ExperimentalGameplayState
	}
	return 0
}

func (x *CSOCitadelServerStaticLobby) GetRegionMode() ECitadelRegionMode {
	if x != nil && x.RegionMode != nil {
		return *x.RegionMode
	}
	return ECitadelRegionMode_k_ECitadelRegionMode_ROW
}

func (x *CSOCitadelServerStaticLobby) GetBroadcastUrl() string {
	if x != nil && x.BroadcastUrl != nil {
		return *x.BroadcastUrl
	}
	return ""
}

type CMsgServerSignoutData_ServerPerfStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeakMemoryBytes        *uint64                                                 `protobuf:"varint,1,opt,name=peak_memory_bytes,json=peakMemoryBytes" json:"peak_memory_bytes,omitempty"`
	EndMemoryBytes         *uint64                                                 `protobuf:"varint,2,opt,name=end_memory_bytes,json=endMemoryBytes" json:"end_memory_bytes,omitempty"`
	FrameTimeMaxMicroS     *uint32                                                 `protobuf:"varint,3,opt,name=frame_time_max_micro_s,json=frameTimeMaxMicroS" json:"frame_time_max_micro_s,omitempty"`
	FrameTime_95MicroS     *uint32                                                 `protobuf:"varint,4,opt,name=frame_time_95_micro_s,json=frameTime95MicroS" json:"frame_time_95_micro_s,omitempty"`
	FrameTimeAvgMicroS     *uint32                                                 `protobuf:"varint,5,opt,name=frame_time_avg_micro_s,json=frameTimeAvgMicroS" json:"frame_time_avg_micro_s,omitempty"`
	FrameIdleTime_95MicroS *uint32                                                 `protobuf:"varint,6,opt,name=frame_idle_time_95_micro_s,json=frameIdleTime95MicroS" json:"frame_idle_time_95_micro_s,omitempty"`
	FrameIdleTimeAvgMicroS *uint32                                                 `protobuf:"varint,7,opt,name=frame_idle_time_avg_micro_s,json=frameIdleTimeAvgMicroS" json:"frame_idle_time_avg_micro_s,omitempty"`
	FrameTime_80MicroS     *uint32                                                 `protobuf:"varint,8,opt,name=frame_time_80_micro_s,json=frameTime80MicroS" json:"frame_time_80_micro_s,omitempty"`
	FrameTime_99MicroS     *uint32                                                 `protobuf:"varint,9,opt,name=frame_time_99_micro_s,json=frameTime99MicroS" json:"frame_time_99_micro_s,omitempty"`
	PerfSamples            *CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples `protobuf:"bytes,10,opt,name=perf_samples,json=perfSamples" json:"perf_samples,omitempty"`
}

func (x *CMsgServerSignoutData_ServerPerfStats) Reset() {
	*x = CMsgServerSignoutData_ServerPerfStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_ServerPerfStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_ServerPerfStats) ProtoMessage() {}

func (x *CMsgServerSignoutData_ServerPerfStats) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_ServerPerfStats.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_ServerPerfStats) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgServerSignoutData_ServerPerfStats) GetPeakMemoryBytes() uint64 {
	if x != nil && x.PeakMemoryBytes != nil {
		return *x.PeakMemoryBytes
	}
	return 0
}

func (x *CMsgServerSignoutData_ServerPerfStats) GetEndMemoryBytes() uint64 {
	if x != nil && x.EndMemoryBytes != nil {
		return *x.EndMemoryBytes
	}
	return 0
}

func (x *CMsgServerSignoutData_ServerPerfStats) GetFrameTimeMaxMicroS() uint32 {
	if x != nil && x.FrameTimeMaxMicroS != nil {
		return *x.FrameTimeMaxMicroS
	}
	return 0
}

func (x *CMsgServerSignoutData_ServerPerfStats) GetFrameTime_95MicroS() uint32 {
	if x != nil && x.FrameTime_95MicroS != nil {
		return *x.FrameTime_95MicroS
	}
	return 0
}

func (x *CMsgServerSignoutData_ServerPerfStats) GetFrameTimeAvgMicroS() uint32 {
	if x != nil && x.FrameTimeAvgMicroS != nil {
		return *x.FrameTimeAvgMicroS
	}
	return 0
}

func (x *CMsgServerSignoutData_ServerPerfStats) GetFrameIdleTime_95MicroS() uint32 {
	if x != nil && x.FrameIdleTime_95MicroS != nil {
		return *x.FrameIdleTime_95MicroS
	}
	return 0
}

func (x *CMsgServerSignoutData_ServerPerfStats) GetFrameIdleTimeAvgMicroS() uint32 {
	if x != nil && x.FrameIdleTimeAvgMicroS != nil {
		return *x.FrameIdleTimeAvgMicroS
	}
	return 0
}

func (x *CMsgServerSignoutData_ServerPerfStats) GetFrameTime_80MicroS() uint32 {
	if x != nil && x.FrameTime_80MicroS != nil {
		return *x.FrameTime_80MicroS
	}
	return 0
}

func (x *CMsgServerSignoutData_ServerPerfStats) GetFrameTime_99MicroS() uint32 {
	if x != nil && x.FrameTime_99MicroS != nil {
		return *x.FrameTime_99MicroS
	}
	return 0
}

func (x *CMsgServerSignoutData_ServerPerfStats) GetPerfSamples() *CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples {
	if x != nil {
		return x.PerfSamples
	}
	return nil
}

type CMsgServerToGCUpdateMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId             *uint64 `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	KillsTeam_0         *uint32 `protobuf:"varint,3,opt,name=kills_team_0,json=killsTeam0" json:"kills_team_0,omitempty"`
	KillsTeam_1         *uint32 `protobuf:"varint,4,opt,name=kills_team_1,json=killsTeam1" json:"kills_team_1,omitempty"`
	NetWorthTeam_0      *uint32 `protobuf:"varint,5,opt,name=net_worth_team_0,json=netWorthTeam0" json:"net_worth_team_0,omitempty"`
	NetWorthTeam_1      *uint32 `protobuf:"varint,6,opt,name=net_worth_team_1,json=netWorthTeam1" json:"net_worth_team_1,omitempty"`
	Spectators          *uint32 `protobuf:"varint,7,opt,name=spectators" json:"spectators,omitempty"`
	OpenSpectatorSlots  *uint32 `protobuf:"varint,8,opt,name=open_spectator_slots,json=openSpectatorSlots" json:"open_spectator_slots,omitempty"`
	ObjectivesMaskTeam0 *uint64 `protobuf:"varint,9,opt,name=objectives_mask_team0,json=objectivesMaskTeam0" json:"objectives_mask_team0,omitempty"`
	ObjectivesMaskTeam1 *uint64 `protobuf:"varint,10,opt,name=objectives_mask_team1,json=objectivesMaskTeam1" json:"objectives_mask_team1,omitempty"`
}

func (x *CMsgServerToGCUpdateMatchInfo) Reset() {
	*x = CMsgServerToGCUpdateMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCUpdateMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCUpdateMatchInfo) ProtoMessage() {}

func (x *CMsgServerToGCUpdateMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCUpdateMatchInfo.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCUpdateMatchInfo) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgServerToGCUpdateMatchInfo) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgServerToGCUpdateMatchInfo) GetKillsTeam_0() uint32 {
	if x != nil && x.KillsTeam_0 != nil {
		return *x.KillsTeam_0
	}
	return 0
}

func (x *CMsgServerToGCUpdateMatchInfo) GetKillsTeam_1() uint32 {
	if x != nil && x.KillsTeam_1 != nil {
		return *x.KillsTeam_1
	}
	return 0
}

func (x *CMsgServerToGCUpdateMatchInfo) GetNetWorthTeam_0() uint32 {
	if x != nil && x.NetWorthTeam_0 != nil {
		return *x.NetWorthTeam_0
	}
	return 0
}

func (x *CMsgServerToGCUpdateMatchInfo) GetNetWorthTeam_1() uint32 {
	if x != nil && x.NetWorthTeam_1 != nil {
		return *x.NetWorthTeam_1
	}
	return 0
}

func (x *CMsgServerToGCUpdateMatchInfo) GetSpectators() uint32 {
	if x != nil && x.Spectators != nil {
		return *x.Spectators
	}
	return 0
}

func (x *CMsgServerToGCUpdateMatchInfo) GetOpenSpectatorSlots() uint32 {
	if x != nil && x.OpenSpectatorSlots != nil {
		return *x.OpenSpectatorSlots
	}
	return 0
}

func (x *CMsgServerToGCUpdateMatchInfo) GetObjectivesMaskTeam0() uint64 {
	if x != nil && x.ObjectivesMaskTeam0 != nil {
		return *x.ObjectivesMaskTeam0
	}
	return 0
}

func (x *CMsgServerToGCUpdateMatchInfo) GetObjectivesMaskTeam1() uint64 {
	if x != nil && x.ObjectivesMaskTeam1 != nil {
		return *x.ObjectivesMaskTeam1
	}
	return 0
}

type CMsgServerToGCMatchSignoutPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignoutStart      *uint32            `protobuf:"varint,1,opt,name=signout_start,json=signoutStart" json:"signout_start,omitempty"`
	PermissionRequest *uint32            `protobuf:"varint,2,opt,name=permission_request,json=permissionRequest" json:"permission_request,omitempty"`
	MatchId           *uint64            `protobuf:"varint,3,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	MatchMode         *ECitadelMatchMode `protobuf:"varint,4,opt,name=match_mode,json=matchMode,enum=dota.ECitadelMatchMode" json:"match_mode,omitempty"`
}

func (x *CMsgServerToGCMatchSignoutPermission) Reset() {
	*x = CMsgServerToGCMatchSignoutPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchSignoutPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchSignoutPermission) ProtoMessage() {}

func (x *CMsgServerToGCMatchSignoutPermission) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchSignoutPermission.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchSignoutPermission) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgServerToGCMatchSignoutPermission) GetSignoutStart() uint32 {
	if x != nil && x.SignoutStart != nil {
		return *x.SignoutStart
	}
	return 0
}

func (x *CMsgServerToGCMatchSignoutPermission) GetPermissionRequest() uint32 {
	if x != nil && x.PermissionRequest != nil {
		return *x.PermissionRequest
	}
	return 0
}

func (x *CMsgServerToGCMatchSignoutPermission) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCMatchSignoutPermission) GetMatchMode() ECitadelMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return ECitadelMatchMode_k_ECitadelMatchMode_Invalid
}

type CMsgServerToGCMatchSignoutPermissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanSignOut    *bool                  `protobuf:"varint,1,opt,name=can_sign_out,json=canSignOut" json:"can_sign_out,omitempty"`
	RetryTimeS    *uint32                `protobuf:"varint,2,opt,name=retry_time_s,json=retryTimeS" json:"retry_time_s,omitempty"`
	RequestedData []EGCServerSignoutData `protobuf:"varint,3,rep,name=requested_data,json=requestedData,enum=dota.EGCServerSignoutData" json:"requested_data,omitempty"`
}

func (x *CMsgServerToGCMatchSignoutPermissionResponse) Reset() {
	*x = CMsgServerToGCMatchSignoutPermissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchSignoutPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchSignoutPermissionResponse) ProtoMessage() {}

func (x *CMsgServerToGCMatchSignoutPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchSignoutPermissionResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchSignoutPermissionResponse) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgServerToGCMatchSignoutPermissionResponse) GetCanSignOut() bool {
	if x != nil && x.CanSignOut != nil {
		return *x.CanSignOut
	}
	return false
}

func (x *CMsgServerToGCMatchSignoutPermissionResponse) GetRetryTimeS() uint32 {
	if x != nil && x.RetryTimeS != nil {
		return *x.RetryTimeS
	}
	return 0
}

func (x *CMsgServerToGCMatchSignoutPermissionResponse) GetRequestedData() []EGCServerSignoutData {
	if x != nil {
		return x.RequestedData
	}
	return nil
}

type CMsgServerSignoutData_Disconnections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disconnections []*CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection `protobuf:"bytes,1,rep,name=disconnections" json:"disconnections,omitempty"`
}

func (x *CMsgServerSignoutData_Disconnections) Reset() {
	*x = CMsgServerSignoutData_Disconnections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_Disconnections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_Disconnections) ProtoMessage() {}

func (x *CMsgServerSignoutData_Disconnections) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_Disconnections.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_Disconnections) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgServerSignoutData_Disconnections) GetDisconnections() []*CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection {
	if x != nil {
		return x.Disconnections
	}
	return nil
}

type CMsgServerSignoutData_DetailedStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerStats []*CMsgServerSignoutData_DetailedStats_Player    `protobuf:"bytes,1,rep,name=player_stats,json=playerStats" json:"player_stats,omitempty"`
	Objectives  []*CMsgServerSignoutData_DetailedStats_Objective `protobuf:"bytes,2,rep,name=objectives" json:"objectives,omitempty"`
	MidBoss     []*CMsgServerSignoutData_DetailedStats_MidBoss   `protobuf:"bytes,3,rep,name=mid_boss,json=midBoss" json:"mid_boss,omitempty"`
}

func (x *CMsgServerSignoutData_DetailedStats) Reset() {
	*x = CMsgServerSignoutData_DetailedStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_DetailedStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_DetailedStats) ProtoMessage() {}

func (x *CMsgServerSignoutData_DetailedStats) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_DetailedStats.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_DetailedStats) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgServerSignoutData_DetailedStats) GetPlayerStats() []*CMsgServerSignoutData_DetailedStats_Player {
	if x != nil {
		return x.PlayerStats
	}
	return nil
}

func (x *CMsgServerSignoutData_DetailedStats) GetObjectives() []*CMsgServerSignoutData_DetailedStats_Objective {
	if x != nil {
		return x.Objectives
	}
	return nil
}

func (x *CMsgServerSignoutData_DetailedStats) GetMidBoss() []*CMsgServerSignoutData_DetailedStats_MidBoss {
	if x != nil {
		return x.MidBoss
	}
	return nil
}

type CMsgServerSignoutData_PerfData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AverageFrameTime                      []float32 `protobuf:"fixed32,1,rep,name=average_frame_time,json=averageFrameTime" json:"average_frame_time,omitempty"`
	MaxFrameTime                          []float32 `protobuf:"fixed32,2,rep,name=max_frame_time,json=maxFrameTime" json:"max_frame_time,omitempty"`
	ServerAverageFrameTime                *float32  `protobuf:"fixed32,3,opt,name=server_average_frame_time,json=serverAverageFrameTime" json:"server_average_frame_time,omitempty"`
	ServerMaxFrameTime                    *float32  `protobuf:"fixed32,4,opt,name=server_max_frame_time,json=serverMaxFrameTime" json:"server_max_frame_time,omitempty"`
	AverageComputeTime                    []float32 `protobuf:"fixed32,5,rep,name=average_compute_time,json=averageComputeTime" json:"average_compute_time,omitempty"`
	MaxComputeTime                        []float32 `protobuf:"fixed32,6,rep,name=max_compute_time,json=maxComputeTime" json:"max_compute_time,omitempty"`
	AverageClientTickTime                 []float32 `protobuf:"fixed32,7,rep,name=average_client_tick_time,json=averageClientTickTime" json:"average_client_tick_time,omitempty"`
	MaxClientTickTime                     []float32 `protobuf:"fixed32,8,rep,name=max_client_tick_time,json=maxClientTickTime" json:"max_client_tick_time,omitempty"`
	AverageClientSimulateTime             []float32 `protobuf:"fixed32,9,rep,name=average_client_simulate_time,json=averageClientSimulateTime" json:"average_client_simulate_time,omitempty"`
	MaxClientSimulateTime                 []float32 `protobuf:"fixed32,10,rep,name=max_client_simulate_time,json=maxClientSimulateTime" json:"max_client_simulate_time,omitempty"`
	AverageOutputTime                     []float32 `protobuf:"fixed32,11,rep,name=average_output_time,json=averageOutputTime" json:"average_output_time,omitempty"`
	MaxOutputTime                         []float32 `protobuf:"fixed32,12,rep,name=max_output_time,json=maxOutputTime" json:"max_output_time,omitempty"`
	AverageWaitForRenderingToCompleteTime []float32 `protobuf:"fixed32,13,rep,name=average_wait_for_rendering_to_complete_time,json=averageWaitForRenderingToCompleteTime" json:"average_wait_for_rendering_to_complete_time,omitempty"`
	MaxWaitForRenderingToCompleteTime     []float32 `protobuf:"fixed32,14,rep,name=max_wait_for_rendering_to_complete_time,json=maxWaitForRenderingToCompleteTime" json:"max_wait_for_rendering_to_complete_time,omitempty"`
	AverageSwapTime                       []float32 `protobuf:"fixed32,15,rep,name=average_swap_time,json=averageSwapTime" json:"average_swap_time,omitempty"`
	MaxSwapTime                           []float32 `protobuf:"fixed32,16,rep,name=max_swap_time,json=maxSwapTime" json:"max_swap_time,omitempty"`
	AverageFrameUpdateTime                []float32 `protobuf:"fixed32,17,rep,name=average_frame_update_time,json=averageFrameUpdateTime" json:"average_frame_update_time,omitempty"`
	MaxFrameUpdateTime                    []float32 `protobuf:"fixed32,18,rep,name=max_frame_update_time,json=maxFrameUpdateTime" json:"max_frame_update_time,omitempty"`
	AverageIdleTime                       []float32 `protobuf:"fixed32,19,rep,name=average_idle_time,json=averageIdleTime" json:"average_idle_time,omitempty"`
	MaxIdleTime                           []float32 `protobuf:"fixed32,20,rep,name=max_idle_time,json=maxIdleTime" json:"max_idle_time,omitempty"`
	AverageInputProcessingTime            []float32 `protobuf:"fixed32,21,rep,name=average_input_processing_time,json=averageInputProcessingTime" json:"average_input_processing_time,omitempty"`
	MaxInputProcessingTime                []float32 `protobuf:"fixed32,22,rep,name=max_input_processing_time,json=maxInputProcessingTime" json:"max_input_processing_time,omitempty"`
}

func (x *CMsgServerSignoutData_PerfData) Reset() {
	*x = CMsgServerSignoutData_PerfData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_PerfData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_PerfData) ProtoMessage() {}

func (x *CMsgServerSignoutData_PerfData) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_PerfData.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_PerfData) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgServerSignoutData_PerfData) GetAverageFrameTime() []float32 {
	if x != nil {
		return x.AverageFrameTime
	}
	return nil
}

func (x *CMsgServerSignoutData_PerfData) GetMaxFrameTime() []float32 {
	if x != nil {
		return x.MaxFrameTime
	}
	return nil
}

func (x *CMsgServerSignoutData_PerfData) GetServerAverageFrameTime() float32 {
	if x != nil && x.ServerAverageFrameTime != nil {
		return *x.ServerAverageFrameTime
	}
	return 0
}

func (x *CMsgServerSignoutData_PerfData) GetServerMaxFrameTime() float32 {
	if x != nil && x.ServerMaxFrameTime != nil {
		return *x.ServerMaxFrameTime
	}
	return 0
}

func (x *CMsgServerSignoutData_PerfData) GetAverageComputeTime() []float32 {
	if x != nil {
		return x.AverageComputeTime
	}
	return nil
}

func (x *CMsgServerSignoutData_PerfData) GetMaxComputeTime() []float32 {
	if x != nil {
		return x.MaxComputeTime
	}
	return nil
}

func (x *CMsgServerSignoutData_PerfData) GetAverageClientTickTime() []float32 {
	if x != nil {
		return x.AverageClientTickTime
	}
	return nil
}

func (x *CMsgServerSignoutData_PerfData) GetMaxClientTickTime() []float32 {
	if x != nil {
		return x.MaxClientTickTime
	}
	return nil
}

func (x *CMsgServerSignoutData_PerfData) GetAverageClientSimulateTime() []float32 {
	if x != nil {
		return x.AverageClientSimulateTime
	}
	return nil
}

func (x *CMsgServerSignoutData_PerfData) GetMaxClientSimulateTime() []float32 {
	if x != nil {
		return x.MaxClientSimulateTime
	}
	return nil
}

func (x *CMsgServerSignoutData_PerfData) GetAverageOutputTime() []float32 {
	if x != nil {
		return x.AverageOutputTime
	}
	return nil
}

func (x *CMsgServerSignoutData_PerfData) GetMaxOutputTime() []float32 {
	if x != nil {
		return x.MaxOutputTime
	}
	return nil
}

func (x *CMsgServerSignoutData_PerfData) GetAverageWaitForRenderingToCompleteTime() []float32 {
	if x != nil {
		return x.AverageWaitForRenderingToCompleteTime
	}
	return nil
}

func (x *CMsgServerSignoutData_PerfData) GetMaxWaitForRenderingToCompleteTime() []float32 {
	if x != nil {
		return x.MaxWaitForRenderingToCompleteTime
	}
	return nil
}

func (x *CMsgServerSignoutData_PerfData) GetAverageSwapTime() []float32 {
	if x != nil {
		return x.AverageSwapTime
	}
	return nil
}

func (x *CMsgServerSignoutData_PerfData) GetMaxSwapTime() []float32 {
	if x != nil {
		return x.MaxSwapTime
	}
	return nil
}

func (x *CMsgServerSignoutData_PerfData) GetAverageFrameUpdateTime() []float32 {
	if x != nil {
		return x.AverageFrameUpdateTime
	}
	return nil
}

func (x *CMsgServerSignoutData_PerfData) GetMaxFrameUpdateTime() []float32 {
	if x != nil {
		return x.MaxFrameUpdateTime
	}
	return nil
}

func (x *CMsgServerSignoutData_PerfData) GetAverageIdleTime() []float32 {
	if x != nil {
		return x.AverageIdleTime
	}
	return nil
}

func (x *CMsgServerSignoutData_PerfData) GetMaxIdleTime() []float32 {
	if x != nil {
		return x.MaxIdleTime
	}
	return nil
}

func (x *CMsgServerSignoutData_PerfData) GetAverageInputProcessingTime() []float32 {
	if x != nil {
		return x.AverageInputProcessingTime
	}
	return nil
}

func (x *CMsgServerSignoutData_PerfData) GetMaxInputProcessingTime() []float32 {
	if x != nil {
		return x.MaxInputProcessingTime
	}
	return nil
}

type CMsgServerSignoutData_BookRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountRewards []*CMsgServerSignoutData_BookRewards_AccountRewards `protobuf:"bytes,1,rep,name=account_rewards,json=accountRewards" json:"account_rewards,omitempty"`
}

func (x *CMsgServerSignoutData_BookRewards) Reset() {
	*x = CMsgServerSignoutData_BookRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_BookRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_BookRewards) ProtoMessage() {}

func (x *CMsgServerSignoutData_BookRewards) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_BookRewards.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_BookRewards) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgServerSignoutData_BookRewards) GetAccountRewards() []*CMsgServerSignoutData_BookRewards_AccountRewards {
	if x != nil {
		return x.AccountRewards
	}
	return nil
}

type CMsgServerSignoutData_AccountStatChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountStats []*CMsgServerSignoutData_AccountStatChanges_AccountStats `protobuf:"bytes,1,rep,name=account_stats,json=accountStats" json:"account_stats,omitempty"`
}

func (x *CMsgServerSignoutData_AccountStatChanges) Reset() {
	*x = CMsgServerSignoutData_AccountStatChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_AccountStatChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_AccountStatChanges) ProtoMessage() {}

func (x *CMsgServerSignoutData_AccountStatChanges) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_AccountStatChanges.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_AccountStatChanges) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgServerSignoutData_AccountStatChanges) GetAccountStats() []*CMsgServerSignoutData_AccountStatChanges_AccountStats {
	if x != nil {
		return x.AccountStats
	}
	return nil
}

type CMsgServerSignoutData_PlayerChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatLines []*CMsgServerSignoutData_PlayerChat_ChatLine `protobuf:"bytes,1,rep,name=chat_lines,json=chatLines" json:"chat_lines,omitempty"`
}

func (x *CMsgServerSignoutData_PlayerChat) Reset() {
	*x = CMsgServerSignoutData_PlayerChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_PlayerChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_PlayerChat) ProtoMessage() {}

func (x *CMsgServerSignoutData_PlayerChat) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_PlayerChat.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_PlayerChat) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgServerSignoutData_PlayerChat) GetChatLines() []*CMsgServerSignoutData_PlayerChat_ChatLine {
	if x != nil {
		return x.ChatLines
	}
	return nil
}

type CMsgServerSignoutData_PenalizedPlayers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PenalizedPlayers []*CMsgServerSignoutData_PenalizedPlayers_Penalty `protobuf:"bytes,1,rep,name=penalized_players,json=penalizedPlayers" json:"penalized_players,omitempty"`
}

func (x *CMsgServerSignoutData_PenalizedPlayers) Reset() {
	*x = CMsgServerSignoutData_PenalizedPlayers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_PenalizedPlayers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_PenalizedPlayers) ProtoMessage() {}

func (x *CMsgServerSignoutData_PenalizedPlayers) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_PenalizedPlayers.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_PenalizedPlayers) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgServerSignoutData_PenalizedPlayers) GetPenalizedPlayers() []*CMsgServerSignoutData_PenalizedPlayers_Penalty {
	if x != nil {
		return x.PenalizedPlayers
	}
	return nil
}

type CMsgMatchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchDurationS       *uint32                     `protobuf:"varint,1,opt,name=match_duration_s,json=matchDurationS" json:"match_duration_s,omitempty"`
	EndReason            *CMsgMatchData_EEndReason   `protobuf:"varint,2,opt,name=end_reason,json=endReason,enum=dota.CMsgMatchData_EEndReason" json:"end_reason,omitempty"`
	WinningTeam          *ECitadelLobbyTeam          `protobuf:"varint,3,opt,name=winning_team,json=winningTeam,enum=dota.ECitadelLobbyTeam" json:"winning_team,omitempty"`
	Players              []*CMsgMatchData_PlayerInfo `protobuf:"bytes,4,rep,name=players" json:"players,omitempty"`
	ObjectivesMaskLegacy *uint32                     `protobuf:"varint,5,opt,name=objectives_mask_legacy,json=objectivesMaskLegacy" json:"objectives_mask_legacy,omitempty"`
	ServerVersion        *uint32                     `protobuf:"varint,6,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	GameMode             *ECitadelGameMode           `protobuf:"varint,7,opt,name=game_mode,json=gameMode,enum=dota.ECitadelGameMode" json:"game_mode,omitempty"`
	MatchMode            *ECitadelMatchMode          `protobuf:"varint,8,opt,name=match_mode,json=matchMode,enum=dota.ECitadelMatchMode" json:"match_mode,omitempty"`
	ObjectivesMaskTeam0  *uint64                     `protobuf:"varint,9,opt,name=objectives_mask_team0,json=objectivesMaskTeam0" json:"objectives_mask_team0,omitempty"`
	ObjectivesMaskTeam1  *uint64                     `protobuf:"varint,10,opt,name=objectives_mask_team1,json=objectivesMaskTeam1" json:"objectives_mask_team1,omitempty"`
	MatchEndTime         *uint32                     `protobuf:"varint,11,opt,name=match_end_time,json=matchEndTime" json:"match_end_time,omitempty"`
	StompScore           *float32                    `protobuf:"fixed32,12,opt,name=stomp_score,json=stompScore" json:"stomp_score,omitempty"`
	SafeToAbandon        *bool                       `protobuf:"varint,13,opt,name=safe_to_abandon,json=safeToAbandon" json:"safe_to_abandon,omitempty"`
	TeamAbandon          *bool                       `protobuf:"varint,14,opt,name=team_abandon,json=teamAbandon" json:"team_abandon,omitempty"`
}

func (x *CMsgMatchData) Reset() {
	*x = CMsgMatchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchData) ProtoMessage() {}

func (x *CMsgMatchData) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchData.ProtoReflect.Descriptor instead.
func (*CMsgMatchData) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgMatchData) GetMatchDurationS() uint32 {
	if x != nil && x.MatchDurationS != nil {
		return *x.MatchDurationS
	}
	return 0
}

func (x *CMsgMatchData) GetEndReason() CMsgMatchData_EEndReason {
	if x != nil && x.EndReason != nil {
		return *x.EndReason
	}
	return CMsgMatchData_k_EEndReason_TeamWin
}

func (x *CMsgMatchData) GetWinningTeam() ECitadelLobbyTeam {
	if x != nil && x.WinningTeam != nil {
		return *x.WinningTeam
	}
	return ECitadelLobbyTeam_k_ECitadelLobbyTeam_Team0
}

func (x *CMsgMatchData) GetPlayers() []*CMsgMatchData_PlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgMatchData) GetObjectivesMaskLegacy() uint32 {
	if x != nil && x.ObjectivesMaskLegacy != nil {
		return *x.ObjectivesMaskLegacy
	}
	return 0
}

func (x *CMsgMatchData) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgMatchData) GetGameMode() ECitadelGameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return ECitadelGameMode_k_ECitadelGameMode_Invalid
}

func (x *CMsgMatchData) GetMatchMode() ECitadelMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return ECitadelMatchMode_k_ECitadelMatchMode_Invalid
}

func (x *CMsgMatchData) GetObjectivesMaskTeam0() uint64 {
	if x != nil && x.ObjectivesMaskTeam0 != nil {
		return *x.ObjectivesMaskTeam0
	}
	return 0
}

func (x *CMsgMatchData) GetObjectivesMaskTeam1() uint64 {
	if x != nil && x.ObjectivesMaskTeam1 != nil {
		return *x.ObjectivesMaskTeam1
	}
	return 0
}

func (x *CMsgMatchData) GetMatchEndTime() uint32 {
	if x != nil && x.MatchEndTime != nil {
		return *x.MatchEndTime
	}
	return 0
}

func (x *CMsgMatchData) GetStompScore() float32 {
	if x != nil && x.StompScore != nil {
		return *x.StompScore
	}
	return 0
}

func (x *CMsgMatchData) GetSafeToAbandon() bool {
	if x != nil && x.SafeToAbandon != nil {
		return *x.SafeToAbandon
	}
	return false
}

func (x *CMsgMatchData) GetTeamAbandon() bool {
	if x != nil && x.TeamAbandon != nil {
		return *x.TeamAbandon
	}
	return false
}

type CMsgServerToGCMatchSignout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalData []*CExtraMsgBlock `protobuf:"bytes,1,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
	SignoutAttempt *uint32           `protobuf:"varint,2,opt,name=signout_attempt,json=signoutAttempt" json:"signout_attempt,omitempty"`
	LobbyId        *uint64           `protobuf:"varint,3,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	MatchId        *uint64           `protobuf:"varint,4,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	ClusterId      *uint32           `protobuf:"varint,9,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	MatchData      *CMsgMatchData    `protobuf:"bytes,10,opt,name=match_data,json=matchData" json:"match_data,omitempty"`
}

func (x *CMsgServerToGCMatchSignout) Reset() {
	*x = CMsgServerToGCMatchSignout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchSignout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchSignout) ProtoMessage() {}

func (x *CMsgServerToGCMatchSignout) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchSignout.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchSignout) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgServerToGCMatchSignout) GetAdditionalData() []*CExtraMsgBlock {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

func (x *CMsgServerToGCMatchSignout) GetSignoutAttempt() uint32 {
	if x != nil && x.SignoutAttempt != nil {
		return *x.SignoutAttempt
	}
	return 0
}

func (x *CMsgServerToGCMatchSignout) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgServerToGCMatchSignout) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCMatchSignout) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

func (x *CMsgServerToGCMatchSignout) GetMatchData() *CMsgMatchData {
	if x != nil {
		return x.MatchData
	}
	return nil
}

type CMsgServerToGCMatchSignoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgServerToGCMatchSignoutResponse_ESignoutResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgServerToGCMatchSignoutResponse_ESignoutResult" json:"result,omitempty"`
}

func (x *CMsgServerToGCMatchSignoutResponse) Reset() {
	*x = CMsgServerToGCMatchSignoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchSignoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchSignoutResponse) ProtoMessage() {}

func (x *CMsgServerToGCMatchSignoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchSignoutResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchSignoutResponse) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgServerToGCMatchSignoutResponse) GetResult() CMsgServerToGCMatchSignoutResponse_ESignoutResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return CMsgServerToGCMatchSignoutResponse_k_ESignout_Failed_Retry
}

type CMsgServerWelcomeCitadel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgServerWelcomeCitadel) Reset() {
	*x = CMsgServerWelcomeCitadel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerWelcomeCitadel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerWelcomeCitadel) ProtoMessage() {}

func (x *CMsgServerWelcomeCitadel) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerWelcomeCitadel.ProtoReflect.Descriptor instead.
func (*CMsgServerWelcomeCitadel) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{21}
}

type CMsgServerToGCIdlePing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerVersion *uint32 `protobuf:"varint,1,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
}

func (x *CMsgServerToGCIdlePing) Reset() {
	*x = CMsgServerToGCIdlePing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCIdlePing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCIdlePing) ProtoMessage() {}

func (x *CMsgServerToGCIdlePing) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCIdlePing.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCIdlePing) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgServerToGCIdlePing) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

type CMsgGCToServerRequestPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGCToServerRequestPing) Reset() {
	*x = CMsgGCToServerRequestPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerRequestPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerRequestPing) ProtoMessage() {}

func (x *CMsgGCToServerRequestPing) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerRequestPing.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerRequestPing) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{23}
}

type CMsgGCToServerAllocateForMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (x *CMsgGCToServerAllocateForMatch) Reset() {
	*x = CMsgGCToServerAllocateForMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerAllocateForMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerAllocateForMatch) ProtoMessage() {}

func (x *CMsgGCToServerAllocateForMatch) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerAllocateForMatch.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerAllocateForMatch) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgGCToServerAllocateForMatch) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgGCToServerAllocateForMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (x *CMsgGCToServerAllocateForMatchResponse) Reset() {
	*x = CMsgGCToServerAllocateForMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerAllocateForMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerAllocateForMatchResponse) ProtoMessage() {}

func (x *CMsgGCToServerAllocateForMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerAllocateForMatchResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerAllocateForMatchResponse) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgGCToServerAllocateForMatchResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type CMsgServerToGCEnterMatchmaking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerVersion   *uint32 `protobuf:"varint,1,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	SearchKey       *string `protobuf:"bytes,2,opt,name=search_key,json=searchKey" json:"search_key,omitempty"`
	RegionId        *uint32 `protobuf:"varint,3,opt,name=region_id,json=regionId" json:"region_id,omitempty"`
	ClusterId       *uint32 `protobuf:"varint,4,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	ServerPublicIp  *uint32 `protobuf:"varint,5,opt,name=server_public_ip,json=serverPublicIp" json:"server_public_ip,omitempty"`
	ServerPrivateIp *uint32 `protobuf:"varint,6,opt,name=server_private_ip,json=serverPrivateIp" json:"server_private_ip,omitempty"`
	ServerPort      *uint32 `protobuf:"varint,7,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	HltvPort        *uint32 `protobuf:"varint,8,opt,name=hltv_port,json=hltvPort" json:"hltv_port,omitempty"`
	SdrAddress      []byte  `protobuf:"bytes,9,opt,name=sdr_address,json=sdrAddress" json:"sdr_address,omitempty"`
}

func (x *CMsgServerToGCEnterMatchmaking) Reset() {
	*x = CMsgServerToGCEnterMatchmaking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCEnterMatchmaking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCEnterMatchmaking) ProtoMessage() {}

func (x *CMsgServerToGCEnterMatchmaking) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCEnterMatchmaking.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCEnterMatchmaking) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgServerToGCEnterMatchmaking) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgServerToGCEnterMatchmaking) GetSearchKey() string {
	if x != nil && x.SearchKey != nil {
		return *x.SearchKey
	}
	return ""
}

func (x *CMsgServerToGCEnterMatchmaking) GetRegionId() uint32 {
	if x != nil && x.RegionId != nil {
		return *x.RegionId
	}
	return 0
}

func (x *CMsgServerToGCEnterMatchmaking) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

func (x *CMsgServerToGCEnterMatchmaking) GetServerPublicIp() uint32 {
	if x != nil && x.ServerPublicIp != nil {
		return *x.ServerPublicIp
	}
	return 0
}

func (x *CMsgServerToGCEnterMatchmaking) GetServerPrivateIp() uint32 {
	if x != nil && x.ServerPrivateIp != nil {
		return *x.ServerPrivateIp
	}
	return 0
}

func (x *CMsgServerToGCEnterMatchmaking) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CMsgServerToGCEnterMatchmaking) GetHltvPort() uint32 {
	if x != nil && x.HltvPort != nil {
		return *x.HltvPort
	}
	return 0
}

func (x *CMsgServerToGCEnterMatchmaking) GetSdrAddress() []byte {
	if x != nil {
		return x.SdrAddress
	}
	return nil
}

type CMsgGCToServerCancelAllocateForMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (x *CMsgGCToServerCancelAllocateForMatch) Reset() {
	*x = CMsgGCToServerCancelAllocateForMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerCancelAllocateForMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerCancelAllocateForMatch) ProtoMessage() {}

func (x *CMsgGCToServerCancelAllocateForMatch) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerCancelAllocateForMatch.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerCancelAllocateForMatch) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgGCToServerCancelAllocateForMatch) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgServerToGCUpdateLobbyServerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId       *uint64            `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	ServerState   *ELobbyServerState `protobuf:"varint,2,opt,name=server_state,json=serverState,enum=dota.ELobbyServerState" json:"server_state,omitempty"`
	SafeToAbandon *bool              `protobuf:"varint,3,opt,name=safe_to_abandon,json=safeToAbandon" json:"safe_to_abandon,omitempty"`
}

func (x *CMsgServerToGCUpdateLobbyServerState) Reset() {
	*x = CMsgServerToGCUpdateLobbyServerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCUpdateLobbyServerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCUpdateLobbyServerState) ProtoMessage() {}

func (x *CMsgServerToGCUpdateLobbyServerState) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCUpdateLobbyServerState.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCUpdateLobbyServerState) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgServerToGCUpdateLobbyServerState) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgServerToGCUpdateLobbyServerState) GetServerState() ELobbyServerState {
	if x != nil && x.ServerState != nil {
		return *x.ServerState
	}
	return ELobbyServerState_k_eLobbyServerState_Assign
}

func (x *CMsgServerToGCUpdateLobbyServerState) GetSafeToAbandon() bool {
	if x != nil && x.SafeToAbandon != nil {
		return *x.SafeToAbandon
	}
	return false
}

type CMsgServerToGCAbandonMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSteamId     *uint64                              `protobuf:"fixed64,1,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	LobbyId           *uint64                              `protobuf:"fixed64,2,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	ClusterId         *uint32                              `protobuf:"varint,3,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	ReasonCode        *CMsgServerToGCAbandonMatch_EReason  `protobuf:"varint,4,opt,name=reason_code,json=reasonCode,enum=dota.CMsgServerToGCAbandonMatch_EReason" json:"reason_code,omitempty"`
	AdditionalData    *uint64                              `protobuf:"varint,5,opt,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
	MatchId           *uint64                              `protobuf:"varint,6,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Players           []*CMsgServerToGCAbandonMatch_Player `protobuf:"bytes,8,rep,name=players" json:"players,omitempty"`
	PublicIpAddress   *uint32                              `protobuf:"fixed32,9,opt,name=public_ip_address,json=publicIpAddress" json:"public_ip_address,omitempty"`
	Port              *uint32                              `protobuf:"varint,10,opt,name=port" json:"port,omitempty"`
	ServerVersion     *uint32                              `protobuf:"varint,11,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	Pid               *uint32                              `protobuf:"varint,12,opt,name=pid" json:"pid,omitempty"`
	InstanceId        *uint32                              `protobuf:"varint,13,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	PrivateIpAddress  *uint32                              `protobuf:"varint,14,opt,name=private_ip_address,json=privateIpAddress" json:"private_ip_address,omitempty"`
	MatchMode         *ECitadelMatchMode                   `protobuf:"varint,15,opt,name=match_mode,json=matchMode,enum=dota.ECitadelMatchMode" json:"match_mode,omitempty"`
	GameMode          *ECitadelGameMode                    `protobuf:"varint,16,opt,name=game_mode,json=gameMode,enum=dota.ECitadelGameMode" json:"game_mode,omitempty"`
	WasServerShutdown *bool                                `protobuf:"varint,17,opt,name=was_server_shutdown,json=wasServerShutdown" json:"was_server_shutdown,omitempty"`
}

func (x *CMsgServerToGCAbandonMatch) Reset() {
	*x = CMsgServerToGCAbandonMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCAbandonMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCAbandonMatch) ProtoMessage() {}

func (x *CMsgServerToGCAbandonMatch) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCAbandonMatch.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCAbandonMatch) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgServerToGCAbandonMatch) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetReasonCode() CMsgServerToGCAbandonMatch_EReason {
	if x != nil && x.ReasonCode != nil {
		return *x.ReasonCode
	}
	return CMsgServerToGCAbandonMatch_eReason_ServerCrash
}

func (x *CMsgServerToGCAbandonMatch) GetAdditionalData() uint64 {
	if x != nil && x.AdditionalData != nil {
		return *x.AdditionalData
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetPlayers() []*CMsgServerToGCAbandonMatch_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgServerToGCAbandonMatch) GetPublicIpAddress() uint32 {
	if x != nil && x.PublicIpAddress != nil {
		return *x.PublicIpAddress
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetInstanceId() uint32 {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetPrivateIpAddress() uint32 {
	if x != nil && x.PrivateIpAddress != nil {
		return *x.PrivateIpAddress
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetMatchMode() ECitadelMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return ECitadelMatchMode_k_ECitadelMatchMode_Invalid
}

func (x *CMsgServerToGCAbandonMatch) GetGameMode() ECitadelGameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return ECitadelGameMode_k_ECitadelGameMode_Invalid
}

func (x *CMsgServerToGCAbandonMatch) GetWasServerShutdown() bool {
	if x != nil && x.WasServerShutdown != nil {
		return *x.WasServerShutdown
	}
	return false
}

type CMsgServerToGCAbandonMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgServerToGCAbandonMatchResponse) Reset() {
	*x = CMsgServerToGCAbandonMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCAbandonMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCAbandonMatchResponse) ProtoMessage() {}

func (x *CMsgServerToGCAbandonMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCAbandonMatchResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCAbandonMatchResponse) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{30}
}

type CMsgServerToGCTestConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgServerToGCTestConnection) Reset() {
	*x = CMsgServerToGCTestConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCTestConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCTestConnection) ProtoMessage() {}

func (x *CMsgServerToGCTestConnection) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCTestConnection.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCTestConnection) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{31}
}

type CMsgServerToGCTestConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State   *uint32 `protobuf:"varint,1,opt,name=state" json:"state,omitempty"`
	LobbyId *uint64 `protobuf:"varint,2,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
}

func (x *CMsgServerToGCTestConnectionResponse) Reset() {
	*x = CMsgServerToGCTestConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCTestConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCTestConnectionResponse) ProtoMessage() {}

func (x *CMsgServerToGCTestConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCTestConnectionResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCTestConnectionResponse) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgServerToGCTestConnectionResponse) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CMsgServerToGCTestConnectionResponse) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

type CMsgGCToServerSetServerConVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConvarName  *string `protobuf:"bytes,1,opt,name=convar_name,json=convarName" json:"convar_name,omitempty"`
	ConvarValue *string `protobuf:"bytes,2,opt,name=convar_value,json=convarValue" json:"convar_value,omitempty"`
}

func (x *CMsgGCToServerSetServerConVar) Reset() {
	*x = CMsgGCToServerSetServerConVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerSetServerConVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerSetServerConVar) ProtoMessage() {}

func (x *CMsgGCToServerSetServerConVar) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerSetServerConVar.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerSetServerConVar) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{33}
}

func (x *CMsgGCToServerSetServerConVar) GetConvarName() string {
	if x != nil && x.ConvarName != nil {
		return *x.ConvarName
	}
	return ""
}

func (x *CMsgGCToServerSetServerConVar) GetConvarValue() string {
	if x != nil && x.ConvarValue != nil {
		return *x.ConvarValue
	}
	return ""
}

type CMsgGCToServerSetServerConVarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (x *CMsgGCToServerSetServerConVarResponse) Reset() {
	*x = CMsgGCToServerSetServerConVarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerSetServerConVarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerSetServerConVarResponse) ProtoMessage() {}

func (x *CMsgGCToServerSetServerConVarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerSetServerConVarResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerSetServerConVarResponse) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{34}
}

func (x *CMsgGCToServerSetServerConVarResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type CMsgGCToServerAddSpectator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId           *uint64 `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	AccountId         *uint32 `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AccountToSpectate *uint32 `protobuf:"varint,3,opt,name=account_to_spectate,json=accountToSpectate" json:"account_to_spectate,omitempty"`
}

func (x *CMsgGCToServerAddSpectator) Reset() {
	*x = CMsgGCToServerAddSpectator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerAddSpectator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerAddSpectator) ProtoMessage() {}

func (x *CMsgGCToServerAddSpectator) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerAddSpectator.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerAddSpectator) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgGCToServerAddSpectator) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgGCToServerAddSpectator) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCToServerAddSpectator) GetAccountToSpectate() uint32 {
	if x != nil && x.AccountToSpectate != nil {
		return *x.AccountToSpectate
	}
	return 0
}

type CMsgGCToServerAddSpectatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result              *CMsgGCToServerAddSpectatorResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=dota.CMsgGCToServerAddSpectatorResponse_EResponse" json:"result,omitempty"`
	RequestingAccountId *uint32                                       `protobuf:"varint,2,opt,name=requesting_account_id,json=requestingAccountId" json:"requesting_account_id,omitempty"`
}

func (x *CMsgGCToServerAddSpectatorResponse) Reset() {
	*x = CMsgGCToServerAddSpectatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerAddSpectatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerAddSpectatorResponse) ProtoMessage() {}

func (x *CMsgGCToServerAddSpectatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerAddSpectatorResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerAddSpectatorResponse) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgGCToServerAddSpectatorResponse) GetResult() CMsgGCToServerAddSpectatorResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return CMsgGCToServerAddSpectatorResponse_k_eInternalError
}

func (x *CMsgGCToServerAddSpectatorResponse) GetRequestingAccountId() uint32 {
	if x != nil && x.RequestingAccountId != nil {
		return *x.RequestingAccountId
	}
	return 0
}

type CMsgServerCrashSentinelFile_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	HeroId    *uint32 `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
}

func (x *CMsgServerCrashSentinelFile_Player) Reset() {
	*x = CMsgServerCrashSentinelFile_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerCrashSentinelFile_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerCrashSentinelFile_Player) ProtoMessage() {}

func (x *CMsgServerCrashSentinelFile_Player) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerCrashSentinelFile_Player.ProtoReflect.Descriptor instead.
func (*CMsgServerCrashSentinelFile_Player) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CMsgServerCrashSentinelFile_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile_Player) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

type CMsgServerCrashSentinelFile_GameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId           *uint64                               `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	LobbyId           *uint64                               `protobuf:"fixed64,2,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	ServerState       *uint32                               `protobuf:"varint,3,opt,name=server_state,json=serverState" json:"server_state,omitempty"`
	Players           []*CMsgServerCrashSentinelFile_Player `protobuf:"bytes,5,rep,name=players" json:"players,omitempty"`
	MatchMode         *ECitadelMatchMode                    `protobuf:"varint,6,opt,name=match_mode,json=matchMode,enum=dota.ECitadelMatchMode" json:"match_mode,omitempty"`
	GameMode          *ECitadelGameMode                     `protobuf:"varint,7,opt,name=game_mode,json=gameMode,enum=dota.ECitadelGameMode" json:"game_mode,omitempty"`
	WasServerShutdown *bool                                 `protobuf:"varint,8,opt,name=was_server_shutdown,json=wasServerShutdown" json:"was_server_shutdown,omitempty"`
}

func (x *CMsgServerCrashSentinelFile_GameInfo) Reset() {
	*x = CMsgServerCrashSentinelFile_GameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerCrashSentinelFile_GameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerCrashSentinelFile_GameInfo) ProtoMessage() {}

func (x *CMsgServerCrashSentinelFile_GameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerCrashSentinelFile_GameInfo.ProtoReflect.Descriptor instead.
func (*CMsgServerCrashSentinelFile_GameInfo) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CMsgServerCrashSentinelFile_GameInfo) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile_GameInfo) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile_GameInfo) GetServerState() uint32 {
	if x != nil && x.ServerState != nil {
		return *x.ServerState
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile_GameInfo) GetPlayers() []*CMsgServerCrashSentinelFile_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgServerCrashSentinelFile_GameInfo) GetMatchMode() ECitadelMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return ECitadelMatchMode_k_ECitadelMatchMode_Invalid
}

func (x *CMsgServerCrashSentinelFile_GameInfo) GetGameMode() ECitadelGameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return ECitadelGameMode_k_ECitadelGameMode_Invalid
}

func (x *CMsgServerCrashSentinelFile_GameInfo) GetWasServerShutdown() bool {
	if x != nil && x.WasServerShutdown != nil {
		return *x.WasServerShutdown
	}
	return false
}

type CServerLobbyData_PlayerMMR_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId         *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlayerMmr         *uint32 `protobuf:"varint,2,opt,name=player_mmr,json=playerMmr" json:"player_mmr,omitempty"`
	PlayerUncertainty *uint32 `protobuf:"varint,3,opt,name=player_uncertainty,json=playerUncertainty" json:"player_uncertainty,omitempty"`
	HeroMmr           *uint32 `protobuf:"varint,4,opt,name=hero_mmr,json=heroMmr" json:"hero_mmr,omitempty"`
}

func (x *CServerLobbyData_PlayerMMR_Player) Reset() {
	*x = CServerLobbyData_PlayerMMR_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_PlayerMMR_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_PlayerMMR_Player) ProtoMessage() {}

func (x *CServerLobbyData_PlayerMMR_Player) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_PlayerMMR_Player.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_PlayerMMR_Player) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CServerLobbyData_PlayerMMR_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CServerLobbyData_PlayerMMR_Player) GetPlayerMmr() uint32 {
	if x != nil && x.PlayerMmr != nil {
		return *x.PlayerMmr
	}
	return 0
}

func (x *CServerLobbyData_PlayerMMR_Player) GetPlayerUncertainty() uint32 {
	if x != nil && x.PlayerUncertainty != nil {
		return *x.PlayerUncertainty
	}
	return 0
}

func (x *CServerLobbyData_PlayerMMR_Player) GetHeroMmr() uint32 {
	if x != nil && x.HeroMmr != nil {
		return *x.HeroMmr
	}
	return 0
}

type CServerLobbyData_PostMatchSurvey_PlayerSurvey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	QuestionId *uint32 `protobuf:"varint,2,opt,name=question_id,json=questionId" json:"question_id,omitempty"`
}

func (x *CServerLobbyData_PostMatchSurvey_PlayerSurvey) Reset() {
	*x = CServerLobbyData_PostMatchSurvey_PlayerSurvey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_PostMatchSurvey_PlayerSurvey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_PostMatchSurvey_PlayerSurvey) ProtoMessage() {}

func (x *CServerLobbyData_PostMatchSurvey_PlayerSurvey) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_PostMatchSurvey_PlayerSurvey.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_PostMatchSurvey_PlayerSurvey) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CServerLobbyData_PostMatchSurvey_PlayerSurvey) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CServerLobbyData_PostMatchSurvey_PlayerSurvey) GetQuestionId() uint32 {
	if x != nil && x.QuestionId != nil {
		return *x.QuestionId
	}
	return 0
}

type CSOCitadelServerStaticLobby_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   *uint32                                 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PersonaName *string                                 `protobuf:"bytes,2,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	Team        *ECitadelLobbyTeam                      `protobuf:"varint,3,opt,name=team,enum=dota.ECitadelLobbyTeam" json:"team,omitempty"`
	PlayerSlot  *uint32                                 `protobuf:"varint,4,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	HeroId      *uint32                                 `protobuf:"varint,5,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	PartyIndex  *uint32                                 `protobuf:"varint,6,opt,name=party_index,json=partyIndex" json:"party_index,omitempty"`
	Platform    *EGCPlatform                            `protobuf:"varint,7,opt,name=platform,enum=dota.EGCPlatform" json:"platform,omitempty"`
	AwardIds    []CSOCitadelServerStaticLobby_EAwardIDs `protobuf:"varint,8,rep,name=award_ids,json=awardIds,enum=dota.CSOCitadelServerStaticLobby_EAwardIDs" json:"award_ids,omitempty"`
}

func (x *CSOCitadelServerStaticLobby_Member) Reset() {
	*x = CSOCitadelServerStaticLobby_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOCitadelServerStaticLobby_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOCitadelServerStaticLobby_Member) ProtoMessage() {}

func (x *CSOCitadelServerStaticLobby_Member) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOCitadelServerStaticLobby_Member.ProtoReflect.Descriptor instead.
func (*CSOCitadelServerStaticLobby_Member) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CSOCitadelServerStaticLobby_Member) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOCitadelServerStaticLobby_Member) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CSOCitadelServerStaticLobby_Member) GetTeam() ECitadelLobbyTeam {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return ECitadelLobbyTeam_k_ECitadelLobbyTeam_Team0
}

func (x *CSOCitadelServerStaticLobby_Member) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CSOCitadelServerStaticLobby_Member) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CSOCitadelServerStaticLobby_Member) GetPartyIndex() uint32 {
	if x != nil && x.PartyIndex != nil {
		return *x.PartyIndex
	}
	return 0
}

func (x *CSOCitadelServerStaticLobby_Member) GetPlatform() EGCPlatform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return EGCPlatform_k_eGCPlatform_None
}

func (x *CSOCitadelServerStaticLobby_Member) GetAwardIds() []CSOCitadelServerStaticLobby_EAwardIDs {
	if x != nil {
		return x.AwardIds
	}
	return nil
}

type CSOCitadelServerStaticLobby_DevSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsoleString *string `protobuf:"bytes,1,opt,name=console_string,json=consoleString" json:"console_string,omitempty"`
}

func (x *CSOCitadelServerStaticLobby_DevSettings) Reset() {
	*x = CSOCitadelServerStaticLobby_DevSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOCitadelServerStaticLobby_DevSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOCitadelServerStaticLobby_DevSettings) ProtoMessage() {}

func (x *CSOCitadelServerStaticLobby_DevSettings) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOCitadelServerStaticLobby_DevSettings.ProtoReflect.Descriptor instead.
func (*CSOCitadelServerStaticLobby_DevSettings) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{6, 1}
}

func (x *CSOCitadelServerStaticLobby_DevSettings) GetConsoleString() string {
	if x != nil && x.ConsoleString != nil {
		return *x.ConsoleString
	}
	return ""
}

type CMsgServerSignoutData_ServerPerfStats_FrameCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumFrames  *uint32 `protobuf:"varint,1,opt,name=num_frames,json=numFrames" json:"num_frames,omitempty"`
	LongestRun *uint32 `protobuf:"varint,2,opt,name=longest_run,json=longestRun" json:"longest_run,omitempty"`
	NumRuns    *uint32 `protobuf:"varint,3,opt,name=num_runs,json=numRuns" json:"num_runs,omitempty"`
}

func (x *CMsgServerSignoutData_ServerPerfStats_FrameCounts) Reset() {
	*x = CMsgServerSignoutData_ServerPerfStats_FrameCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_ServerPerfStats_FrameCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_ServerPerfStats_FrameCounts) ProtoMessage() {}

func (x *CMsgServerSignoutData_ServerPerfStats_FrameCounts) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_ServerPerfStats_FrameCounts.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_ServerPerfStats_FrameCounts) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CMsgServerSignoutData_ServerPerfStats_FrameCounts) GetNumFrames() uint32 {
	if x != nil && x.NumFrames != nil {
		return *x.NumFrames
	}
	return 0
}

func (x *CMsgServerSignoutData_ServerPerfStats_FrameCounts) GetLongestRun() uint32 {
	if x != nil && x.LongestRun != nil {
		return *x.LongestRun
	}
	return 0
}

func (x *CMsgServerSignoutData_ServerPerfStats_FrameCounts) GetNumRuns() uint32 {
	if x != nil && x.NumRuns != nil {
		return *x.NumRuns
	}
	return 0
}

type CMsgServerSignoutData_ServerPerfStats_PerfSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTimeS        *uint32                                            `protobuf:"varint,1,opt,name=game_time_s,json=gameTimeS" json:"game_time_s,omitempty"`
	AvgFrame         *float32                                           `protobuf:"fixed32,2,opt,name=avg_frame,json=avgFrame" json:"avg_frame,omitempty"`
	AvgIdle          *float32                                           `protobuf:"fixed32,3,opt,name=avg_idle,json=avgIdle" json:"avg_idle,omitempty"`
	TotalFrames      *uint32                                            `protobuf:"varint,4,opt,name=total_frames,json=totalFrames" json:"total_frames,omitempty"`
	PerformantFrames *CMsgServerSignoutData_ServerPerfStats_FrameCounts `protobuf:"bytes,5,opt,name=performant_frames,json=performantFrames" json:"performant_frames,omitempty"`
	LongFrames       *CMsgServerSignoutData_ServerPerfStats_FrameCounts `protobuf:"bytes,6,opt,name=long_frames,json=longFrames" json:"long_frames,omitempty"`
	LowIdleFrames    *CMsgServerSignoutData_ServerPerfStats_FrameCounts `protobuf:"bytes,7,opt,name=low_idle_frames,json=lowIdleFrames" json:"low_idle_frames,omitempty"`
	MemoryBytes      *uint64                                            `protobuf:"varint,8,opt,name=memory_bytes,json=memoryBytes" json:"memory_bytes,omitempty"`
	PeakMemoryBytes  *uint64                                            `protobuf:"varint,9,opt,name=peak_memory_bytes,json=peakMemoryBytes" json:"peak_memory_bytes,omitempty"`
}

func (x *CMsgServerSignoutData_ServerPerfStats_PerfSample) Reset() {
	*x = CMsgServerSignoutData_ServerPerfStats_PerfSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_ServerPerfStats_PerfSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_ServerPerfStats_PerfSample) ProtoMessage() {}

func (x *CMsgServerSignoutData_ServerPerfStats_PerfSample) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_ServerPerfStats_PerfSample.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_ServerPerfStats_PerfSample) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{7, 1}
}

func (x *CMsgServerSignoutData_ServerPerfStats_PerfSample) GetGameTimeS() uint32 {
	if x != nil && x.GameTimeS != nil {
		return *x.GameTimeS
	}
	return 0
}

func (x *CMsgServerSignoutData_ServerPerfStats_PerfSample) GetAvgFrame() float32 {
	if x != nil && x.AvgFrame != nil {
		return *x.AvgFrame
	}
	return 0
}

func (x *CMsgServerSignoutData_ServerPerfStats_PerfSample) GetAvgIdle() float32 {
	if x != nil && x.AvgIdle != nil {
		return *x.AvgIdle
	}
	return 0
}

func (x *CMsgServerSignoutData_ServerPerfStats_PerfSample) GetTotalFrames() uint32 {
	if x != nil && x.TotalFrames != nil {
		return *x.TotalFrames
	}
	return 0
}

func (x *CMsgServerSignoutData_ServerPerfStats_PerfSample) GetPerformantFrames() *CMsgServerSignoutData_ServerPerfStats_FrameCounts {
	if x != nil {
		return x.PerformantFrames
	}
	return nil
}

func (x *CMsgServerSignoutData_ServerPerfStats_PerfSample) GetLongFrames() *CMsgServerSignoutData_ServerPerfStats_FrameCounts {
	if x != nil {
		return x.LongFrames
	}
	return nil
}

func (x *CMsgServerSignoutData_ServerPerfStats_PerfSample) GetLowIdleFrames() *CMsgServerSignoutData_ServerPerfStats_FrameCounts {
	if x != nil {
		return x.LowIdleFrames
	}
	return nil
}

func (x *CMsgServerSignoutData_ServerPerfStats_PerfSample) GetMemoryBytes() uint64 {
	if x != nil && x.MemoryBytes != nil {
		return *x.MemoryBytes
	}
	return 0
}

func (x *CMsgServerSignoutData_ServerPerfStats_PerfSample) GetPeakMemoryBytes() uint64 {
	if x != nil && x.PeakMemoryBytes != nil {
		return *x.PeakMemoryBytes
	}
	return 0
}

type CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LongFrameThreshold *float32                                            `protobuf:"fixed32,1,opt,name=long_frame_threshold,json=longFrameThreshold" json:"long_frame_threshold,omitempty"`
	LowIdleThreshold   *float32                                            `protobuf:"fixed32,2,opt,name=low_idle_threshold,json=lowIdleThreshold" json:"low_idle_threshold,omitempty"`
	Samples            []*CMsgServerSignoutData_ServerPerfStats_PerfSample `protobuf:"bytes,3,rep,name=samples" json:"samples,omitempty"`
}

func (x *CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples) Reset() {
	*x = CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples) ProtoMessage() {}

func (x *CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{7, 2}
}

func (x *CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples) GetLongFrameThreshold() float32 {
	if x != nil && x.LongFrameThreshold != nil {
		return *x.LongFrameThreshold
	}
	return 0
}

func (x *CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples) GetLowIdleThreshold() float32 {
	if x != nil && x.LowIdleThreshold != nil {
		return *x.LowIdleThreshold
	}
	return 0
}

func (x *CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples) GetSamples() []*CMsgServerSignoutData_ServerPerfStats_PerfSample {
	if x != nil {
		return x.Samples
	}
	return nil
}

type CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId           *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	DisconnectTime      *uint32 `protobuf:"varint,2,opt,name=disconnect_time,json=disconnectTime" json:"disconnect_time,omitempty"`
	ConnectionState     *uint32 `protobuf:"varint,3,opt,name=connection_state,json=connectionState" json:"connection_state,omitempty"`
	ReasonCode          *uint32 `protobuf:"varint,4,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
	ReconnectDelay      *uint32 `protobuf:"varint,5,opt,name=reconnect_delay,json=reconnectDelay" json:"reconnect_delay,omitempty"`
	MatchDisconnectTime *uint32 `protobuf:"varint,6,opt,name=match_disconnect_time,json=matchDisconnectTime" json:"match_disconnect_time,omitempty"`
	MatchReconnectDelay *uint32 `protobuf:"varint,7,opt,name=match_reconnect_delay,json=matchReconnectDelay" json:"match_reconnect_delay,omitempty"`
}

func (x *CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection) Reset() {
	*x = CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection) ProtoMessage() {}

func (x *CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection) GetDisconnectTime() uint32 {
	if x != nil && x.DisconnectTime != nil {
		return *x.DisconnectTime
	}
	return 0
}

func (x *CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection) GetConnectionState() uint32 {
	if x != nil && x.ConnectionState != nil {
		return *x.ConnectionState
	}
	return 0
}

func (x *CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection) GetReasonCode() uint32 {
	if x != nil && x.ReasonCode != nil {
		return *x.ReasonCode
	}
	return 0
}

func (x *CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection) GetReconnectDelay() uint32 {
	if x != nil && x.ReconnectDelay != nil {
		return *x.ReconnectDelay
	}
	return 0
}

func (x *CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection) GetMatchDisconnectTime() uint32 {
	if x != nil && x.MatchDisconnectTime != nil {
		return *x.MatchDisconnectTime
	}
	return 0
}

func (x *CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection) GetMatchReconnectDelay() uint32 {
	if x != nil && x.MatchReconnectDelay != nil {
		return *x.MatchReconnectDelay
	}
	return 0
}

type CMsgServerSignoutData_DetailedStats_Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z *float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
}

func (x *CMsgServerSignoutData_DetailedStats_Position) Reset() {
	*x = CMsgServerSignoutData_DetailedStats_Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_DetailedStats_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_DetailedStats_Position) ProtoMessage() {}

func (x *CMsgServerSignoutData_DetailedStats_Position) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_DetailedStats_Position.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_DetailedStats_Position) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CMsgServerSignoutData_DetailedStats_Position) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_Position) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_Position) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type CMsgServerSignoutData_DetailedStats_TimeSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchTimeS *uint32                                                   `protobuf:"varint,1,opt,name=match_time_s,json=matchTimeS" json:"match_time_s,omitempty"`
	Stats      *CMsgServerSignoutData_DetailedStats_TimeSample_Stats     `protobuf:"bytes,2,opt,name=stats" json:"stats,omitempty"`
	GoldStats  *CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats `protobuf:"bytes,4,opt,name=gold_stats,json=goldStats" json:"gold_stats,omitempty"`
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample) Reset() {
	*x = CMsgServerSignoutData_DetailedStats_TimeSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_DetailedStats_TimeSample) ProtoMessage() {}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_DetailedStats_TimeSample.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_DetailedStats_TimeSample) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{12, 1}
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample) GetMatchTimeS() uint32 {
	if x != nil && x.MatchTimeS != nil {
		return *x.MatchTimeS
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample) GetStats() *CMsgServerSignoutData_DetailedStats_TimeSample_Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample) GetGoldStats() *CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats {
	if x != nil {
		return x.GoldStats
	}
	return nil
}

type CMsgServerSignoutData_DetailedStats_Objective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestroyedTimeS        *uint32                `protobuf:"varint,2,opt,name=destroyed_time_s,json=destroyedTimeS" json:"destroyed_time_s,omitempty"`
	CreepDamage           *uint32                `protobuf:"varint,4,opt,name=creep_damage,json=creepDamage" json:"creep_damage,omitempty"`
	CreepDamageMitigated  *uint32                `protobuf:"varint,5,opt,name=creep_damage_mitigated,json=creepDamageMitigated" json:"creep_damage_mitigated,omitempty"`
	PlayerDamage          *uint32                `protobuf:"varint,6,opt,name=player_damage,json=playerDamage" json:"player_damage,omitempty"`
	PlayerDamageMitigated *uint32                `protobuf:"varint,7,opt,name=player_damage_mitigated,json=playerDamageMitigated" json:"player_damage_mitigated,omitempty"`
	FirstDamageTimeS      *uint32                `protobuf:"varint,8,opt,name=first_damage_time_s,json=firstDamageTimeS" json:"first_damage_time_s,omitempty"`
	TeamObjectiveId       *ECitadelTeamObjective `protobuf:"varint,9,opt,name=team_objective_id,json=teamObjectiveId,enum=dota.ECitadelTeamObjective" json:"team_objective_id,omitempty"`
	Team                  *ECitadelLobbyTeam     `protobuf:"varint,10,opt,name=team,enum=dota.ECitadelLobbyTeam" json:"team,omitempty"`
}

func (x *CMsgServerSignoutData_DetailedStats_Objective) Reset() {
	*x = CMsgServerSignoutData_DetailedStats_Objective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_DetailedStats_Objective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_DetailedStats_Objective) ProtoMessage() {}

func (x *CMsgServerSignoutData_DetailedStats_Objective) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_DetailedStats_Objective.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_DetailedStats_Objective) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{12, 2}
}

func (x *CMsgServerSignoutData_DetailedStats_Objective) GetDestroyedTimeS() uint32 {
	if x != nil && x.DestroyedTimeS != nil {
		return *x.DestroyedTimeS
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_Objective) GetCreepDamage() uint32 {
	if x != nil && x.CreepDamage != nil {
		return *x.CreepDamage
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_Objective) GetCreepDamageMitigated() uint32 {
	if x != nil && x.CreepDamageMitigated != nil {
		return *x.CreepDamageMitigated
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_Objective) GetPlayerDamage() uint32 {
	if x != nil && x.PlayerDamage != nil {
		return *x.PlayerDamage
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_Objective) GetPlayerDamageMitigated() uint32 {
	if x != nil && x.PlayerDamageMitigated != nil {
		return *x.PlayerDamageMitigated
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_Objective) GetFirstDamageTimeS() uint32 {
	if x != nil && x.FirstDamageTimeS != nil {
		return *x.FirstDamageTimeS
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_Objective) GetTeamObjectiveId() ECitadelTeamObjective {
	if x != nil && x.TeamObjectiveId != nil {
		return *x.TeamObjectiveId
	}
	return ECitadelTeamObjective_k_eCitadelTeamObjective_Core
}

func (x *CMsgServerSignoutData_DetailedStats_Objective) GetTeam() ECitadelLobbyTeam {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return ECitadelLobbyTeam_k_ECitadelLobbyTeam_Team0
}

type CMsgServerSignoutData_DetailedStats_MidBoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamKilled     *ECitadelLobbyTeam `protobuf:"varint,1,opt,name=team_killed,json=teamKilled,enum=dota.ECitadelLobbyTeam" json:"team_killed,omitempty"`
	TeamClaimed    *ECitadelLobbyTeam `protobuf:"varint,2,opt,name=team_claimed,json=teamClaimed,enum=dota.ECitadelLobbyTeam" json:"team_claimed,omitempty"`
	DestroyedTimeS *uint32            `protobuf:"varint,3,opt,name=destroyed_time_s,json=destroyedTimeS" json:"destroyed_time_s,omitempty"`
}

func (x *CMsgServerSignoutData_DetailedStats_MidBoss) Reset() {
	*x = CMsgServerSignoutData_DetailedStats_MidBoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_DetailedStats_MidBoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_DetailedStats_MidBoss) ProtoMessage() {}

func (x *CMsgServerSignoutData_DetailedStats_MidBoss) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_DetailedStats_MidBoss.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_DetailedStats_MidBoss) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{12, 3}
}

func (x *CMsgServerSignoutData_DetailedStats_MidBoss) GetTeamKilled() ECitadelLobbyTeam {
	if x != nil && x.TeamKilled != nil {
		return *x.TeamKilled
	}
	return ECitadelLobbyTeam_k_ECitadelLobbyTeam_Team0
}

func (x *CMsgServerSignoutData_DetailedStats_MidBoss) GetTeamClaimed() ECitadelLobbyTeam {
	if x != nil && x.TeamClaimed != nil {
		return *x.TeamClaimed
	}
	return ECitadelLobbyTeam_k_ECitadelLobbyTeam_Team0
}

func (x *CMsgServerSignoutData_DetailedStats_MidBoss) GetDestroyedTimeS() uint32 {
	if x != nil && x.DestroyedTimeS != nil {
		return *x.DestroyedTimeS
	}
	return 0
}

type CMsgServerSignoutData_DetailedStats_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerSlot  *uint32                                           `protobuf:"varint,1,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	TimeSamples []*CMsgServerSignoutData_DetailedStats_TimeSample `protobuf:"bytes,3,rep,name=time_samples,json=timeSamples" json:"time_samples,omitempty"`
}

func (x *CMsgServerSignoutData_DetailedStats_Player) Reset() {
	*x = CMsgServerSignoutData_DetailedStats_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_DetailedStats_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_DetailedStats_Player) ProtoMessage() {}

func (x *CMsgServerSignoutData_DetailedStats_Player) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_DetailedStats_Player.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_DetailedStats_Player) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{12, 4}
}

func (x *CMsgServerSignoutData_DetailedStats_Player) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_Player) GetTimeSamples() []*CMsgServerSignoutData_DetailedStats_TimeSample {
	if x != nil {
		return x.TimeSamples
	}
	return nil
}

type CMsgServerSignoutData_DetailedStats_TimeSample_Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetWorth           *uint32 `protobuf:"varint,1,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	Kills              *uint32 `protobuf:"varint,2,opt,name=kills" json:"kills,omitempty"`
	Deaths             *uint32 `protobuf:"varint,3,opt,name=deaths" json:"deaths,omitempty"`
	Assists            *uint32 `protobuf:"varint,4,opt,name=assists" json:"assists,omitempty"`
	PossibleCreeps     *uint32 `protobuf:"varint,5,opt,name=possible_creeps,json=possibleCreeps" json:"possible_creeps,omitempty"`
	CreepKills         *uint32 `protobuf:"varint,6,opt,name=creep_kills,json=creepKills" json:"creep_kills,omitempty"`
	NeutralKills       *uint32 `protobuf:"varint,7,opt,name=neutral_kills,json=neutralKills" json:"neutral_kills,omitempty"`
	CreepDamage        *uint32 `protobuf:"varint,8,opt,name=creep_damage,json=creepDamage" json:"creep_damage,omitempty"`
	NeutralDamage      *uint32 `protobuf:"varint,9,opt,name=neutral_damage,json=neutralDamage" json:"neutral_damage,omitempty"`
	BossDamage         *uint32 `protobuf:"varint,10,opt,name=boss_damage,json=bossDamage" json:"boss_damage,omitempty"`
	PlayerDamage       *uint32 `protobuf:"varint,11,opt,name=player_damage,json=playerDamage" json:"player_damage,omitempty"`
	Denies             *uint32 `protobuf:"varint,12,opt,name=denies" json:"denies,omitempty"`
	PlayerHealing      *uint32 `protobuf:"varint,13,opt,name=player_healing,json=playerHealing" json:"player_healing,omitempty"`
	AbilityPoints      *uint32 `protobuf:"varint,14,opt,name=ability_points,json=abilityPoints" json:"ability_points,omitempty"`
	SelfHealing        *uint32 `protobuf:"varint,15,opt,name=self_healing,json=selfHealing" json:"self_healing,omitempty"`
	PlayerDamageTaken  *uint32 `protobuf:"varint,16,opt,name=player_damage_taken,json=playerDamageTaken" json:"player_damage_taken,omitempty"`
	MaxHealth          *uint32 `protobuf:"varint,17,opt,name=max_health,json=maxHealth" json:"max_health,omitempty"`
	WeaponPower        *uint32 `protobuf:"varint,18,opt,name=weapon_power,json=weaponPower" json:"weapon_power,omitempty"`
	TechPower          *uint32 `protobuf:"varint,19,opt,name=tech_power,json=techPower" json:"tech_power,omitempty"`
	ShotsHit           *uint32 `protobuf:"varint,20,opt,name=shots_hit,json=shotsHit" json:"shots_hit,omitempty"`
	ShotsMissed        *uint32 `protobuf:"varint,21,opt,name=shots_missed,json=shotsMissed" json:"shots_missed,omitempty"`
	DamageAbsorbed     *uint32 `protobuf:"varint,22,opt,name=damage_absorbed,json=damageAbsorbed" json:"damage_absorbed,omitempty"`
	AbsorptionProvided *uint32 `protobuf:"varint,23,opt,name=absorption_provided,json=absorptionProvided" json:"absorption_provided,omitempty"`
	HealPrevented      *uint32 `protobuf:"varint,26,opt,name=heal_prevented,json=healPrevented" json:"heal_prevented,omitempty"`
	HealLost           *uint32 `protobuf:"varint,27,opt,name=heal_lost,json=healLost" json:"heal_lost,omitempty"`
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) Reset() {
	*x = CMsgServerSignoutData_DetailedStats_TimeSample_Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_DetailedStats_TimeSample_Stats) ProtoMessage() {}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_DetailedStats_TimeSample_Stats.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_DetailedStats_TimeSample_Stats) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{12, 1, 0}
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetPossibleCreeps() uint32 {
	if x != nil && x.PossibleCreeps != nil {
		return *x.PossibleCreeps
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetCreepKills() uint32 {
	if x != nil && x.CreepKills != nil {
		return *x.CreepKills
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetNeutralKills() uint32 {
	if x != nil && x.NeutralKills != nil {
		return *x.NeutralKills
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetCreepDamage() uint32 {
	if x != nil && x.CreepDamage != nil {
		return *x.CreepDamage
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetNeutralDamage() uint32 {
	if x != nil && x.NeutralDamage != nil {
		return *x.NeutralDamage
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetBossDamage() uint32 {
	if x != nil && x.BossDamage != nil {
		return *x.BossDamage
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetPlayerDamage() uint32 {
	if x != nil && x.PlayerDamage != nil {
		return *x.PlayerDamage
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetDenies() uint32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetPlayerHealing() uint32 {
	if x != nil && x.PlayerHealing != nil {
		return *x.PlayerHealing
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetAbilityPoints() uint32 {
	if x != nil && x.AbilityPoints != nil {
		return *x.AbilityPoints
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetSelfHealing() uint32 {
	if x != nil && x.SelfHealing != nil {
		return *x.SelfHealing
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetPlayerDamageTaken() uint32 {
	if x != nil && x.PlayerDamageTaken != nil {
		return *x.PlayerDamageTaken
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetMaxHealth() uint32 {
	if x != nil && x.MaxHealth != nil {
		return *x.MaxHealth
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetWeaponPower() uint32 {
	if x != nil && x.WeaponPower != nil {
		return *x.WeaponPower
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetTechPower() uint32 {
	if x != nil && x.TechPower != nil {
		return *x.TechPower
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetShotsHit() uint32 {
	if x != nil && x.ShotsHit != nil {
		return *x.ShotsHit
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetShotsMissed() uint32 {
	if x != nil && x.ShotsMissed != nil {
		return *x.ShotsMissed
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetDamageAbsorbed() uint32 {
	if x != nil && x.DamageAbsorbed != nil {
		return *x.DamageAbsorbed
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetAbsorptionProvided() uint32 {
	if x != nil && x.AbsorptionProvided != nil {
		return *x.AbsorptionProvided
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetHealPrevented() uint32 {
	if x != nil && x.HealPrevented != nil {
		return *x.HealPrevented
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_Stats) GetHealLost() uint32 {
	if x != nil && x.HealLost != nil {
		return *x.HealLost
	}
	return 0
}

type CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player          *uint32 `protobuf:"varint,1,opt,name=player" json:"player,omitempty"`
	PlayerOrb       *uint32 `protobuf:"varint,2,opt,name=player_orb,json=playerOrb" json:"player_orb,omitempty"`
	LaneCreepOrb    *uint32 `protobuf:"varint,3,opt,name=lane_creep_orb,json=laneCreepOrb" json:"lane_creep_orb,omitempty"`
	NeutralCreepOrb *uint32 `protobuf:"varint,4,opt,name=neutral_creep_orb,json=neutralCreepOrb" json:"neutral_creep_orb,omitempty"`
	Boss            *uint32 `protobuf:"varint,5,opt,name=boss" json:"boss,omitempty"`
	BossOrb         *uint32 `protobuf:"varint,6,opt,name=boss_orb,json=bossOrb" json:"boss_orb,omitempty"`
	Treasure        *uint32 `protobuf:"varint,7,opt,name=treasure" json:"treasure,omitempty"`
	Denied          *uint32 `protobuf:"varint,8,opt,name=denied" json:"denied,omitempty"`
	DeathLoss       *uint32 `protobuf:"varint,9,opt,name=death_loss,json=deathLoss" json:"death_loss,omitempty"`
	LaneCreep       *uint32 `protobuf:"varint,10,opt,name=lane_creep,json=laneCreep" json:"lane_creep,omitempty"`
	NeutralCreep    *uint32 `protobuf:"varint,11,opt,name=neutral_creep,json=neutralCreep" json:"neutral_creep,omitempty"`
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats) Reset() {
	*x = CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats) ProtoMessage() {}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{12, 1, 1}
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats) GetPlayer() uint32 {
	if x != nil && x.Player != nil {
		return *x.Player
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats) GetPlayerOrb() uint32 {
	if x != nil && x.PlayerOrb != nil {
		return *x.PlayerOrb
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats) GetLaneCreepOrb() uint32 {
	if x != nil && x.LaneCreepOrb != nil {
		return *x.LaneCreepOrb
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats) GetNeutralCreepOrb() uint32 {
	if x != nil && x.NeutralCreepOrb != nil {
		return *x.NeutralCreepOrb
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats) GetBoss() uint32 {
	if x != nil && x.Boss != nil {
		return *x.Boss
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats) GetBossOrb() uint32 {
	if x != nil && x.BossOrb != nil {
		return *x.BossOrb
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats) GetTreasure() uint32 {
	if x != nil && x.Treasure != nil {
		return *x.Treasure
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats) GetDenied() uint32 {
	if x != nil && x.Denied != nil {
		return *x.Denied
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats) GetDeathLoss() uint32 {
	if x != nil && x.DeathLoss != nil {
		return *x.DeathLoss
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats) GetLaneCreep() uint32 {
	if x != nil && x.LaneCreep != nil {
		return *x.LaneCreep
	}
	return 0
}

func (x *CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats) GetNeutralCreep() uint32 {
	if x != nil && x.NeutralCreep != nil {
		return *x.NeutralCreep
	}
	return 0
}

type CMsgServerSignoutData_BookRewards_BookReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookId   *uint32 `protobuf:"varint,1,opt,name=book_id,json=bookId" json:"book_id,omitempty"`
	XpReward *uint32 `protobuf:"varint,2,opt,name=xp_reward,json=xpReward" json:"xp_reward,omitempty"`
}

func (x *CMsgServerSignoutData_BookRewards_BookReward) Reset() {
	*x = CMsgServerSignoutData_BookRewards_BookReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_BookRewards_BookReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_BookRewards_BookReward) ProtoMessage() {}

func (x *CMsgServerSignoutData_BookRewards_BookReward) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_BookRewards_BookReward.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_BookRewards_BookReward) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{14, 0}
}

func (x *CMsgServerSignoutData_BookRewards_BookReward) GetBookId() uint32 {
	if x != nil && x.BookId != nil {
		return *x.BookId
	}
	return 0
}

func (x *CMsgServerSignoutData_BookRewards_BookReward) GetXpReward() uint32 {
	if x != nil && x.XpReward != nil {
		return *x.XpReward
	}
	return 0
}

type CMsgServerSignoutData_BookRewards_AccountRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  *uint32                                       `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	BookReward *CMsgServerSignoutData_BookRewards_BookReward `protobuf:"bytes,2,opt,name=book_reward,json=bookReward" json:"book_reward,omitempty"`
}

func (x *CMsgServerSignoutData_BookRewards_AccountRewards) Reset() {
	*x = CMsgServerSignoutData_BookRewards_AccountRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_BookRewards_AccountRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_BookRewards_AccountRewards) ProtoMessage() {}

func (x *CMsgServerSignoutData_BookRewards_AccountRewards) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_BookRewards_AccountRewards.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_BookRewards_AccountRewards) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{14, 1}
}

func (x *CMsgServerSignoutData_BookRewards_AccountRewards) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerSignoutData_BookRewards_AccountRewards) GetBookReward() *CMsgServerSignoutData_BookRewards_BookReward {
	if x != nil {
		return x.BookReward
	}
	return nil
}

type CMsgServerSignoutData_AccountStatChanges_Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId *uint32                   `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	StatId *uint32                   `protobuf:"varint,2,opt,name=stat_id,json=statId" json:"stat_id,omitempty"`
	Value  *uint32                   `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
	Medal  *ECitadelAccountStatMedal `protobuf:"varint,4,opt,name=medal,enum=dota.ECitadelAccountStatMedal" json:"medal,omitempty"`
}

func (x *CMsgServerSignoutData_AccountStatChanges_Stat) Reset() {
	*x = CMsgServerSignoutData_AccountStatChanges_Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_AccountStatChanges_Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_AccountStatChanges_Stat) ProtoMessage() {}

func (x *CMsgServerSignoutData_AccountStatChanges_Stat) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_AccountStatChanges_Stat.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_AccountStatChanges_Stat) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CMsgServerSignoutData_AccountStatChanges_Stat) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgServerSignoutData_AccountStatChanges_Stat) GetStatId() uint32 {
	if x != nil && x.StatId != nil {
		return *x.StatId
	}
	return 0
}

func (x *CMsgServerSignoutData_AccountStatChanges_Stat) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *CMsgServerSignoutData_AccountStatChanges_Stat) GetMedal() ECitadelAccountStatMedal {
	if x != nil && x.Medal != nil {
		return *x.Medal
	}
	return ECitadelAccountStatMedal_k_eNone
}

type CMsgServerSignoutData_AccountStatChanges_AccountStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32                                          `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Stats     []*CMsgServerSignoutData_AccountStatChanges_Stat `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
}

func (x *CMsgServerSignoutData_AccountStatChanges_AccountStats) Reset() {
	*x = CMsgServerSignoutData_AccountStatChanges_AccountStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_AccountStatChanges_AccountStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_AccountStatChanges_AccountStats) ProtoMessage() {}

func (x *CMsgServerSignoutData_AccountStatChanges_AccountStats) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_AccountStatChanges_AccountStats.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_AccountStatChanges_AccountStats) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{15, 1}
}

func (x *CMsgServerSignoutData_AccountStatChanges_AccountStats) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerSignoutData_AccountStatChanges_AccountStats) GetStats() []*CMsgServerSignoutData_AccountStatChanges_Stat {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CMsgServerSignoutData_PlayerChat_ChatLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerSlot *uint32  `protobuf:"varint,1,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	GameTime   *float32 `protobuf:"fixed32,2,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	TeamOnly   *bool    `protobuf:"varint,3,opt,name=team_only,json=teamOnly" json:"team_only,omitempty"`
	ChatLine   *string  `protobuf:"bytes,4,opt,name=chat_line,json=chatLine" json:"chat_line,omitempty"`
}

func (x *CMsgServerSignoutData_PlayerChat_ChatLine) Reset() {
	*x = CMsgServerSignoutData_PlayerChat_ChatLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_PlayerChat_ChatLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_PlayerChat_ChatLine) ProtoMessage() {}

func (x *CMsgServerSignoutData_PlayerChat_ChatLine) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_PlayerChat_ChatLine.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_PlayerChat_ChatLine) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{16, 0}
}

func (x *CMsgServerSignoutData_PlayerChat_ChatLine) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgServerSignoutData_PlayerChat_ChatLine) GetGameTime() float32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CMsgServerSignoutData_PlayerChat_ChatLine) GetTeamOnly() bool {
	if x != nil && x.TeamOnly != nil {
		return *x.TeamOnly
	}
	return false
}

func (x *CMsgServerSignoutData_PlayerChat_ChatLine) GetChatLine() string {
	if x != nil && x.ChatLine != nil {
		return *x.ChatLine
	}
	return ""
}

type CMsgServerSignoutData_PenalizedPlayers_Penalty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  *uint32                                                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Reason     *CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason `protobuf:"varint,2,opt,name=reason,enum=dota.CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason" json:"reason,omitempty"`
	MatchTimeS *uint32                                                `protobuf:"varint,3,opt,name=match_time_s,json=matchTimeS" json:"match_time_s,omitempty"`
	TimeStamp  *uint32                                                `protobuf:"varint,4,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
}

func (x *CMsgServerSignoutData_PenalizedPlayers_Penalty) Reset() {
	*x = CMsgServerSignoutData_PenalizedPlayers_Penalty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_PenalizedPlayers_Penalty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_PenalizedPlayers_Penalty) ProtoMessage() {}

func (x *CMsgServerSignoutData_PenalizedPlayers_Penalty) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_PenalizedPlayers_Penalty.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_PenalizedPlayers_Penalty) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{17, 0}
}

func (x *CMsgServerSignoutData_PenalizedPlayers_Penalty) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerSignoutData_PenalizedPlayers_Penalty) GetReason() CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return CMsgServerSignoutData_PenalizedPlayers_k_EPenaltyReason_Abandon
}

func (x *CMsgServerSignoutData_PenalizedPlayers_Penalty) GetMatchTimeS() uint32 {
	if x != nil && x.MatchTimeS != nil {
		return *x.MatchTimeS
	}
	return 0
}

func (x *CMsgServerSignoutData_PenalizedPlayers_Penalty) GetTimeStamp() uint32 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

type CMsgMatchData_PlayerItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId          *uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	GameTimeS       *uint32 `protobuf:"varint,2,opt,name=game_time_s,json=gameTimeS" json:"game_time_s,omitempty"`
	UpgradeId       *uint32 `protobuf:"varint,3,opt,name=upgrade_id,json=upgradeId" json:"upgrade_id,omitempty"`
	SoldTimeS       *uint32 `protobuf:"varint,4,opt,name=sold_time_s,json=soldTimeS" json:"sold_time_s,omitempty"`
	Flags           *uint32 `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
	ImbuedAbilityId *uint32 `protobuf:"varint,6,opt,name=imbued_ability_id,json=imbuedAbilityId" json:"imbued_ability_id,omitempty"`
}

func (x *CMsgMatchData_PlayerItem) Reset() {
	*x = CMsgMatchData_PlayerItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchData_PlayerItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchData_PlayerItem) ProtoMessage() {}

func (x *CMsgMatchData_PlayerItem) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchData_PlayerItem.ProtoReflect.Descriptor instead.
func (*CMsgMatchData_PlayerItem) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{18, 0}
}

func (x *CMsgMatchData_PlayerItem) GetItemId() uint32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CMsgMatchData_PlayerItem) GetGameTimeS() uint32 {
	if x != nil && x.GameTimeS != nil {
		return *x.GameTimeS
	}
	return 0
}

func (x *CMsgMatchData_PlayerItem) GetUpgradeId() uint32 {
	if x != nil && x.UpgradeId != nil {
		return *x.UpgradeId
	}
	return 0
}

func (x *CMsgMatchData_PlayerItem) GetSoldTimeS() uint32 {
	if x != nil && x.SoldTimeS != nil {
		return *x.SoldTimeS
	}
	return 0
}

func (x *CMsgMatchData_PlayerItem) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgMatchData_PlayerItem) GetImbuedAbilityId() uint32 {
	if x != nil && x.ImbuedAbilityId != nil {
		return *x.ImbuedAbilityId
	}
	return 0
}

type CMsgMatchData_PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId                *uint32                     `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Team                     *ECitadelLobbyTeam          `protobuf:"varint,2,opt,name=team,enum=dota.ECitadelLobbyTeam" json:"team,omitempty"`
	PlayerSlot               *uint32                     `protobuf:"varint,3,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	PlayerMmr                *uint32                     `protobuf:"varint,5,opt,name=player_mmr,json=playerMmr" json:"player_mmr,omitempty"`
	PlayerUncertainty        *uint32                     `protobuf:"varint,6,opt,name=player_uncertainty,json=playerUncertainty" json:"player_uncertainty,omitempty"`
	HeroId                   *uint32                     `protobuf:"varint,7,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Kills                    *uint32                     `protobuf:"varint,8,opt,name=kills" json:"kills,omitempty"`
	Deaths                   *uint32                     `protobuf:"varint,9,opt,name=deaths" json:"deaths,omitempty"`
	NetWorth                 *uint32                     `protobuf:"varint,10,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	Assists                  *uint32                     `protobuf:"varint,11,opt,name=assists" json:"assists,omitempty"`
	HeroMmr                  *uint32                     `protobuf:"varint,12,opt,name=hero_mmr,json=heroMmr" json:"hero_mmr,omitempty"`
	Items                    []*CMsgMatchData_PlayerItem `protobuf:"bytes,13,rep,name=items" json:"items,omitempty"`
	Gpm_10Min                *uint32                     `protobuf:"varint,14,opt,name=gpm_10min,json=gpm10min" json:"gpm_10min,omitempty"`
	Gpm_15Min                *uint32                     `protobuf:"varint,15,opt,name=gpm_15min,json=gpm15min" json:"gpm_15min,omitempty"`
	Gpm_20Min                *uint32                     `protobuf:"varint,16,opt,name=gpm_20min,json=gpm20min" json:"gpm_20min,omitempty"`
	Gpm_25Min                *uint32                     `protobuf:"varint,17,opt,name=gpm_25min,json=gpm25min" json:"gpm_25min,omitempty"`
	Gpm_30Min                *uint32                     `protobuf:"varint,18,opt,name=gpm_30min,json=gpm30min" json:"gpm_30min,omitempty"`
	Gpm_35Min                *uint32                     `protobuf:"varint,19,opt,name=gpm_35min,json=gpm35min" json:"gpm_35min,omitempty"`
	GpmEnd                   *uint32                     `protobuf:"varint,20,opt,name=gpm_end,json=gpmEnd" json:"gpm_end,omitempty"`
	LastHits                 *uint32                     `protobuf:"varint,21,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies                   *uint32                     `protobuf:"varint,22,opt,name=denies" json:"denies,omitempty"`
	AbilityPoints            *uint32                     `protobuf:"varint,23,opt,name=ability_points,json=abilityPoints" json:"ability_points,omitempty"`
	Level                    *uint32                     `protobuf:"varint,24,opt,name=level" json:"level,omitempty"`
	AssignedLane             *uint32                     `protobuf:"varint,25,opt,name=assigned_lane,json=assignedLane" json:"assigned_lane,omitempty"`
	PartyIndex               *uint32                     `protobuf:"varint,26,opt,name=party_index,json=partyIndex" json:"party_index,omitempty"`
	Platform                 *EGCPlatform                `protobuf:"varint,27,opt,name=platform,enum=dota.EGCPlatform" json:"platform,omitempty"`
	AbilityDamage            *uint32                     `protobuf:"varint,28,opt,name=ability_damage,json=abilityDamage" json:"ability_damage,omitempty"`
	BulletDamage             *uint32                     `protobuf:"varint,29,opt,name=bullet_damage,json=bulletDamage" json:"bullet_damage,omitempty"`
	HeroBulletsHit           *uint32                     `protobuf:"varint,30,opt,name=hero_bullets_hit,json=heroBulletsHit" json:"hero_bullets_hit,omitempty"`
	HeroBulletsHitCrit       *uint32                     `protobuf:"varint,31,opt,name=hero_bullets_hit_crit,json=heroBulletsHitCrit" json:"hero_bullets_hit_crit,omitempty"`
	PlayerHealing            *uint32                     `protobuf:"varint,32,opt,name=player_healing,json=playerHealing" json:"player_healing,omitempty"`
	HeroBulletsFired         *uint32                     `protobuf:"varint,33,opt,name=hero_bullets_fired,json=heroBulletsFired" json:"hero_bullets_fired,omitempty"`
	HeroIncomingBulletsFired *uint32                     `protobuf:"varint,34,opt,name=hero_incoming_bullets_fired,json=heroIncomingBulletsFired" json:"hero_incoming_bullets_fired,omitempty"`
	HeroIncomingBulletsHit   *uint32                     `protobuf:"varint,35,opt,name=hero_incoming_bullets_hit,json=heroIncomingBulletsHit" json:"hero_incoming_bullets_hit,omitempty"`
	HeroIncomingBulletsCrit  *uint32                     `protobuf:"varint,36,opt,name=hero_incoming_bullets_crit,json=heroIncomingBulletsCrit" json:"hero_incoming_bullets_crit,omitempty"`
	TimeDeadS                *uint32                     `protobuf:"varint,37,opt,name=time_dead_s,json=timeDeadS" json:"time_dead_s,omitempty"`
	PlayerBulletDamage       *uint32                     `protobuf:"varint,38,opt,name=player_bullet_damage,json=playerBulletDamage" json:"player_bullet_damage,omitempty"`
	PlayerAbilityDamage      *uint32                     `protobuf:"varint,39,opt,name=player_ability_damage,json=playerAbilityDamage" json:"player_ability_damage,omitempty"`
	PlayerMeleeDamage        *uint32                     `protobuf:"varint,40,opt,name=player_melee_damage,json=playerMeleeDamage" json:"player_melee_damage,omitempty"`
	AbandonMatchTimeS        *uint32                     `protobuf:"varint,41,opt,name=abandon_match_time_s,json=abandonMatchTimeS" json:"abandon_match_time_s,omitempty"`
	AbandonTimeStamp         *uint32                     `protobuf:"varint,42,opt,name=abandon_time_stamp,json=abandonTimeStamp" json:"abandon_time_stamp,omitempty"`
}

func (x *CMsgMatchData_PlayerInfo) Reset() {
	*x = CMsgMatchData_PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchData_PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchData_PlayerInfo) ProtoMessage() {}

func (x *CMsgMatchData_PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchData_PlayerInfo.ProtoReflect.Descriptor instead.
func (*CMsgMatchData_PlayerInfo) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{18, 1}
}

func (x *CMsgMatchData_PlayerInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetTeam() ECitadelLobbyTeam {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return ECitadelLobbyTeam_k_ECitadelLobbyTeam_Team0
}

func (x *CMsgMatchData_PlayerInfo) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetPlayerMmr() uint32 {
	if x != nil && x.PlayerMmr != nil {
		return *x.PlayerMmr
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetPlayerUncertainty() uint32 {
	if x != nil && x.PlayerUncertainty != nil {
		return *x.PlayerUncertainty
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetHeroMmr() uint32 {
	if x != nil && x.HeroMmr != nil {
		return *x.HeroMmr
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetItems() []*CMsgMatchData_PlayerItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CMsgMatchData_PlayerInfo) GetGpm_10Min() uint32 {
	if x != nil && x.Gpm_10Min != nil {
		return *x.Gpm_10Min
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetGpm_15Min() uint32 {
	if x != nil && x.Gpm_15Min != nil {
		return *x.Gpm_15Min
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetGpm_20Min() uint32 {
	if x != nil && x.Gpm_20Min != nil {
		return *x.Gpm_20Min
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetGpm_25Min() uint32 {
	if x != nil && x.Gpm_25Min != nil {
		return *x.Gpm_25Min
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetGpm_30Min() uint32 {
	if x != nil && x.Gpm_30Min != nil {
		return *x.Gpm_30Min
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetGpm_35Min() uint32 {
	if x != nil && x.Gpm_35Min != nil {
		return *x.Gpm_35Min
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetGpmEnd() uint32 {
	if x != nil && x.GpmEnd != nil {
		return *x.GpmEnd
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetLastHits() uint32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetDenies() uint32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetAbilityPoints() uint32 {
	if x != nil && x.AbilityPoints != nil {
		return *x.AbilityPoints
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetAssignedLane() uint32 {
	if x != nil && x.AssignedLane != nil {
		return *x.AssignedLane
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetPartyIndex() uint32 {
	if x != nil && x.PartyIndex != nil {
		return *x.PartyIndex
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetPlatform() EGCPlatform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return EGCPlatform_k_eGCPlatform_None
}

func (x *CMsgMatchData_PlayerInfo) GetAbilityDamage() uint32 {
	if x != nil && x.AbilityDamage != nil {
		return *x.AbilityDamage
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetBulletDamage() uint32 {
	if x != nil && x.BulletDamage != nil {
		return *x.BulletDamage
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetHeroBulletsHit() uint32 {
	if x != nil && x.HeroBulletsHit != nil {
		return *x.HeroBulletsHit
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetHeroBulletsHitCrit() uint32 {
	if x != nil && x.HeroBulletsHitCrit != nil {
		return *x.HeroBulletsHitCrit
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetPlayerHealing() uint32 {
	if x != nil && x.PlayerHealing != nil {
		return *x.PlayerHealing
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetHeroBulletsFired() uint32 {
	if x != nil && x.HeroBulletsFired != nil {
		return *x.HeroBulletsFired
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetHeroIncomingBulletsFired() uint32 {
	if x != nil && x.HeroIncomingBulletsFired != nil {
		return *x.HeroIncomingBulletsFired
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetHeroIncomingBulletsHit() uint32 {
	if x != nil && x.HeroIncomingBulletsHit != nil {
		return *x.HeroIncomingBulletsHit
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetHeroIncomingBulletsCrit() uint32 {
	if x != nil && x.HeroIncomingBulletsCrit != nil {
		return *x.HeroIncomingBulletsCrit
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetTimeDeadS() uint32 {
	if x != nil && x.TimeDeadS != nil {
		return *x.TimeDeadS
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetPlayerBulletDamage() uint32 {
	if x != nil && x.PlayerBulletDamage != nil {
		return *x.PlayerBulletDamage
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetPlayerAbilityDamage() uint32 {
	if x != nil && x.PlayerAbilityDamage != nil {
		return *x.PlayerAbilityDamage
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetPlayerMeleeDamage() uint32 {
	if x != nil && x.PlayerMeleeDamage != nil {
		return *x.PlayerMeleeDamage
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetAbandonMatchTimeS() uint32 {
	if x != nil && x.AbandonMatchTimeS != nil {
		return *x.AbandonMatchTimeS
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetAbandonTimeStamp() uint32 {
	if x != nil && x.AbandonTimeStamp != nil {
		return *x.AbandonTimeStamp
	}
	return 0
}

type CMsgServerToGCAbandonMatch_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AdditionalData *uint64 `protobuf:"varint,2,opt,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
	HeroId         *uint32 `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
}

func (x *CMsgServerToGCAbandonMatch_Player) Reset() {
	*x = CMsgServerToGCAbandonMatch_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_server_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCAbandonMatch_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCAbandonMatch_Player) ProtoMessage() {}

func (x *CMsgServerToGCAbandonMatch_Player) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_server_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCAbandonMatch_Player.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCAbandonMatch_Player) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_server_proto_rawDescGZIP(), []int{29, 0}
}

func (x *CMsgServerToGCAbandonMatch_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch_Player) GetAdditionalData() uint64 {
	if x != nil && x.AdditionalData != nil {
		return *x.AdditionalData
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch_Player) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

var File_citadel_gcmessages_server_proto protoreflect.FileDescriptor

var file_citadel_gcmessages_server_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x64, 0x6f, 0x74, 0x61, 0x1a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x63,
	0x73, 0x64, 0x6b, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x5f, 0x67, 0x63,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xda, 0x06, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x72, 0x61, 0x73, 0x68, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x61, 0x76, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x72, 0x61, 0x73, 0x68, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x40, 0x0a, 0x06, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x1a, 0xc4, 0x02, 0x0a, 0x08,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x42, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x72, 0x61, 0x73, 0x68, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x77, 0x61, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x22, 0xf2, 0x01, 0x0a, 0x1a, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x4d,
	0x52, 0x12, 0x41, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4d, 0x4d, 0x52, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x1a, 0x90, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6d, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x6d, 0x72, 0x12, 0x2d, 0x0a,
	0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69,
	0x6e, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x68, 0x65, 0x72, 0x6f, 0x5f, 0x6d, 0x6d, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x68, 0x65, 0x72, 0x6f, 0x4d, 0x6d, 0x72, 0x22, 0xd3, 0x01, 0x0a, 0x1b, 0x43, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6d, 0x72, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x6d, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc1, 0x01,
	0x0a, 0x20, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6f, 0x73, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x07, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x73, 0x1a, 0x4e, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x41, 0x0a, 0x19, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x22, 0xb7, 0x01, 0x0a, 0x1c, 0x43, 0x53, 0x4f, 0x43, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x65, 0x66, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfd,
	0x08, 0x0a, 0x1b, 0x43, 0x53, 0x4f, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x3b,
	0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0d, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x61, 0x6c, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42,
	0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x4f, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x53, 0x4f, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x67, 0x63, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f,
	0x65, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x0d, 0x62, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x55, 0x72, 0x6c, 0x1a, 0xcb, 0x02, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x45, 0x47, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x48, 0x0a, 0x09, 0x61, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x4f, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x2e,
	0x45, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x73, 0x52, 0x08, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x73, 0x1a, 0x34, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x23, 0x0a, 0x09, 0x45, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x44, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x4b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6e, 0x64, 0x61, 0x10, 0x01, 0x22, 0xff,
	0x0a, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x66, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x65, 0x61, 0x6b,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x65, 0x61, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x32,
	0x0a, 0x16, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x53, 0x12, 0x30, 0x0a, 0x15, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x39, 0x35, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x39, 0x35, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x53, 0x12, 0x32, 0x0a, 0x16, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x41,
	0x76, 0x67, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x12, 0x39, 0x0a, 0x1a, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x39, 0x35, 0x5f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x5f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x39, 0x35, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x53, 0x12, 0x3b, 0x0a, 0x1b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x6c,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x5f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x76, 0x67, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53,
	0x12, 0x30, 0x0a, 0x15, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x38,
	0x30, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x38, 0x30, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x53, 0x12, 0x30, 0x0a, 0x15, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x39, 0x39, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x39, 0x39, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x53, 0x12, 0x5f, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x65,
	0x72, 0x66, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72,
	0x66, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x1a, 0x68, 0x0a, 0x0b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x52, 0x75, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x75, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x52, 0x75, 0x6e, 0x73, 0x1a,
	0xf7, 0x03, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x66, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x1e,
	0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x76, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x61, 0x76, 0x67, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x76, 0x67, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x61,
	0x76, 0x67, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x11, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x10, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x58, 0x0a, 0x0b, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x0a, 0x6c,
	0x6f, 0x6e, 0x67, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0f, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x0d, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x65, 0x61, 0x6b, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0xc4, 0x01, 0x0a, 0x10, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x66, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6c, 0x6f,
	0x6e, 0x67, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x50,
	0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x65, 0x72,
	0x66, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x22, 0x8a, 0x03, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x6f, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x30, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x12,
	0x20, 0x0a, 0x0c, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x31, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x54, 0x65, 0x61, 0x6d,
	0x31, 0x12, 0x27, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x74, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x12, 0x27, 0x0a, 0x10, 0x6e, 0x65,
	0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x31, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x54, 0x65,
	0x61, 0x6d, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x30, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x4d, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x22, 0xcd, 0x01,
	0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x75,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xb5, 0x01,
	0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x45, 0x47, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f,
	0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0xd1, 0x03, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x69,
	0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xbd, 0x02, 0x0a, 0x16, 0x43, 0x4d,
	0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0xbc, 0x13, 0x0a, 0x23, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x5f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x53, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x5f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x08, 0x6d,
	0x69, 0x64, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4d, 0x69, 0x64, 0x42, 0x6f, 0x73, 0x73,
	0x52, 0x07, 0x6d, 0x69, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x1a, 0x34, 0x0a, 0x08, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x1a,
	0xa2, 0x0b, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x12, 0x50, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x5d, 0x0a, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x5f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x47, 0x6f, 0x6c,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x1a, 0xe3, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65,
	0x65, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x65, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x65, 0x70, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x65, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65,
	0x75, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x65, 0x70, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x65, 0x70, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x65, 0x75, 0x74,
	0x72, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x73,
	0x73, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x62, 0x6f, 0x73, 0x73, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x68, 0x65,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x6c,
	0x66, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65,
	0x63, 0x68, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x65, 0x63, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x48, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x5f,
	0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x62, 0x73, 0x6f, 0x72, 0x62,
	0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x62, 0x73, 0x6f, 0x72, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x61, 0x62, 0x73, 0x6f, 0x72, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65, 0x61,
	0x6c, 0x50, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65,
	0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68,
	0x65, 0x61, 0x6c, 0x4c, 0x6f, 0x73, 0x74, 0x1a, 0xda, 0x02, 0x0a, 0x09, 0x47, 0x6f, 0x6c, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x62, 0x12, 0x24, 0x0a, 0x0e,
	0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x65, 0x70, 0x5f, 0x6f, 0x72, 0x62, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x65, 0x70, 0x4f,
	0x72, 0x62, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x72,
	0x65, 0x65, 0x70, 0x5f, 0x6f, 0x72, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e,
	0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x65, 0x70, 0x4f, 0x72, 0x62, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x6f, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x6f,
	0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x6f, 0x72, 0x62, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x6f, 0x73, 0x73, 0x4f, 0x72, 0x62, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6e,
	0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x65, 0x61, 0x74, 0x68, 0x4c, 0x6f, 0x73, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x65, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x65, 0x70, 0x12,
	0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x65, 0x70,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x43,
	0x72, 0x65, 0x65, 0x70, 0x1a, 0x90, 0x03, 0x0a, 0x09, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x65, 0x70, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x65, 0x70, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x65, 0x70, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x63, 0x72, 0x65, 0x65, 0x70, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x12, 0x47, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x61, 0x6d,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x1a, 0xa9, 0x01, 0x0a, 0x07, 0x4d, 0x69, 0x64, 0x42,
	0x6f, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6b, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a,
	0x0c, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x0b, 0x74, 0x65,
	0x61, 0x6d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x1a, 0x82, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12,
	0x57, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x5f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0xb6, 0x09, 0x0a, 0x1e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x5f, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x39, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x61, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x52, 0x12, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x02, 0x52, 0x15, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x11, 0x6d, 0x61, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x02, 0x52, 0x19, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x02, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x02, 0x52, 0x11, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x2b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x02, 0x52, 0x25, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x52, 0x0a, 0x27, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x21, 0x6d, 0x61, 0x78, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x0f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x53, 0x77, 0x61,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x02, 0x52, 0x16, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x12, 0x6d, 0x61, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0f,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x02, 0x52, 0x1a, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x02, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xcf, 0x02, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x42, 0x6f, 0x6f, 0x6b,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x5f, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x42, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x42, 0x0a, 0x0a, 0x42, 0x6f, 0x6f, 0x6b,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x78, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x78, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x1a, 0x84, 0x01, 0x0a,
	0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x53,
	0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x5f, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x42, 0x6f, 0x6f,
	0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x22, 0x8d, 0x03, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x60, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x1a, 0x84, 0x01, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65,
	0x72, 0x6f, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x4d, 0x65, 0x64,
	0x61, 0x6c, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x1a, 0x78, 0x0a, 0x0c, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x1a, 0x82, 0x01, 0x0a, 0x08, 0x43, 0x68, 0x61,
	0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0xa6, 0x03,
	0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x61, 0x0a, 0x11, 0x70, 0x65, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x5f, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x2e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x10, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0xbe, 0x01, 0x0a, 0x07,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x5f, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x58, 0x0a, 0x0e,
	0x45, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24,
	0x6b, 0x5f, 0x45, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x6f,
	0x4c, 0x6f, 0x6e, 0x67, 0x10, 0x01, 0x22, 0xb9, 0x14, 0x0a, 0x0d, 0x43, 0x4d, 0x73, 0x67, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x12, 0x3d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x45, 0x6e, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45,
	0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x0b, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x38, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45,
	0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x30, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x4d, 0x61, 0x73, 0x6b,
	0x54, 0x65, 0x61, 0x6d, 0x30, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x4d, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x6d, 0x70, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x6d, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62, 0x61, 0x6e,
	0x64, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x61, 0x66, 0x65, 0x54,
	0x6f, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x74, 0x65, 0x61, 0x6d, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x1a, 0xc6, 0x01, 0x0a, 0x0a,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6d, 0x62, 0x75,
	0x65, 0x64, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6d, 0x62, 0x75, 0x65, 0x64, 0x41, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x1a, 0x8e, 0x0c, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6d, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x6d, 0x72, 0x12,
	0x2d, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74,
	0x61, 0x69, 0x6e, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64,
	0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72,
	0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x68, 0x65, 0x72, 0x6f, 0x5f, 0x6d, 0x6d, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x68, 0x65, 0x72, 0x6f, 0x4d, 0x6d, 0x72, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x70, 0x6d, 0x5f, 0x31, 0x30, 0x6d, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x67, 0x70, 0x6d, 0x31, 0x30, 0x6d, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x70,
	0x6d, 0x5f, 0x31, 0x35, 0x6d, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67,
	0x70, 0x6d, 0x31, 0x35, 0x6d, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x70, 0x6d, 0x5f, 0x32,
	0x30, 0x6d, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x70, 0x6d, 0x32,
	0x30, 0x6d, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x70, 0x6d, 0x5f, 0x32, 0x35, 0x6d, 0x69,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x70, 0x6d, 0x32, 0x35, 0x6d, 0x69,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x70, 0x6d, 0x5f, 0x33, 0x30, 0x6d, 0x69, 0x6e, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x70, 0x6d, 0x33, 0x30, 0x6d, 0x69, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x70, 0x6d, 0x5f, 0x33, 0x35, 0x6d, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x67, 0x70, 0x6d, 0x33, 0x35, 0x6d, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x70, 0x6d, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x70,
	0x6d, 0x45, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x47, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x75, 0x6c, 0x6c, 0x65,
	0x74, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x65, 0x72, 0x6f, 0x5f,
	0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x68, 0x65, 0x72, 0x6f, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x48, 0x69,
	0x74, 0x12, 0x31, 0x0a, 0x15, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x68, 0x65, 0x72, 0x6f, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x48, 0x69, 0x74,
	0x43, 0x72, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x68,
	0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x68,
	0x65, 0x72, 0x6f, 0x5f, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x68, 0x65, 0x72, 0x6f, 0x42, 0x75, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x46, 0x69, 0x72, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18,
	0x68, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x46, 0x69, 0x72, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x68, 0x65, 0x72, 0x6f,
	0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x68, 0x65, 0x72,
	0x6f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x48, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x72, 0x69,
	0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x43, 0x72, 0x69, 0x74,
	0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x61, 0x64, 0x53,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x6c, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x6c, 0x65, 0x65,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f,
	0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x62, 0x61, 0x6e, 0x64,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xaa, 0x01, 0x0a, 0x0a, 0x45, 0x45, 0x6e, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x45, 0x6e, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x1d,
	0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x41,
	0x6c, 0x6c, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x10, 0x02, 0x12, 0x1e, 0x0a,
	0x1a, 0x6b, 0x5f, 0x45, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x1c, 0x0a,
	0x18, 0x6b, 0x5f, 0x45, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x6b,
	0x5f, 0x45, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x10, 0x05, 0x22, 0x8d, 0x02, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75,
	0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x6f,
	0x75, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xa5, 0x02, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x0e, 0x45,
	0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a,
	0x17, 0x6b, 0x5f, 0x45, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x5f, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x52, 0x65, 0x74, 0x72, 0x79, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f,
	0x45, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x4e, 0x6f, 0x52, 0x65, 0x74, 0x72, 0x79, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45,
	0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x49,
	0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x45,
	0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x04, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x5f,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x10, 0x05, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x43,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x22, 0x3f, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x49, 0x64, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x67,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x69, 0x6e, 0x67, 0x22, 0x3b, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x22, 0x42, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xd7, 0x02, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x49, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6c, 0x74, 0x76, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6c, 0x74, 0x76, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x64, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x64, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x41, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x46,
	0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62,
	0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x61, 0x66,
	0x65, 0x54, 0x6f, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x22, 0xe8, 0x06, 0x0a, 0x1a, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x62, 0x61,
	0x6e, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0b, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x45, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47,
	0x43, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x77, 0x61, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x1a, 0x69, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x22, 0x46, 0x0a,
	0x07, 0x45, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x72, 0x61, 0x73, 0x68, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x10, 0x02, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x24, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x56, 0x61, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x76, 0x61, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x76,
	0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x61, 0x72,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x76, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x41, 0x0a, 0x25, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x86, 0x01, 0x0a,
	0x1a, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65,
	0x63, 0x74, 0x61, 0x74, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x53, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x09,
	0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c,
	0x10, 0x02, 0x2a, 0xca, 0x06, 0x0a, 0x18, 0x45, 0x47, 0x43, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x9c, 0x4e, 0x12, 0x33, 0x0a, 0x2e,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x9d,
	0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75,
	0x74, 0x10, 0x9e, 0x4e, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67,
	0x6e, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x9f, 0x4e, 0x12,
	0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x10,
	0xa0, 0x4e, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xa1, 0x4e, 0x12, 0x1d, 0x0a,
	0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47,
	0x43, 0x49, 0x64, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x10, 0xa2, 0x4e, 0x12, 0x20, 0x0a, 0x1b,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x10, 0xa3, 0x4e, 0x12, 0x25,
	0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x10, 0xa5, 0x4e, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0xa6, 0x4e, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0xa7, 0x4e, 0x12, 0x2b, 0x0a, 0x26, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0xa8, 0x4e, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x10, 0xa9, 0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0xaa, 0x4e, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x62, 0x61, 0x6e,
	0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x10, 0xab, 0x4e, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xac, 0x4e, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xad, 0x4e, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x10, 0xb7, 0x4e, 0x12, 0x2c, 0x0a, 0x27, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xb8, 0x4e, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xb9, 0x4e, 0x2a,
	0xa2, 0x01, 0x0a, 0x12, 0x45, 0x47, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4d, 0x4d, 0x52, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x6b,
	0x5f, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65,
	0x73, 0x74, 0x10, 0x04, 0x2a, 0xd7, 0x02, 0x0a, 0x14, 0x45, 0x47, 0x43, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a,
	0x23, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x6b,
	0x5f, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x65,
	0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x10, 0x07, 0x12, 0x24, 0x0a,
	0x20, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x10, 0x08, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x65, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x10, 0x09, 0x42, 0x25,
	0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x74,
	0x61, 0x62, 0x75, 0x66, 0x66, 0x2f, 0x6d, 0x61, 0x6e, 0x74, 0x61, 0x2f, 0x64, 0x6f, 0x74, 0x61,
	0x3b, 0x64, 0x6f, 0x74, 0x61,
}

var (
	file_citadel_gcmessages_server_proto_rawDescOnce sync.Once
	file_citadel_gcmessages_server_proto_rawDescData = file_citadel_gcmessages_server_proto_rawDesc
)

func file_citadel_gcmessages_server_proto_rawDescGZIP() []byte {
	file_citadel_gcmessages_server_proto_rawDescOnce.Do(func() {
		file_citadel_gcmessages_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_citadel_gcmessages_server_proto_rawDescData)
	})
	return file_citadel_gcmessages_server_proto_rawDescData
}

var file_citadel_gcmessages_server_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_citadel_gcmessages_server_proto_msgTypes = make([]protoimpl.MessageInfo, 63)
var file_citadel_gcmessages_server_proto_goTypes = []any{
	(EGCCitadelServerMessages)(0),                                       // 0: dota.EGCCitadelServerMessages
	(EGCServerLobbyData)(0),                                             // 1: dota.EGCServerLobbyData
	(EGCServerSignoutData)(0),                                           // 2: dota.EGCServerSignoutData
	(CSOCitadelServerStaticLobby_EAwardIDs)(0),                          // 3: dota.CSOCitadelServerStaticLobby.EAwardIDs
	(CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason)(0),          // 4: dota.CMsgServerSignoutData_PenalizedPlayers.EPenaltyReason
	(CMsgMatchData_EEndReason)(0),                                       // 5: dota.CMsgMatchData.EEndReason
	(CMsgServerToGCMatchSignoutResponse_ESignoutResult)(0),              // 6: dota.CMsgServerToGCMatchSignoutResponse.ESignoutResult
	(CMsgServerToGCAbandonMatch_EReason)(0),                             // 7: dota.CMsgServerToGCAbandonMatch.EReason
	(CMsgGCToServerAddSpectatorResponse_EResponse)(0),                   // 8: dota.CMsgGCToServerAddSpectatorResponse.EResponse
	(*CMsgServerCrashSentinelFile)(nil),                                 // 9: dota.CMsgServerCrashSentinelFile
	(*CServerLobbyData_PlayerMMR)(nil),                                  // 10: dota.CServerLobbyData_PlayerMMR
	(*CServerLobbyData_PlayerInfo)(nil),                                 // 11: dota.CServerLobbyData_PlayerInfo
	(*CServerLobbyData_PostMatchSurvey)(nil),                            // 12: dota.CServerLobbyData_PostMatchSurvey
	(*CServerLobbyData_AutoTest)(nil),                                   // 13: dota.CServerLobbyData_AutoTest
	(*CSOCitadelServerDynamicLobby)(nil),                                // 14: dota.CSOCitadelServerDynamicLobby
	(*CSOCitadelServerStaticLobby)(nil),                                 // 15: dota.CSOCitadelServerStaticLobby
	(*CMsgServerSignoutData_ServerPerfStats)(nil),                       // 16: dota.CMsgServerSignoutData_ServerPerfStats
	(*CMsgServerToGCUpdateMatchInfo)(nil),                               // 17: dota.CMsgServerToGCUpdateMatchInfo
	(*CMsgServerToGCMatchSignoutPermission)(nil),                        // 18: dota.CMsgServerToGCMatchSignoutPermission
	(*CMsgServerToGCMatchSignoutPermissionResponse)(nil),                // 19: dota.CMsgServerToGCMatchSignoutPermissionResponse
	(*CMsgServerSignoutData_Disconnections)(nil),                        // 20: dota.CMsgServerSignoutData_Disconnections
	(*CMsgServerSignoutData_DetailedStats)(nil),                         // 21: dota.CMsgServerSignoutData_DetailedStats
	(*CMsgServerSignoutData_PerfData)(nil),                              // 22: dota.CMsgServerSignoutData_PerfData
	(*CMsgServerSignoutData_BookRewards)(nil),                           // 23: dota.CMsgServerSignoutData_BookRewards
	(*CMsgServerSignoutData_AccountStatChanges)(nil),                    // 24: dota.CMsgServerSignoutData_AccountStatChanges
	(*CMsgServerSignoutData_PlayerChat)(nil),                            // 25: dota.CMsgServerSignoutData_PlayerChat
	(*CMsgServerSignoutData_PenalizedPlayers)(nil),                      // 26: dota.CMsgServerSignoutData_PenalizedPlayers
	(*CMsgMatchData)(nil),                                               // 27: dota.CMsgMatchData
	(*CMsgServerToGCMatchSignout)(nil),                                  // 28: dota.CMsgServerToGCMatchSignout
	(*CMsgServerToGCMatchSignoutResponse)(nil),                          // 29: dota.CMsgServerToGCMatchSignoutResponse
	(*CMsgServerWelcomeCitadel)(nil),                                    // 30: dota.CMsgServerWelcomeCitadel
	(*CMsgServerToGCIdlePing)(nil),                                      // 31: dota.CMsgServerToGCIdlePing
	(*CMsgGCToServerRequestPing)(nil),                                   // 32: dota.CMsgGCToServerRequestPing
	(*CMsgGCToServerAllocateForMatch)(nil),                              // 33: dota.CMsgGCToServerAllocateForMatch
	(*CMsgGCToServerAllocateForMatchResponse)(nil),                      // 34: dota.CMsgGCToServerAllocateForMatchResponse
	(*CMsgServerToGCEnterMatchmaking)(nil),                              // 35: dota.CMsgServerToGCEnterMatchmaking
	(*CMsgGCToServerCancelAllocateForMatch)(nil),                        // 36: dota.CMsgGCToServerCancelAllocateForMatch
	(*CMsgServerToGCUpdateLobbyServerState)(nil),                        // 37: dota.CMsgServerToGCUpdateLobbyServerState
	(*CMsgServerToGCAbandonMatch)(nil),                                  // 38: dota.CMsgServerToGCAbandonMatch
	(*CMsgServerToGCAbandonMatchResponse)(nil),                          // 39: dota.CMsgServerToGCAbandonMatchResponse
	(*CMsgServerToGCTestConnection)(nil),                                // 40: dota.CMsgServerToGCTestConnection
	(*CMsgServerToGCTestConnectionResponse)(nil),                        // 41: dota.CMsgServerToGCTestConnectionResponse
	(*CMsgGCToServerSetServerConVar)(nil),                               // 42: dota.CMsgGCToServerSetServerConVar
	(*CMsgGCToServerSetServerConVarResponse)(nil),                       // 43: dota.CMsgGCToServerSetServerConVarResponse
	(*CMsgGCToServerAddSpectator)(nil),                                  // 44: dota.CMsgGCToServerAddSpectator
	(*CMsgGCToServerAddSpectatorResponse)(nil),                          // 45: dota.CMsgGCToServerAddSpectatorResponse
	(*CMsgServerCrashSentinelFile_Player)(nil),                          // 46: dota.CMsgServerCrashSentinelFile.Player
	(*CMsgServerCrashSentinelFile_GameInfo)(nil),                        // 47: dota.CMsgServerCrashSentinelFile.GameInfo
	(*CServerLobbyData_PlayerMMR_Player)(nil),                           // 48: dota.CServerLobbyData_PlayerMMR.Player
	(*CServerLobbyData_PostMatchSurvey_PlayerSurvey)(nil),               // 49: dota.CServerLobbyData_PostMatchSurvey.PlayerSurvey
	(*CSOCitadelServerStaticLobby_Member)(nil),                          // 50: dota.CSOCitadelServerStaticLobby.Member
	(*CSOCitadelServerStaticLobby_DevSettings)(nil),                     // 51: dota.CSOCitadelServerStaticLobby.DevSettings
	(*CMsgServerSignoutData_ServerPerfStats_FrameCounts)(nil),           // 52: dota.CMsgServerSignoutData_ServerPerfStats.FrameCounts
	(*CMsgServerSignoutData_ServerPerfStats_PerfSample)(nil),            // 53: dota.CMsgServerSignoutData_ServerPerfStats.PerfSample
	(*CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples)(nil),      // 54: dota.CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples
	(*CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection)(nil), // 55: dota.CMsgServerSignoutData_Disconnections.CMsgMatchDisconnection
	(*CMsgServerSignoutData_DetailedStats_Position)(nil),                // 56: dota.CMsgServerSignoutData_DetailedStats.Position
	(*CMsgServerSignoutData_DetailedStats_TimeSample)(nil),              // 57: dota.CMsgServerSignoutData_DetailedStats.TimeSample
	(*CMsgServerSignoutData_DetailedStats_Objective)(nil),               // 58: dota.CMsgServerSignoutData_DetailedStats.Objective
	(*CMsgServerSignoutData_DetailedStats_MidBoss)(nil),                 // 59: dota.CMsgServerSignoutData_DetailedStats.MidBoss
	(*CMsgServerSignoutData_DetailedStats_Player)(nil),                  // 60: dota.CMsgServerSignoutData_DetailedStats.Player
	(*CMsgServerSignoutData_DetailedStats_TimeSample_Stats)(nil),        // 61: dota.CMsgServerSignoutData_DetailedStats.TimeSample.Stats
	(*CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats)(nil),    // 62: dota.CMsgServerSignoutData_DetailedStats.TimeSample.GoldStats
	(*CMsgServerSignoutData_BookRewards_BookReward)(nil),                // 63: dota.CMsgServerSignoutData_BookRewards.BookReward
	(*CMsgServerSignoutData_BookRewards_AccountRewards)(nil),            // 64: dota.CMsgServerSignoutData_BookRewards.AccountRewards
	(*CMsgServerSignoutData_AccountStatChanges_Stat)(nil),               // 65: dota.CMsgServerSignoutData_AccountStatChanges.Stat
	(*CMsgServerSignoutData_AccountStatChanges_AccountStats)(nil),       // 66: dota.CMsgServerSignoutData_AccountStatChanges.AccountStats
	(*CMsgServerSignoutData_PlayerChat_ChatLine)(nil),                   // 67: dota.CMsgServerSignoutData_PlayerChat.ChatLine
	(*CMsgServerSignoutData_PenalizedPlayers_Penalty)(nil),              // 68: dota.CMsgServerSignoutData_PenalizedPlayers.Penalty
	(*CMsgMatchData_PlayerItem)(nil),                                    // 69: dota.CMsgMatchData.PlayerItem
	(*CMsgMatchData_PlayerInfo)(nil),                                    // 70: dota.CMsgMatchData.PlayerInfo
	(*CMsgServerToGCAbandonMatch_Player)(nil),                           // 71: dota.CMsgServerToGCAbandonMatch.Player
	(*CMsgAccountHeroStats)(nil),                                        // 72: dota.CMsgAccountHeroStats
	(*CMsgAccountBookStats)(nil),                                        // 73: dota.CMsgAccountBookStats
	(*CExtraMsgBlock)(nil),                                              // 74: dota.CExtraMsgBlock
	(ECitadelBotDifficulty)(0),                                          // 75: dota.ECitadelBotDifficulty
	(ECitadelRegionMode)(0),                                             // 76: dota.ECitadelRegionMode
	(ECitadelMatchMode)(0),                                              // 77: dota.ECitadelMatchMode
	(ECitadelLobbyTeam)(0),                                              // 78: dota.ECitadelLobbyTeam
	(ECitadelGameMode)(0),                                               // 79: dota.ECitadelGameMode
	(ELobbyServerState)(0),                                              // 80: dota.ELobbyServerState
	(EGCPlatform)(0),                                                    // 81: dota.EGCPlatform
	(ECitadelTeamObjective)(0),                                          // 82: dota.ECitadelTeamObjective
	(ECitadelAccountStatMedal)(0),                                       // 83: dota.ECitadelAccountStatMedal
}
var file_citadel_gcmessages_server_proto_depIdxs = []int32{
	47, // 0: dota.CMsgServerCrashSentinelFile.game_info:type_name -> dota.CMsgServerCrashSentinelFile.GameInfo
	48, // 1: dota.CServerLobbyData_PlayerMMR.players:type_name -> dota.CServerLobbyData_PlayerMMR.Player
	72, // 2: dota.CServerLobbyData_PlayerInfo.account_stats:type_name -> dota.CMsgAccountHeroStats
	73, // 3: dota.CServerLobbyData_PlayerInfo.book_info:type_name -> dota.CMsgAccountBookStats
	49, // 4: dota.CServerLobbyData_PostMatchSurvey.surveys:type_name -> dota.CServerLobbyData_PostMatchSurvey.PlayerSurvey
	74, // 5: dota.CSOCitadelServerStaticLobby.extra_messages:type_name -> dota.CExtraMsgBlock
	50, // 6: dota.CSOCitadelServerStaticLobby.members:type_name -> dota.CSOCitadelServerStaticLobby.Member
	51, // 7: dota.CSOCitadelServerStaticLobby.dev_settings:type_name -> dota.CSOCitadelServerStaticLobby.DevSettings
	75, // 8: dota.CSOCitadelServerStaticLobby.bot_difficulty:type_name -> dota.ECitadelBotDifficulty
	76, // 9: dota.CSOCitadelServerStaticLobby.region_mode:type_name -> dota.ECitadelRegionMode
	54, // 10: dota.CMsgServerSignoutData_ServerPerfStats.perf_samples:type_name -> dota.CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples
	77, // 11: dota.CMsgServerToGCMatchSignoutPermission.match_mode:type_name -> dota.ECitadelMatchMode
	2,  // 12: dota.CMsgServerToGCMatchSignoutPermissionResponse.requested_data:type_name -> dota.EGCServerSignoutData
	55, // 13: dota.CMsgServerSignoutData_Disconnections.disconnections:type_name -> dota.CMsgServerSignoutData_Disconnections.CMsgMatchDisconnection
	60, // 14: dota.CMsgServerSignoutData_DetailedStats.player_stats:type_name -> dota.CMsgServerSignoutData_DetailedStats.Player
	58, // 15: dota.CMsgServerSignoutData_DetailedStats.objectives:type_name -> dota.CMsgServerSignoutData_DetailedStats.Objective
	59, // 16: dota.CMsgServerSignoutData_DetailedStats.mid_boss:type_name -> dota.CMsgServerSignoutData_DetailedStats.MidBoss
	64, // 17: dota.CMsgServerSignoutData_BookRewards.account_rewards:type_name -> dota.CMsgServerSignoutData_BookRewards.AccountRewards
	66, // 18: dota.CMsgServerSignoutData_AccountStatChanges.account_stats:type_name -> dota.CMsgServerSignoutData_AccountStatChanges.AccountStats
	67, // 19: dota.CMsgServerSignoutData_PlayerChat.chat_lines:type_name -> dota.CMsgServerSignoutData_PlayerChat.ChatLine
	68, // 20: dota.CMsgServerSignoutData_PenalizedPlayers.penalized_players:type_name -> dota.CMsgServerSignoutData_PenalizedPlayers.Penalty
	5,  // 21: dota.CMsgMatchData.end_reason:type_name -> dota.CMsgMatchData.EEndReason
	78, // 22: dota.CMsgMatchData.winning_team:type_name -> dota.ECitadelLobbyTeam
	70, // 23: dota.CMsgMatchData.players:type_name -> dota.CMsgMatchData.PlayerInfo
	79, // 24: dota.CMsgMatchData.game_mode:type_name -> dota.ECitadelGameMode
	77, // 25: dota.CMsgMatchData.match_mode:type_name -> dota.ECitadelMatchMode
	74, // 26: dota.CMsgServerToGCMatchSignout.additional_data:type_name -> dota.CExtraMsgBlock
	27, // 27: dota.CMsgServerToGCMatchSignout.match_data:type_name -> dota.CMsgMatchData
	6,  // 28: dota.CMsgServerToGCMatchSignoutResponse.result:type_name -> dota.CMsgServerToGCMatchSignoutResponse.ESignoutResult
	80, // 29: dota.CMsgServerToGCUpdateLobbyServerState.server_state:type_name -> dota.ELobbyServerState
	7,  // 30: dota.CMsgServerToGCAbandonMatch.reason_code:type_name -> dota.CMsgServerToGCAbandonMatch.EReason
	71, // 31: dota.CMsgServerToGCAbandonMatch.players:type_name -> dota.CMsgServerToGCAbandonMatch.Player
	77, // 32: dota.CMsgServerToGCAbandonMatch.match_mode:type_name -> dota.ECitadelMatchMode
	79, // 33: dota.CMsgServerToGCAbandonMatch.game_mode:type_name -> dota.ECitadelGameMode
	8,  // 34: dota.CMsgGCToServerAddSpectatorResponse.result:type_name -> dota.CMsgGCToServerAddSpectatorResponse.EResponse
	46, // 35: dota.CMsgServerCrashSentinelFile.GameInfo.players:type_name -> dota.CMsgServerCrashSentinelFile.Player
	77, // 36: dota.CMsgServerCrashSentinelFile.GameInfo.match_mode:type_name -> dota.ECitadelMatchMode
	79, // 37: dota.CMsgServerCrashSentinelFile.GameInfo.game_mode:type_name -> dota.ECitadelGameMode
	78, // 38: dota.CSOCitadelServerStaticLobby.Member.team:type_name -> dota.ECitadelLobbyTeam
	81, // 39: dota.CSOCitadelServerStaticLobby.Member.platform:type_name -> dota.EGCPlatform
	3,  // 40: dota.CSOCitadelServerStaticLobby.Member.award_ids:type_name -> dota.CSOCitadelServerStaticLobby.EAwardIDs
	52, // 41: dota.CMsgServerSignoutData_ServerPerfStats.PerfSample.performant_frames:type_name -> dota.CMsgServerSignoutData_ServerPerfStats.FrameCounts
	52, // 42: dota.CMsgServerSignoutData_ServerPerfStats.PerfSample.long_frames:type_name -> dota.CMsgServerSignoutData_ServerPerfStats.FrameCounts
	52, // 43: dota.CMsgServerSignoutData_ServerPerfStats.PerfSample.low_idle_frames:type_name -> dota.CMsgServerSignoutData_ServerPerfStats.FrameCounts
	53, // 44: dota.CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples.samples:type_name -> dota.CMsgServerSignoutData_ServerPerfStats.PerfSample
	61, // 45: dota.CMsgServerSignoutData_DetailedStats.TimeSample.stats:type_name -> dota.CMsgServerSignoutData_DetailedStats.TimeSample.Stats
	62, // 46: dota.CMsgServerSignoutData_DetailedStats.TimeSample.gold_stats:type_name -> dota.CMsgServerSignoutData_DetailedStats.TimeSample.GoldStats
	82, // 47: dota.CMsgServerSignoutData_DetailedStats.Objective.team_objective_id:type_name -> dota.ECitadelTeamObjective
	78, // 48: dota.CMsgServerSignoutData_DetailedStats.Objective.team:type_name -> dota.ECitadelLobbyTeam
	78, // 49: dota.CMsgServerSignoutData_DetailedStats.MidBoss.team_killed:type_name -> dota.ECitadelLobbyTeam
	78, // 50: dota.CMsgServerSignoutData_DetailedStats.MidBoss.team_claimed:type_name -> dota.ECitadelLobbyTeam
	57, // 51: dota.CMsgServerSignoutData_DetailedStats.Player.time_samples:type_name -> dota.CMsgServerSignoutData_DetailedStats.TimeSample
	63, // 52: dota.CMsgServerSignoutData_BookRewards.AccountRewards.book_reward:type_name -> dota.CMsgServerSignoutData_BookRewards.BookReward
	83, // 53: dota.CMsgServerSignoutData_AccountStatChanges.Stat.medal:type_name -> dota.ECitadelAccountStatMedal
	65, // 54: dota.CMsgServerSignoutData_AccountStatChanges.AccountStats.stats:type_name -> dota.CMsgServerSignoutData_AccountStatChanges.Stat
	4,  // 55: dota.CMsgServerSignoutData_PenalizedPlayers.Penalty.reason:type_name -> dota.CMsgServerSignoutData_PenalizedPlayers.EPenaltyReason
	78, // 56: dota.CMsgMatchData.PlayerInfo.team:type_name -> dota.ECitadelLobbyTeam
	69, // 57: dota.CMsgMatchData.PlayerInfo.items:type_name -> dota.CMsgMatchData.PlayerItem
	81, // 58: dota.CMsgMatchData.PlayerInfo.platform:type_name -> dota.EGCPlatform
	59, // [59:59] is the sub-list for method output_type
	59, // [59:59] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_citadel_gcmessages_server_proto_init() }
func file_citadel_gcmessages_server_proto_init() {
	if File_citadel_gcmessages_server_proto != nil {
		return
	}
	file_steammessages_proto_init()
	file_gcsdk_gcmessages_proto_init()
	file_citadel_gcmessages_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_citadel_gcmessages_server_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerCrashSentinelFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CServerLobbyData_PlayerMMR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CServerLobbyData_PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CServerLobbyData_PostMatchSurvey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CServerLobbyData_AutoTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CSOCitadelServerDynamicLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CSOCitadelServerStaticLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_ServerPerfStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerToGCUpdateMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerToGCMatchSignoutPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerToGCMatchSignoutPermissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_Disconnections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_DetailedStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_PerfData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_BookRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_AccountStatChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_PlayerChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_PenalizedPlayers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerToGCMatchSignout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerToGCMatchSignoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerWelcomeCitadel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerToGCIdlePing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgGCToServerRequestPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgGCToServerAllocateForMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgGCToServerAllocateForMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerToGCEnterMatchmaking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgGCToServerCancelAllocateForMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerToGCUpdateLobbyServerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerToGCAbandonMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerToGCAbandonMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerToGCTestConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerToGCTestConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgGCToServerSetServerConVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgGCToServerSetServerConVarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgGCToServerAddSpectator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgGCToServerAddSpectatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerCrashSentinelFile_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerCrashSentinelFile_GameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*CServerLobbyData_PlayerMMR_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*CServerLobbyData_PostMatchSurvey_PlayerSurvey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*CSOCitadelServerStaticLobby_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*CSOCitadelServerStaticLobby_DevSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_ServerPerfStats_FrameCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_ServerPerfStats_PerfSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_DetailedStats_Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_DetailedStats_TimeSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_DetailedStats_Objective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_DetailedStats_MidBoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_DetailedStats_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_DetailedStats_TimeSample_Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_BookRewards_BookReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_BookRewards_AccountRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_AccountStatChanges_Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_AccountStatChanges_AccountStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_PlayerChat_ChatLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerSignoutData_PenalizedPlayers_Penalty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchData_PlayerItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchData_PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_server_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgServerToGCAbandonMatch_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_citadel_gcmessages_server_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   63,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_citadel_gcmessages_server_proto_goTypes,
		DependencyIndexes: file_citadel_gcmessages_server_proto_depIdxs,
		EnumInfos:         file_citadel_gcmessages_server_proto_enumTypes,
		MessageInfos:      file_citadel_gcmessages_server_proto_msgTypes,
	}.Build()
	File_citadel_gcmessages_server_proto = out.File
	file_citadel_gcmessages_server_proto_rawDesc = nil
	file_citadel_gcmessages_server_proto_goTypes = nil
	file_citadel_gcmessages_server_proto_depIdxs = nil
}
