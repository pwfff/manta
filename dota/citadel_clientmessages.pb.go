// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: citadel_clientmessages.proto

package dota

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ECitadelClientMessages int32

const (
	ECitadelClientMessages_CITADEL_CM_CancelAbility         ECitadelClientMessages = 1001
	ECitadelClientMessages_CITADEL_CM_MapPing               ECitadelClientMessages = 1002
	ECitadelClientMessages_CITADEL_CM_PerformanceStats      ECitadelClientMessages = 1003
	ECitadelClientMessages_CITADEL_CM_PingWheel             ECitadelClientMessages = 1004
	ECitadelClientMessages_CITADEL_CM_ChatMsg               ECitadelClientMessages = 1005
	ECitadelClientMessages_CITADEL_CM_PerfReport            ECitadelClientMessages = 1006
	ECitadelClientMessages_CITADEL_CM_QuickResponse         ECitadelClientMessages = 1007
	ECitadelClientMessages_CITADEL_CM_Pause                 ECitadelClientMessages = 1008
	ECitadelClientMessages_CITADEL_CM_MapLine               ECitadelClientMessages = 1009
	ECitadelClientMessages_CITADEL_CM_AbilityPing           ECitadelClientMessages = 1010
	ECitadelClientMessages_CITADEL_CM_ExecuteMapUnitAbility ECitadelClientMessages = 1011
	ECitadelClientMessages_CITADEL_CM_GetDamageStats        ECitadelClientMessages = 1012
)

// Enum value maps for ECitadelClientMessages.
var (
	ECitadelClientMessages_name = map[int32]string{
		1001: "CITADEL_CM_CancelAbility",
		1002: "CITADEL_CM_MapPing",
		1003: "CITADEL_CM_PerformanceStats",
		1004: "CITADEL_CM_PingWheel",
		1005: "CITADEL_CM_ChatMsg",
		1006: "CITADEL_CM_PerfReport",
		1007: "CITADEL_CM_QuickResponse",
		1008: "CITADEL_CM_Pause",
		1009: "CITADEL_CM_MapLine",
		1010: "CITADEL_CM_AbilityPing",
		1011: "CITADEL_CM_ExecuteMapUnitAbility",
		1012: "CITADEL_CM_GetDamageStats",
	}
	ECitadelClientMessages_value = map[string]int32{
		"CITADEL_CM_CancelAbility":         1001,
		"CITADEL_CM_MapPing":               1002,
		"CITADEL_CM_PerformanceStats":      1003,
		"CITADEL_CM_PingWheel":             1004,
		"CITADEL_CM_ChatMsg":               1005,
		"CITADEL_CM_PerfReport":            1006,
		"CITADEL_CM_QuickResponse":         1007,
		"CITADEL_CM_Pause":                 1008,
		"CITADEL_CM_MapLine":               1009,
		"CITADEL_CM_AbilityPing":           1010,
		"CITADEL_CM_ExecuteMapUnitAbility": 1011,
		"CITADEL_CM_GetDamageStats":        1012,
	}
)

func (x ECitadelClientMessages) Enum() *ECitadelClientMessages {
	p := new(ECitadelClientMessages)
	*p = x
	return p
}

func (x ECitadelClientMessages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECitadelClientMessages) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_clientmessages_proto_enumTypes[0].Descriptor()
}

func (ECitadelClientMessages) Type() protoreflect.EnumType {
	return &file_citadel_clientmessages_proto_enumTypes[0]
}

func (x ECitadelClientMessages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECitadelClientMessages) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECitadelClientMessages(num)
	return nil
}

// Deprecated: Use ECitadelClientMessages.Descriptor instead.
func (ECitadelClientMessages) EnumDescriptor() ([]byte, []int) {
	return file_citadel_clientmessages_proto_rawDescGZIP(), []int{0}
}

type CCitadelClientMsg_Pause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCitadelClientMsg_Pause) Reset() {
	*x = CCitadelClientMsg_Pause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_clientmessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCitadelClientMsg_Pause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCitadelClientMsg_Pause) ProtoMessage() {}

func (x *CCitadelClientMsg_Pause) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_clientmessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCitadelClientMsg_Pause.ProtoReflect.Descriptor instead.
func (*CCitadelClientMsg_Pause) Descriptor() ([]byte, []int) {
	return file_citadel_clientmessages_proto_rawDescGZIP(), []int{0}
}

type CCitadelClientMsg_CancelAbilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Casts    *bool `protobuf:"varint,1,opt,name=casts" json:"casts,omitempty"`
	Channels *bool `protobuf:"varint,2,opt,name=channels" json:"channels,omitempty"`
}

func (x *CCitadelClientMsg_CancelAbilities) Reset() {
	*x = CCitadelClientMsg_CancelAbilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_clientmessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCitadelClientMsg_CancelAbilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCitadelClientMsg_CancelAbilities) ProtoMessage() {}

func (x *CCitadelClientMsg_CancelAbilities) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_clientmessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCitadelClientMsg_CancelAbilities.ProtoReflect.Descriptor instead.
func (*CCitadelClientMsg_CancelAbilities) Descriptor() ([]byte, []int) {
	return file_citadel_clientmessages_proto_rawDescGZIP(), []int{1}
}

func (x *CCitadelClientMsg_CancelAbilities) GetCasts() bool {
	if x != nil && x.Casts != nil {
		return *x.Casts
	}
	return false
}

func (x *CCitadelClientMsg_CancelAbilities) GetChannels() bool {
	if x != nil && x.Channels != nil {
		return *x.Channels
	}
	return false
}

type CCitadelClientMsg_MapPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PingLocation     *CMsgVector `protobuf:"bytes,1,opt,name=ping_location,json=pingLocation" json:"ping_location,omitempty"`
	EventType        *int32      `protobuf:"varint,2,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	EntityIndex      *int32      `protobuf:"varint,3,opt,name=entity_index,json=entityIndex" json:"entity_index,omitempty"`
	IsAggressivePing *bool       `protobuf:"varint,4,opt,name=is_aggressive_ping,json=isAggressivePing" json:"is_aggressive_ping,omitempty"`
	IsMinimapPing    *bool       `protobuf:"varint,5,opt,name=is_minimap_ping,json=isMinimapPing" json:"is_minimap_ping,omitempty"`
	IsBlindPing      *bool       `protobuf:"varint,6,opt,name=is_blind_ping,json=isBlindPing" json:"is_blind_ping,omitempty"`
}

func (x *CCitadelClientMsg_MapPing) Reset() {
	*x = CCitadelClientMsg_MapPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_clientmessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCitadelClientMsg_MapPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCitadelClientMsg_MapPing) ProtoMessage() {}

func (x *CCitadelClientMsg_MapPing) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_clientmessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCitadelClientMsg_MapPing.ProtoReflect.Descriptor instead.
func (*CCitadelClientMsg_MapPing) Descriptor() ([]byte, []int) {
	return file_citadel_clientmessages_proto_rawDescGZIP(), []int{2}
}

func (x *CCitadelClientMsg_MapPing) GetPingLocation() *CMsgVector {
	if x != nil {
		return x.PingLocation
	}
	return nil
}

func (x *CCitadelClientMsg_MapPing) GetEventType() int32 {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return 0
}

func (x *CCitadelClientMsg_MapPing) GetEntityIndex() int32 {
	if x != nil && x.EntityIndex != nil {
		return *x.EntityIndex
	}
	return 0
}

func (x *CCitadelClientMsg_MapPing) GetIsAggressivePing() bool {
	if x != nil && x.IsAggressivePing != nil {
		return *x.IsAggressivePing
	}
	return false
}

func (x *CCitadelClientMsg_MapPing) GetIsMinimapPing() bool {
	if x != nil && x.IsMinimapPing != nil {
		return *x.IsMinimapPing
	}
	return false
}

func (x *CCitadelClientMsg_MapPing) GetIsBlindPing() bool {
	if x != nil && x.IsBlindPing != nil {
		return *x.IsBlindPing
	}
	return false
}

type CCitadelClientMsg_PingWheel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PingWheelOptionId *uint32     `protobuf:"varint,1,opt,name=ping_wheel_option_id,json=pingWheelOptionId" json:"ping_wheel_option_id,omitempty"`
	SubnavMessageId   *uint32     `protobuf:"varint,2,opt,name=subnav_message_id,json=subnavMessageId" json:"subnav_message_id,omitempty"`
	PingLocation      *CMsgVector `protobuf:"bytes,3,opt,name=ping_location,json=pingLocation" json:"ping_location,omitempty"`
	EntityIndex       *int32      `protobuf:"varint,4,opt,name=entity_index,json=entityIndex" json:"entity_index,omitempty"`
}

func (x *CCitadelClientMsg_PingWheel) Reset() {
	*x = CCitadelClientMsg_PingWheel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_clientmessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCitadelClientMsg_PingWheel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCitadelClientMsg_PingWheel) ProtoMessage() {}

func (x *CCitadelClientMsg_PingWheel) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_clientmessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCitadelClientMsg_PingWheel.ProtoReflect.Descriptor instead.
func (*CCitadelClientMsg_PingWheel) Descriptor() ([]byte, []int) {
	return file_citadel_clientmessages_proto_rawDescGZIP(), []int{3}
}

func (x *CCitadelClientMsg_PingWheel) GetPingWheelOptionId() uint32 {
	if x != nil && x.PingWheelOptionId != nil {
		return *x.PingWheelOptionId
	}
	return 0
}

func (x *CCitadelClientMsg_PingWheel) GetSubnavMessageId() uint32 {
	if x != nil && x.SubnavMessageId != nil {
		return *x.SubnavMessageId
	}
	return 0
}

func (x *CCitadelClientMsg_PingWheel) GetPingLocation() *CMsgVector {
	if x != nil {
		return x.PingLocation
	}
	return nil
}

func (x *CCitadelClientMsg_PingWheel) GetEntityIndex() int32 {
	if x != nil && x.EntityIndex != nil {
		return *x.EntityIndex
	}
	return 0
}

type CCitadelClientMsg_AbilityPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityIndex      *int32  `protobuf:"varint,1,opt,name=entity_index,json=entityIndex" json:"entity_index,omitempty"`
	PingedAbilityId  *uint32 `protobuf:"varint,2,opt,name=pinged_ability_id,json=pingedAbilityId" json:"pinged_ability_id,omitempty"`
	PingedPlayerSlot *int32  `protobuf:"varint,3,opt,name=pinged_player_slot,json=pingedPlayerSlot" json:"pinged_player_slot,omitempty"`
}

func (x *CCitadelClientMsg_AbilityPing) Reset() {
	*x = CCitadelClientMsg_AbilityPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_clientmessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCitadelClientMsg_AbilityPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCitadelClientMsg_AbilityPing) ProtoMessage() {}

func (x *CCitadelClientMsg_AbilityPing) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_clientmessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCitadelClientMsg_AbilityPing.ProtoReflect.Descriptor instead.
func (*CCitadelClientMsg_AbilityPing) Descriptor() ([]byte, []int) {
	return file_citadel_clientmessages_proto_rawDescGZIP(), []int{4}
}

func (x *CCitadelClientMsg_AbilityPing) GetEntityIndex() int32 {
	if x != nil && x.EntityIndex != nil {
		return *x.EntityIndex
	}
	return 0
}

func (x *CCitadelClientMsg_AbilityPing) GetPingedAbilityId() uint32 {
	if x != nil && x.PingedAbilityId != nil {
		return *x.PingedAbilityId
	}
	return 0
}

func (x *CCitadelClientMsg_AbilityPing) GetPingedPlayerSlot() int32 {
	if x != nil && x.PingedPlayerSlot != nil {
		return *x.PingedPlayerSlot
	}
	return 0
}

type CCitadelClientMsg_MapLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mapline *CMsgMapLine `protobuf:"bytes,1,opt,name=mapline" json:"mapline,omitempty"`
}

func (x *CCitadelClientMsg_MapLine) Reset() {
	*x = CCitadelClientMsg_MapLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_clientmessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCitadelClientMsg_MapLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCitadelClientMsg_MapLine) ProtoMessage() {}

func (x *CCitadelClientMsg_MapLine) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_clientmessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCitadelClientMsg_MapLine.ProtoReflect.Descriptor instead.
func (*CCitadelClientMsg_MapLine) Descriptor() ([]byte, []int) {
	return file_citadel_clientmessages_proto_rawDescGZIP(), []int{5}
}

func (x *CCitadelClientMsg_MapLine) GetMapline() *CMsgMapLine {
	if x != nil {
		return x.Mapline
	}
	return nil
}

type CCitadelClientMsg_QuickResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PingWheelMessageId        *uint32 `protobuf:"varint,1,opt,name=ping_wheel_message_id,json=pingWheelMessageId" json:"ping_wheel_message_id,omitempty"`
	RespondingToPingMessageId *uint32 `protobuf:"varint,2,opt,name=responding_to_ping_message_id,json=respondingToPingMessageId" json:"responding_to_ping_message_id,omitempty"`
	RespondingToPlayerSlot    *int32  `protobuf:"varint,3,opt,name=responding_to_player_slot,json=respondingToPlayerSlot" json:"responding_to_player_slot,omitempty"`
}

func (x *CCitadelClientMsg_QuickResponse) Reset() {
	*x = CCitadelClientMsg_QuickResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_clientmessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCitadelClientMsg_QuickResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCitadelClientMsg_QuickResponse) ProtoMessage() {}

func (x *CCitadelClientMsg_QuickResponse) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_clientmessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCitadelClientMsg_QuickResponse.ProtoReflect.Descriptor instead.
func (*CCitadelClientMsg_QuickResponse) Descriptor() ([]byte, []int) {
	return file_citadel_clientmessages_proto_rawDescGZIP(), []int{6}
}

func (x *CCitadelClientMsg_QuickResponse) GetPingWheelMessageId() uint32 {
	if x != nil && x.PingWheelMessageId != nil {
		return *x.PingWheelMessageId
	}
	return 0
}

func (x *CCitadelClientMsg_QuickResponse) GetRespondingToPingMessageId() uint32 {
	if x != nil && x.RespondingToPingMessageId != nil {
		return *x.RespondingToPingMessageId
	}
	return 0
}

func (x *CCitadelClientMsg_QuickResponse) GetRespondingToPlayerSlot() int32 {
	if x != nil && x.RespondingToPlayerSlot != nil {
		return *x.RespondingToPlayerSlot
	}
	return 0
}

type CCitadelClientMsg_PerformanceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentGameTime *float32 `protobuf:"fixed32,1,opt,name=current_game_time,json=currentGameTime" json:"current_game_time,omitempty"`
	AverageFps      *float32 `protobuf:"fixed32,2,opt,name=average_fps,json=averageFps" json:"average_fps,omitempty"`
	MinFps          *float32 `protobuf:"fixed32,3,opt,name=min_fps,json=minFps" json:"min_fps,omitempty"`
	MaxFps          *float32 `protobuf:"fixed32,4,opt,name=max_fps,json=maxFps" json:"max_fps,omitempty"`
}

func (x *CCitadelClientMsg_PerformanceStats) Reset() {
	*x = CCitadelClientMsg_PerformanceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_clientmessages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCitadelClientMsg_PerformanceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCitadelClientMsg_PerformanceStats) ProtoMessage() {}

func (x *CCitadelClientMsg_PerformanceStats) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_clientmessages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCitadelClientMsg_PerformanceStats.ProtoReflect.Descriptor instead.
func (*CCitadelClientMsg_PerformanceStats) Descriptor() ([]byte, []int) {
	return file_citadel_clientmessages_proto_rawDescGZIP(), []int{7}
}

func (x *CCitadelClientMsg_PerformanceStats) GetCurrentGameTime() float32 {
	if x != nil && x.CurrentGameTime != nil {
		return *x.CurrentGameTime
	}
	return 0
}

func (x *CCitadelClientMsg_PerformanceStats) GetAverageFps() float32 {
	if x != nil && x.AverageFps != nil {
		return *x.AverageFps
	}
	return 0
}

func (x *CCitadelClientMsg_PerformanceStats) GetMinFps() float32 {
	if x != nil && x.MinFps != nil {
		return *x.MinFps
	}
	return 0
}

func (x *CCitadelClientMsg_PerformanceStats) GetMaxFps() float32 {
	if x != nil && x.MaxFps != nil {
		return *x.MaxFps
	}
	return 0
}

type CCitadelClientMsg_ChatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatText  *string        `protobuf:"bytes,1,opt,name=chat_text,json=chatText" json:"chat_text,omitempty"`
	AllChat   *bool          `protobuf:"varint,2,opt,name=all_chat,json=allChat" json:"all_chat,omitempty"`
	LaneColor *CMsgLaneColor `protobuf:"varint,3,opt,name=lane_color,json=laneColor,enum=dota.CMsgLaneColor" json:"lane_color,omitempty"`
}

func (x *CCitadelClientMsg_ChatMsg) Reset() {
	*x = CCitadelClientMsg_ChatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_clientmessages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCitadelClientMsg_ChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCitadelClientMsg_ChatMsg) ProtoMessage() {}

func (x *CCitadelClientMsg_ChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_clientmessages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCitadelClientMsg_ChatMsg.ProtoReflect.Descriptor instead.
func (*CCitadelClientMsg_ChatMsg) Descriptor() ([]byte, []int) {
	return file_citadel_clientmessages_proto_rawDescGZIP(), []int{8}
}

func (x *CCitadelClientMsg_ChatMsg) GetChatText() string {
	if x != nil && x.ChatText != nil {
		return *x.ChatText
	}
	return ""
}

func (x *CCitadelClientMsg_ChatMsg) GetAllChat() bool {
	if x != nil && x.AllChat != nil {
		return *x.AllChat
	}
	return false
}

func (x *CCitadelClientMsg_ChatMsg) GetLaneColor() CMsgLaneColor {
	if x != nil && x.LaneColor != nil {
		return *x.LaneColor
	}
	return CMsgLaneColor_k_ELaneColor_Invalid
}

type CCitadelClientMsg_PerfReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AverageFrameTime                      *float32 `protobuf:"fixed32,1,opt,name=average_frame_time,json=averageFrameTime" json:"average_frame_time,omitempty"`
	MaxFrameTime                          *float32 `protobuf:"fixed32,2,opt,name=max_frame_time,json=maxFrameTime" json:"max_frame_time,omitempty"`
	AverageComputeTime                    *float32 `protobuf:"fixed32,3,opt,name=average_compute_time,json=averageComputeTime" json:"average_compute_time,omitempty"`
	MaxComputeTime                        *float32 `protobuf:"fixed32,4,opt,name=max_compute_time,json=maxComputeTime" json:"max_compute_time,omitempty"`
	AverageClientTickTime                 *float32 `protobuf:"fixed32,5,opt,name=average_client_tick_time,json=averageClientTickTime" json:"average_client_tick_time,omitempty"`
	MaxClientTickTime                     *float32 `protobuf:"fixed32,6,opt,name=max_client_tick_time,json=maxClientTickTime" json:"max_client_tick_time,omitempty"`
	AverageClientSimulateTime             *float32 `protobuf:"fixed32,7,opt,name=average_client_simulate_time,json=averageClientSimulateTime" json:"average_client_simulate_time,omitempty"`
	MaxClientSimulateTime                 *float32 `protobuf:"fixed32,8,opt,name=max_client_simulate_time,json=maxClientSimulateTime" json:"max_client_simulate_time,omitempty"`
	AverageOutputTime                     *float32 `protobuf:"fixed32,9,opt,name=average_output_time,json=averageOutputTime" json:"average_output_time,omitempty"`
	MaxOutputTime                         *float32 `protobuf:"fixed32,10,opt,name=max_output_time,json=maxOutputTime" json:"max_output_time,omitempty"`
	AverageWaitForRenderingToCompleteTime *float32 `protobuf:"fixed32,11,opt,name=average_wait_for_rendering_to_complete_time,json=averageWaitForRenderingToCompleteTime" json:"average_wait_for_rendering_to_complete_time,omitempty"`
	MaxWaitForRenderingToCompleteTime     *float32 `protobuf:"fixed32,12,opt,name=max_wait_for_rendering_to_complete_time,json=maxWaitForRenderingToCompleteTime" json:"max_wait_for_rendering_to_complete_time,omitempty"`
	AverageSwapTime                       *float32 `protobuf:"fixed32,13,opt,name=average_swap_time,json=averageSwapTime" json:"average_swap_time,omitempty"`
	MaxSwapTime                           *float32 `protobuf:"fixed32,14,opt,name=max_swap_time,json=maxSwapTime" json:"max_swap_time,omitempty"`
	AverageFrameUpdateTime                *float32 `protobuf:"fixed32,15,opt,name=average_frame_update_time,json=averageFrameUpdateTime" json:"average_frame_update_time,omitempty"`
	MaxFrameUpdateTime                    *float32 `protobuf:"fixed32,16,opt,name=max_frame_update_time,json=maxFrameUpdateTime" json:"max_frame_update_time,omitempty"`
	AverageIdleTime                       *float32 `protobuf:"fixed32,17,opt,name=average_idle_time,json=averageIdleTime" json:"average_idle_time,omitempty"`
	MaxIdleTime                           *float32 `protobuf:"fixed32,18,opt,name=max_idle_time,json=maxIdleTime" json:"max_idle_time,omitempty"`
	AverageInputProcessingTime            *float32 `protobuf:"fixed32,19,opt,name=average_input_processing_time,json=averageInputProcessingTime" json:"average_input_processing_time,omitempty"`
	MaxInputProcessingTime                *float32 `protobuf:"fixed32,20,opt,name=max_input_processing_time,json=maxInputProcessingTime" json:"max_input_processing_time,omitempty"`
}

func (x *CCitadelClientMsg_PerfReport) Reset() {
	*x = CCitadelClientMsg_PerfReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_clientmessages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCitadelClientMsg_PerfReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCitadelClientMsg_PerfReport) ProtoMessage() {}

func (x *CCitadelClientMsg_PerfReport) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_clientmessages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCitadelClientMsg_PerfReport.ProtoReflect.Descriptor instead.
func (*CCitadelClientMsg_PerfReport) Descriptor() ([]byte, []int) {
	return file_citadel_clientmessages_proto_rawDescGZIP(), []int{9}
}

func (x *CCitadelClientMsg_PerfReport) GetAverageFrameTime() float32 {
	if x != nil && x.AverageFrameTime != nil {
		return *x.AverageFrameTime
	}
	return 0
}

func (x *CCitadelClientMsg_PerfReport) GetMaxFrameTime() float32 {
	if x != nil && x.MaxFrameTime != nil {
		return *x.MaxFrameTime
	}
	return 0
}

func (x *CCitadelClientMsg_PerfReport) GetAverageComputeTime() float32 {
	if x != nil && x.AverageComputeTime != nil {
		return *x.AverageComputeTime
	}
	return 0
}

func (x *CCitadelClientMsg_PerfReport) GetMaxComputeTime() float32 {
	if x != nil && x.MaxComputeTime != nil {
		return *x.MaxComputeTime
	}
	return 0
}

func (x *CCitadelClientMsg_PerfReport) GetAverageClientTickTime() float32 {
	if x != nil && x.AverageClientTickTime != nil {
		return *x.AverageClientTickTime
	}
	return 0
}

func (x *CCitadelClientMsg_PerfReport) GetMaxClientTickTime() float32 {
	if x != nil && x.MaxClientTickTime != nil {
		return *x.MaxClientTickTime
	}
	return 0
}

func (x *CCitadelClientMsg_PerfReport) GetAverageClientSimulateTime() float32 {
	if x != nil && x.AverageClientSimulateTime != nil {
		return *x.AverageClientSimulateTime
	}
	return 0
}

func (x *CCitadelClientMsg_PerfReport) GetMaxClientSimulateTime() float32 {
	if x != nil && x.MaxClientSimulateTime != nil {
		return *x.MaxClientSimulateTime
	}
	return 0
}

func (x *CCitadelClientMsg_PerfReport) GetAverageOutputTime() float32 {
	if x != nil && x.AverageOutputTime != nil {
		return *x.AverageOutputTime
	}
	return 0
}

func (x *CCitadelClientMsg_PerfReport) GetMaxOutputTime() float32 {
	if x != nil && x.MaxOutputTime != nil {
		return *x.MaxOutputTime
	}
	return 0
}

func (x *CCitadelClientMsg_PerfReport) GetAverageWaitForRenderingToCompleteTime() float32 {
	if x != nil && x.AverageWaitForRenderingToCompleteTime != nil {
		return *x.AverageWaitForRenderingToCompleteTime
	}
	return 0
}

func (x *CCitadelClientMsg_PerfReport) GetMaxWaitForRenderingToCompleteTime() float32 {
	if x != nil && x.MaxWaitForRenderingToCompleteTime != nil {
		return *x.MaxWaitForRenderingToCompleteTime
	}
	return 0
}

func (x *CCitadelClientMsg_PerfReport) GetAverageSwapTime() float32 {
	if x != nil && x.AverageSwapTime != nil {
		return *x.AverageSwapTime
	}
	return 0
}

func (x *CCitadelClientMsg_PerfReport) GetMaxSwapTime() float32 {
	if x != nil && x.MaxSwapTime != nil {
		return *x.MaxSwapTime
	}
	return 0
}

func (x *CCitadelClientMsg_PerfReport) GetAverageFrameUpdateTime() float32 {
	if x != nil && x.AverageFrameUpdateTime != nil {
		return *x.AverageFrameUpdateTime
	}
	return 0
}

func (x *CCitadelClientMsg_PerfReport) GetMaxFrameUpdateTime() float32 {
	if x != nil && x.MaxFrameUpdateTime != nil {
		return *x.MaxFrameUpdateTime
	}
	return 0
}

func (x *CCitadelClientMsg_PerfReport) GetAverageIdleTime() float32 {
	if x != nil && x.AverageIdleTime != nil {
		return *x.AverageIdleTime
	}
	return 0
}

func (x *CCitadelClientMsg_PerfReport) GetMaxIdleTime() float32 {
	if x != nil && x.MaxIdleTime != nil {
		return *x.MaxIdleTime
	}
	return 0
}

func (x *CCitadelClientMsg_PerfReport) GetAverageInputProcessingTime() float32 {
	if x != nil && x.AverageInputProcessingTime != nil {
		return *x.AverageInputProcessingTime
	}
	return 0
}

func (x *CCitadelClientMsg_PerfReport) GetMaxInputProcessingTime() float32 {
	if x != nil && x.MaxInputProcessingTime != nil {
		return *x.MaxInputProcessingTime
	}
	return 0
}

type CCitadelClientMsg_GetDamageStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyPlayerSlot *uint32 `protobuf:"varint,1,opt,name=lobby_player_slot,json=lobbyPlayerSlot" json:"lobby_player_slot,omitempty"`
	AbilityName     *string `protobuf:"bytes,2,opt,name=ability_name,json=abilityName" json:"ability_name,omitempty"`
}

func (x *CCitadelClientMsg_GetDamageStats) Reset() {
	*x = CCitadelClientMsg_GetDamageStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_clientmessages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCitadelClientMsg_GetDamageStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCitadelClientMsg_GetDamageStats) ProtoMessage() {}

func (x *CCitadelClientMsg_GetDamageStats) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_clientmessages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCitadelClientMsg_GetDamageStats.ProtoReflect.Descriptor instead.
func (*CCitadelClientMsg_GetDamageStats) Descriptor() ([]byte, []int) {
	return file_citadel_clientmessages_proto_rawDescGZIP(), []int{10}
}

func (x *CCitadelClientMsg_GetDamageStats) GetLobbyPlayerSlot() uint32 {
	if x != nil && x.LobbyPlayerSlot != nil {
		return *x.LobbyPlayerSlot
	}
	return 0
}

func (x *CCitadelClientMsg_GetDamageStats) GetAbilityName() string {
	if x != nil && x.AbilityName != nil {
		return *x.AbilityName
	}
	return ""
}

type CCitadelClientCachedPlayerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *uint32                                 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Stats   []*CCitadelClientCachedPlayerStats_Stat `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
}

func (x *CCitadelClientCachedPlayerStats) Reset() {
	*x = CCitadelClientCachedPlayerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_clientmessages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCitadelClientCachedPlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCitadelClientCachedPlayerStats) ProtoMessage() {}

func (x *CCitadelClientCachedPlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_clientmessages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCitadelClientCachedPlayerStats.ProtoReflect.Descriptor instead.
func (*CCitadelClientCachedPlayerStats) Descriptor() ([]byte, []int) {
	return file_citadel_clientmessages_proto_rawDescGZIP(), []int{11}
}

func (x *CCitadelClientCachedPlayerStats) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CCitadelClientCachedPlayerStats) GetStats() []*CCitadelClientCachedPlayerStats_Stat {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CCitadelClientMsg_ExecuteMapUnitAbility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityEntityIndex *int32 `protobuf:"varint,1,opt,name=ability_entity_index,json=abilityEntityIndex" json:"ability_entity_index,omitempty"`
	TargetEntityIndex  *int32 `protobuf:"varint,2,opt,name=target_entity_index,json=targetEntityIndex" json:"target_entity_index,omitempty"`
}

func (x *CCitadelClientMsg_ExecuteMapUnitAbility) Reset() {
	*x = CCitadelClientMsg_ExecuteMapUnitAbility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_clientmessages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCitadelClientMsg_ExecuteMapUnitAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCitadelClientMsg_ExecuteMapUnitAbility) ProtoMessage() {}

func (x *CCitadelClientMsg_ExecuteMapUnitAbility) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_clientmessages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCitadelClientMsg_ExecuteMapUnitAbility.ProtoReflect.Descriptor instead.
func (*CCitadelClientMsg_ExecuteMapUnitAbility) Descriptor() ([]byte, []int) {
	return file_citadel_clientmessages_proto_rawDescGZIP(), []int{12}
}

func (x *CCitadelClientMsg_ExecuteMapUnitAbility) GetAbilityEntityIndex() int32 {
	if x != nil && x.AbilityEntityIndex != nil {
		return *x.AbilityEntityIndex
	}
	return 0
}

func (x *CCitadelClientMsg_ExecuteMapUnitAbility) GetTargetEntityIndex() int32 {
	if x != nil && x.TargetEntityIndex != nil {
		return *x.TargetEntityIndex
	}
	return 0
}

type CCitadelClientCachedPlayerStats_Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatName        *string `protobuf:"bytes,1,opt,name=stat_name,json=statName" json:"stat_name,omitempty"`
	AllTimeTotal    *uint64 `protobuf:"varint,2,opt,name=all_time_total,json=allTimeTotal" json:"all_time_total,omitempty"`
	AllTimeMatchMax *uint32 `protobuf:"varint,3,opt,name=all_time_match_max,json=allTimeMatchMax" json:"all_time_match_max,omitempty"`
	AllTimeLifeMax  *uint32 `protobuf:"varint,4,opt,name=all_time_life_max,json=allTimeLifeMax" json:"all_time_life_max,omitempty"`
}

func (x *CCitadelClientCachedPlayerStats_Stat) Reset() {
	*x = CCitadelClientCachedPlayerStats_Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_clientmessages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCitadelClientCachedPlayerStats_Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCitadelClientCachedPlayerStats_Stat) ProtoMessage() {}

func (x *CCitadelClientCachedPlayerStats_Stat) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_clientmessages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCitadelClientCachedPlayerStats_Stat.ProtoReflect.Descriptor instead.
func (*CCitadelClientCachedPlayerStats_Stat) Descriptor() ([]byte, []int) {
	return file_citadel_clientmessages_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CCitadelClientCachedPlayerStats_Stat) GetStatName() string {
	if x != nil && x.StatName != nil {
		return *x.StatName
	}
	return ""
}

func (x *CCitadelClientCachedPlayerStats_Stat) GetAllTimeTotal() uint64 {
	if x != nil && x.AllTimeTotal != nil {
		return *x.AllTimeTotal
	}
	return 0
}

func (x *CCitadelClientCachedPlayerStats_Stat) GetAllTimeMatchMax() uint32 {
	if x != nil && x.AllTimeMatchMax != nil {
		return *x.AllTimeMatchMax
	}
	return 0
}

func (x *CCitadelClientCachedPlayerStats_Stat) GetAllTimeLifeMax() uint32 {
	if x != nil && x.AllTimeLifeMax != nil {
		return *x.AllTimeLifeMax
	}
	return 0
}

var File_citadel_clientmessages_proto protoreflect.FileDescriptor

var file_citadel_clientmessages_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x64, 0x6f, 0x74, 0x61, 0x1a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x19, 0x0a,
	0x17, 0x43, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x73, 0x67, 0x5f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x22, 0x55, 0x0a, 0x21, 0x43, 0x43, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x61,
	0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22,
	0x8e, 0x02, 0x0a, 0x19, 0x43, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x4d, 0x61, 0x70, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a,
	0x0d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x50, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x61, 0x70, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x50, 0x69, 0x6e, 0x67,
	0x22, 0xd4, 0x01, 0x0a, 0x1b, 0x43, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x65, 0x65, 0x6c,
	0x12, 0x2f, 0x0a, 0x14, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x70, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x6e, 0x61, 0x76, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x75,
	0x62, 0x6e, 0x61, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x0d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x9c, 0x01, 0x0a, 0x1d, 0x43, 0x43, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x11,
	0x70, 0x69, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x69, 0x6e, 0x67, 0x65, 0x64, 0x41,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x69, 0x6e, 0x67,
	0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x69, 0x6e, 0x67, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0x48, 0x0a, 0x19, 0x43, 0x43, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x4d, 0x61, 0x70, 0x4c,
	0x69, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x4d, 0x61, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x6c, 0x69, 0x6e, 0x65,
	0x22, 0xd1, 0x01, 0x0a, 0x1f, 0x43, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x68, 0x65,
	0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x50, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x6c, 0x6f, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x22, 0x43, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x66, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x46, 0x70, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f,
	0x66, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x46, 0x70,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x46, 0x70, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x19, 0x43,
	0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67,
	0x5f, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74,
	0x12, 0x32, 0x0a, 0x0a, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x4c, 0x61, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x65, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xc6, 0x08, 0x0a, 0x1c, 0x43, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x65, 0x72, 0x66, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x61, 0x78,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f,
	0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x61,
	0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3f, 0x0a, 0x1c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x5a, 0x0a, 0x2b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x25, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x57,
	0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a,
	0x27, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x21,
	0x6d, 0x61, 0x78, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x53, 0x77, 0x61, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15,
	0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x61, 0x78,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d,
	0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x41, 0x0a, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x71, 0x0a,
	0x20, 0x43, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x73, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xa1, 0x02, 0x0a, 0x1f, 0x43, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x1a, 0xa1, 0x01, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x12,
	0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x78, 0x12, 0x29, 0x0a, 0x11, 0x61, 0x6c, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x66,
	0x65, 0x4d, 0x61, 0x78, 0x22, 0x8b, 0x01, 0x0a, 0x27, 0x43, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x4d, 0x61, 0x70, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x30, 0x0a, 0x14, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x2a, 0xf5, 0x02, 0x0a, 0x16, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x18, 0x43, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x5f, 0x43, 0x4d, 0x5f, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0xe9, 0x07, 0x12, 0x17, 0x0a, 0x12,
	0x43, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x5f, 0x43, 0x4d, 0x5f, 0x4d, 0x61, 0x70, 0x50, 0x69,
	0x6e, 0x67, 0x10, 0xea, 0x07, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c,
	0x5f, 0x43, 0x4d, 0x5f, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x10, 0xeb, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x49, 0x54, 0x41, 0x44,
	0x45, 0x4c, 0x5f, 0x43, 0x4d, 0x5f, 0x50, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x10,
	0xec, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x5f, 0x43, 0x4d,
	0x5f, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x10, 0xed, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x43,
	0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x5f, 0x43, 0x4d, 0x5f, 0x50, 0x65, 0x72, 0x66, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x10, 0xee, 0x07, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x49, 0x54, 0x41, 0x44,
	0x45, 0x4c, 0x5f, 0x43, 0x4d, 0x5f, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0xef, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x49, 0x54, 0x41, 0x44, 0x45,
	0x4c, 0x5f, 0x43, 0x4d, 0x5f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x10, 0xf0, 0x07, 0x12, 0x17, 0x0a,
	0x12, 0x43, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x5f, 0x43, 0x4d, 0x5f, 0x4d, 0x61, 0x70, 0x4c,
	0x69, 0x6e, 0x65, 0x10, 0xf1, 0x07, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x49, 0x54, 0x41, 0x44, 0x45,
	0x4c, 0x5f, 0x43, 0x4d, 0x5f, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x69, 0x6e, 0x67,
	0x10, 0xf2, 0x07, 0x12, 0x25, 0x0a, 0x20, 0x43, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x5f, 0x43,
	0x4d, 0x5f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x55, 0x6e, 0x69, 0x74,
	0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0xf3, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x49,
	0x54, 0x41, 0x44, 0x45, 0x4c, 0x5f, 0x43, 0x4d, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0xf4, 0x07, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x62, 0x75, 0x66,
	0x66, 0x2f, 0x6d, 0x61, 0x6e, 0x74, 0x61, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x3b, 0x64, 0x6f, 0x74,
	0x61,
}

var (
	file_citadel_clientmessages_proto_rawDescOnce sync.Once
	file_citadel_clientmessages_proto_rawDescData = file_citadel_clientmessages_proto_rawDesc
)

func file_citadel_clientmessages_proto_rawDescGZIP() []byte {
	file_citadel_clientmessages_proto_rawDescOnce.Do(func() {
		file_citadel_clientmessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_citadel_clientmessages_proto_rawDescData)
	})
	return file_citadel_clientmessages_proto_rawDescData
}

var file_citadel_clientmessages_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_citadel_clientmessages_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_citadel_clientmessages_proto_goTypes = []any{
	(ECitadelClientMessages)(0),                     // 0: dota.ECitadelClientMessages
	(*CCitadelClientMsg_Pause)(nil),                 // 1: dota.CCitadelClientMsg_Pause
	(*CCitadelClientMsg_CancelAbilities)(nil),       // 2: dota.CCitadelClientMsg_CancelAbilities
	(*CCitadelClientMsg_MapPing)(nil),               // 3: dota.CCitadelClientMsg_MapPing
	(*CCitadelClientMsg_PingWheel)(nil),             // 4: dota.CCitadelClientMsg_PingWheel
	(*CCitadelClientMsg_AbilityPing)(nil),           // 5: dota.CCitadelClientMsg_AbilityPing
	(*CCitadelClientMsg_MapLine)(nil),               // 6: dota.CCitadelClientMsg_MapLine
	(*CCitadelClientMsg_QuickResponse)(nil),         // 7: dota.CCitadelClientMsg_QuickResponse
	(*CCitadelClientMsg_PerformanceStats)(nil),      // 8: dota.CCitadelClientMsg_PerformanceStats
	(*CCitadelClientMsg_ChatMsg)(nil),               // 9: dota.CCitadelClientMsg_ChatMsg
	(*CCitadelClientMsg_PerfReport)(nil),            // 10: dota.CCitadelClientMsg_PerfReport
	(*CCitadelClientMsg_GetDamageStats)(nil),        // 11: dota.CCitadelClientMsg_GetDamageStats
	(*CCitadelClientCachedPlayerStats)(nil),         // 12: dota.CCitadelClientCachedPlayerStats
	(*CCitadelClientMsg_ExecuteMapUnitAbility)(nil), // 13: dota.CCitadelClientMsg_ExecuteMapUnitAbility
	(*CCitadelClientCachedPlayerStats_Stat)(nil),    // 14: dota.CCitadelClientCachedPlayerStats.Stat
	(*CMsgVector)(nil),                              // 15: dota.CMsgVector
	(*CMsgMapLine)(nil),                             // 16: dota.CMsgMapLine
	(CMsgLaneColor)(0),                              // 17: dota.CMsgLaneColor
}
var file_citadel_clientmessages_proto_depIdxs = []int32{
	15, // 0: dota.CCitadelClientMsg_MapPing.ping_location:type_name -> dota.CMsgVector
	15, // 1: dota.CCitadelClientMsg_PingWheel.ping_location:type_name -> dota.CMsgVector
	16, // 2: dota.CCitadelClientMsg_MapLine.mapline:type_name -> dota.CMsgMapLine
	17, // 3: dota.CCitadelClientMsg_ChatMsg.lane_color:type_name -> dota.CMsgLaneColor
	14, // 4: dota.CCitadelClientCachedPlayerStats.stats:type_name -> dota.CCitadelClientCachedPlayerStats.Stat
	5,  // [5:5] is the sub-list for method output_type
	5,  // [5:5] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_citadel_clientmessages_proto_init() }
func file_citadel_clientmessages_proto_init() {
	if File_citadel_clientmessages_proto != nil {
		return
	}
	file_networkbasetypes_proto_init()
	file_citadel_gcmessages_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_citadel_clientmessages_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CCitadelClientMsg_Pause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_clientmessages_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CCitadelClientMsg_CancelAbilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_clientmessages_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CCitadelClientMsg_MapPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_clientmessages_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CCitadelClientMsg_PingWheel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_clientmessages_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CCitadelClientMsg_AbilityPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_clientmessages_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CCitadelClientMsg_MapLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_clientmessages_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CCitadelClientMsg_QuickResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_clientmessages_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CCitadelClientMsg_PerformanceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_clientmessages_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CCitadelClientMsg_ChatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_clientmessages_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CCitadelClientMsg_PerfReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_clientmessages_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CCitadelClientMsg_GetDamageStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_clientmessages_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CCitadelClientCachedPlayerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_clientmessages_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CCitadelClientMsg_ExecuteMapUnitAbility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_clientmessages_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CCitadelClientCachedPlayerStats_Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_citadel_clientmessages_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_citadel_clientmessages_proto_goTypes,
		DependencyIndexes: file_citadel_clientmessages_proto_depIdxs,
		EnumInfos:         file_citadel_clientmessages_proto_enumTypes,
		MessageInfos:      file_citadel_clientmessages_proto_msgTypes,
	}.Build()
	File_citadel_clientmessages_proto = out.File
	file_citadel_clientmessages_proto_rawDesc = nil
	file_citadel_clientmessages_proto_goTypes = nil
	file_citadel_clientmessages_proto_depIdxs = nil
}
